{"task_id": "BigCodeBench/13", "solution": "import subprocess\nimport ftplib\nimport os\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    try:\n        # Connect to the FTP server\n        with ftplib.FTP(ftp_server) as ftp:\n            try:\n                # Login to the FTP server\n                ftp.login(user=ftp_user, passwd=ftp_password)\n            except ftplib.error_perm as e:\n                raise Exception(f\"Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}\")\n\n            try:\n                # Change to the specified directory\n                ftp.cwd(ftp_dir)\n            except ftplib.error_perm as e:\n                raise Exception(f\"Failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}\")\n\n            # List files in the directory\n            file_list = ftp.nlst()\n\n    except ftplib.all_errors as e:\n        raise Exception(f\"Failed to connect to FTP server {ftp_server}: {str(e)}\")\n\n    # Ensure the download directory exists\n    os.makedirs('downloaded_files', exist_ok=True)\n\n    # Build the wget command\n    wget_command = [\n        'wget',\n        '--no-host-directories',\n        '--cut-dirs=1',\n        '--directory-prefix=downloaded_files',\n        '--user', ftp_user,\n        '--password', ftp_password,\n        '-r',\n        '-nH',\n        '-nd',\n        '-np',\n        '-R', 'index.html*',\n        f'ftp://{ftp_server}{ftp_dir}/'\n    ]\n\n    try:\n        # Execute wget command\n        subprocess.run(wget_command, check=True, capture_output=True, text=True)\n    except subprocess.CalledProcessError as e:\n        print(f\"Warning: Some files may not have been downloaded successfully. Error: {e}\")\n\n    return file_list"}
{"task_id": "BigCodeBench/15", "solution": "import subprocess\nimport csv\nimport os\ndef task_func(commands_file_path, output_dir_path):\n    # Check if the commands file exists\n    if not os.path.isfile(commands_file_path):\n        raise FileNotFoundError(f\"The file {commands_file_path} does not exist.\")\n    \n    # Create the output directory if it doesn't exist\n    os.makedirs(output_dir_path, exist_ok=True)\n    \n    output_files = []\n    \n    with open(commands_file_path, 'r', newline='') as csvfile:\n        reader = csv.reader(csvfile)\n        for index, row in enumerate(reader):\n            if row:  # Skip empty rows\n                command = row[0]\n                output_file_path = os.path.join(output_dir_path, f'command_{index}_output.txt')\n                output_files.append(output_file_path)\n                \n                try:\n                    # Execute the command and capture output\n                    result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)\n                    output = result.stdout\n                except subprocess.CalledProcessError as e:\n                    # If the command fails, capture the error message and exit code\n                    output = f\"Error: {e.stderr}\\nExit Code: {e.returncode}\"\n                \n                # Write the output or error message to the file\n                with open(output_file_path, 'w') as outfile:\n                    outfile.write(output)\n    \n    return output_files"}
{"task_id": "BigCodeBench/17", "solution": "import subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n    # Check if the process is running\n    for proc in psutil.process_iter(['name']):\n        if proc.info['name'] == process_name:\n            # Process found, terminate it\n            proc.terminate()\n            try:\n                proc.wait(timeout=5)  # Wait for up to 5 seconds for the process to terminate\n            except psutil.TimeoutExpired:\n                proc.kill()  # Force kill if it doesn't terminate gracefully\n            \n            # Wait a moment to ensure the process has fully terminated\n            time.sleep(1)\n            \n            # Restart the process\n            subprocess.Popen(process_name)\n            return f\"Process found. Restarting {process_name}.\"\n    \n    # If process is not found, start it\n    subprocess.Popen(process_name)\n    return f\"Process not found. Starting {process_name}.\""}
{"task_id": "BigCodeBench/19", "solution": "import os\nimport glob\nimport zipfile\ndef task_func(directory):\n    # Check if the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The specified directory does not exist: {directory}\")\n    \n    # Get all files in the directory (excluding subdirectories)\n    files = [f for f in glob.glob(os.path.join(directory, '*')) if os.path.isfile(f)]\n    \n    # If there are no files, return None\n    if not files:\n        return None\n    \n    # Define the path for the zip file\n    zip_path = os.path.join(directory, 'files.zip')\n    \n    # Create the zip file and add files to it\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files:\n            zipf.write(file, os.path.basename(file))\n    \n    return zip_path"}
{"task_id": "BigCodeBench/34", "solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Remove URLs from the text\n    text_without_urls = re.sub(r'http[s]?://\\S+', '', text)\n    \n    # Remove extra whitespace and check if there are any words left\n    cleaned_text = text_without_urls.strip()\n    if not cleaned_text:\n        raise ValueError(\"No words available to generate a word cloud after removing URLs.\")\n    \n    # Generate the word cloud\n    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(cleaned_text)\n    \n    # Plot the word cloud\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.title('Word Cloud')\n    plt.tight_layout(pad=0)\n    plt.show()\n    \n    return wordcloud"}
{"task_id": "BigCodeBench/37", "solution": "from sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(df, target_column):\n    # Separate features and target\n    X = df.drop(columns=[target_column])\n    y = df[target_column]\n    \n    # Initialize and train the RandomForestClassifier\n    rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n    rf_classifier.fit(X, y)\n    \n    # Get feature importances and sort them in descending order\n    feature_importances = pd.DataFrame({\n        'feature': X.columns,\n        'importance': rf_classifier.feature_importances_\n    }).sort_values('importance', ascending=False)\n    \n    # Create the bar plot\n    plt.figure(figsize=(10, 6))\n    ax = sns.barplot(x='importance', y='feature', data=feature_importances)\n    \n    # Set labels and title\n    ax.set_xlabel('Feature Importance Score')\n    ax.set_ylabel('Features')\n    ax.set_title('Visualizing Important Features')\n    \n    # Adjust layout and display the plot\n    plt.tight_layout()\n    plt.show()\n    \n    return rf_classifier, ax"}
{"task_id": "BigCodeBench/82", "solution": "from flask import Flask, render_template, redirect, url_for, flash\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\nlogin_manager = LoginManager()\nclass User(UserMixin):\n    def __init__(self, id, username, password_hash):\n        self.id = id\n        self.username = username\n        self.password_hash = password_hash\n\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\nusers = {\n    '1': User('1', 'user1', generate_password_hash('password1')),\n    '2': User('2', 'user2', generate_password_hash('password2'))\n}\ndef task_func(secret_key, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    app.config['SECRET_KEY'] = secret_key\n    login_manager.init_app(app)\n    login_manager.login_view = 'login'\n\n    @app.route('/')\n    def home():\n        return render_template('home.html')\n\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        if current_user.is_authenticated:\n            return redirect(url_for('protected'))\n        \n        form = LoginForm()\n        if form.validate_on_submit():\n            user = next((user for user in users.values() if user.username == form.username.data), None)\n            if user and user.check_password(form.password.data):\n                login_user(user)\n                return redirect(url_for('protected'))\n            else:\n                flash('Invalid username or password')\n        return render_template('login.html', form=form)\n\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('home'))\n\n    @app.route('/protected')\n    @login_required\n    def protected():\n        return render_template('protected.html', username=current_user.username)\n\n    return app"}
{"task_id": "BigCodeBench/89", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data, column, outlier_z_score):\n    # Extract the specified column\n    if isinstance(data, np.ndarray):\n        data_column = data[:, column] if isinstance(column, int) else data[:, data.dtype.names.index(column)]\n    else:  # Assume pandas DataFrame\n        data_column = data[column].values\n\n    # Standardize the column\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data_column.reshape(-1, 1)).flatten()\n    \n    # Calculate Z-scores\n    z_scores = np.abs(stats.zscore(standardized_data))\n    \n    # Identify outliers\n    outlier_indices = np.where(z_scores > outlier_z_score)[0]\n    \n    # Remove outliers\n    if isinstance(data, np.ndarray):\n        data_without_outliers = np.delete(data, outlier_indices, axis=0)\n    else:  # Assume pandas DataFrame\n        data_without_outliers = data.drop(data.index[outlier_indices])\n    \n    # Visualization\n    plt.figure(figsize=(12, 6))\n    \n    # Plot original data with outliers\n    plt.subplot(1, 2, 1)\n    plt.scatter(range(len(data_column)), data_column, color='blue', alpha=0.6)\n    plt.title('Data with Outliers')\n    plt.xlabel('Index')\n    plt.ylabel(column)\n    \n    # Plot data without outliers\n    plt.subplot(1, 2, 2)\n    clean_data = data_without_outliers[:, column] if isinstance(data, np.ndarray) else data_without_outliers[column]\n    plt.scatter(range(len(clean_data)), clean_data, color='green', alpha=0.6)\n    plt.title('Data without Outliers')\n    plt.xlabel('Index')\n    plt.ylabel(column)\n    \n    plt.tight_layout()\n    plt.show()\n    \n    return (data, data_without_outliers, outlier_indices)"}
{"task_id": "BigCodeBench/92", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\ndef task_func(data, n_clusters=3):\n    # Check if 'data' is a pd.DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n    \n    # Check if 'n_clusters' is an integer greater than 1\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n    \n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    cluster_labels = kmeans.fit_predict(data)\n    \n    # Generate scatter plot\n    fig, ax = plt.subplots(figsize=(10, 8))\n    \n    # Plot data points\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=cluster_labels, cmap='viridis')\n    \n    # Plot centroids\n    centroids = kmeans.cluster_centers_\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker='X', s=200, c='red', label='Centroids')\n    \n    # Set labels and title\n    ax.set_xlabel(data.columns[0])\n    ax.set_ylabel(data.columns[1])\n    ax.set_title('K-means Clustering Results')\n    \n    # Add legend for clusters and centroids\n    legend1 = ax.legend(*scatter.legend_elements(), title=\"Clusters\")\n    ax.add_artist(legend1)\n    ax.legend(handles=[plt.Line2D([0], [0], marker='X', color='w', markerfacecolor='red', markersize=10)], \n              labels=['Centroids'], loc='lower right')\n    \n    return np.array(cluster_labels), ax"}
{"task_id": "BigCodeBench/93", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data, n_components=2):\n    # Validate n_components\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n\n    # Standardize the data\n    scaler = StandardScaler()\n    scaled_data = scaler.fit_transform(data)\n\n    # Perform PCA\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(scaled_data)\n\n    # Create DataFrame with transformed data\n    columns = [f'PC{i+1}' for i in range(n_components)]\n    transformed_df = pd.DataFrame(data=transformed_data, columns=columns)\n\n    # Generate scatter plot\n    fig, ax = plt.subplots(figsize=(10, 8))\n    \n    if n_components >= 2:\n        scatter = ax.scatter(transformed_df['PC1'], transformed_df['PC2'], \n                             c=transformed_df.index, cmap='viridis')\n        ax.set_xlabel('Principal Component 1')\n        ax.set_ylabel('Principal Component 2')\n        plt.colorbar(scatter, label='Sample Index')\n    else:\n        ax.scatter(range(len(transformed_df)), transformed_df['PC1'])\n        ax.set_xlabel('Sample Index')\n        ax.set_ylabel('Principal Component 1')\n\n    ax.set_title(f'PCA Transformed Data ({n_components} components)')\n    plt.tight_layout()\n\n    return transformed_df, ax"}
{"task_id": "BigCodeBench/99", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\ndef task_func():\n    # Load the iris dataset\n    iris = load_iris()\n    iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    iris_df['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)\n\n    # Set the global font to Arial\n    plt.rcParams['font.family'] = 'Arial'\n\n    # Create the pair plot\n    pair_plot = sns.pairplot(iris_df, hue='species', diag_kind='kde', height=2.5)\n\n    # Set the main title\n    pair_plot.fig.suptitle('Iris Dataset Pair Plot', fontsize=16, y=1.02)\n\n    # Adjust labels and ticks for better readability\n    for i, ax in enumerate(pair_plot.axes.flatten()):\n        # Set x and y labels\n        if i % 4 == 0:  # Left column\n            ax.set_ylabel(iris.feature_names[i // 4], fontsize=10)\n        if i >= 12:  # Bottom row\n            ax.set_xlabel(iris.feature_names[i % 4], fontsize=10)\n        \n        # Rotate x-axis labels for better fit\n        ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')\n        \n        # Adjust tick label size\n        ax.tick_params(axis='both', which='major', labelsize=8)\n\n    # Adjust the layout to prevent clipping of labels\n    plt.tight_layout()\n\n    return pair_plot.fig"}
{"task_id": "BigCodeBench/100", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime, timedelta\ndef task_func(seed=42):\n    try:\n        # Set seed for reproducibility\n        random.seed(seed)\n\n        # Generate dates for the past 30 days\n        end_date = datetime.now()\n        start_date = end_date - timedelta(days=30)\n        dates = pd.date_range(start=start_date, end=end_date, freq='D')\n\n        # Generate random values\n        values = [random.uniform(0, 100) for _ in range(len(dates))]\n\n        # Create DataFrame\n        df = pd.DataFrame({'Date': dates, 'Value': values})\n\n        # Create plot\n        fig, ax = plt.subplots(figsize=(10, 6))\n        ax.plot(df['Date'], df['Value'], marker='o', linestyle='-')\n\n        # Style the plot\n        plt.rcParams['font.family'] = 'Arial'\n        ax.set_xlabel('Date', fontname='Arial', fontsize=12)\n        ax.set_ylabel('Value', fontname='Arial', fontsize=12)\n        ax.set_title('Random Time Series Data', fontname='Arial', fontsize=14)\n\n        # Format x-axis\n        ax.tick_params(axis='x', rotation=45)\n        fig.autofmt_xdate()\n\n        # Add grid\n        ax.grid(True, linestyle='--', alpha=0.7)\n\n        return ax\n\n    except Exception as e:\n        raise ValueError(f\"An issue occurred while generating the data or plot: {str(e)}\")"}
{"task_id": "BigCodeBench/101", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42, save_path=None):\n    try:\n        # Set random seed for reproducibility\n        np.random.seed(seed)\n\n        # Load the Boston Housing dataset\n        raw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n        data = raw_df.drop(raw_df.columns[-1], axis=1)\n        data.columns = [\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\", \"DIS\", \"RAD\", \"TAX\", \"PTRATIO\", \"B\", \"LSTAT\", \"MEDV\"]\n\n        # Calculate the correlation matrix\n        corr_matrix = data.corr()\n\n        # Create the heatmap\n        plt.figure(figsize=(12, 10))\n        ax = sns.heatmap(corr_matrix, annot=True, fmt=\".2f\", cmap=\"coolwarm\", \n                         square=True, linewidths=0.5, cbar_kws={\"shrink\": .75})\n\n        plt.title(\"Correlation Heatmap of Boston Housing Dataset\")\n        plt.tight_layout()\n\n        # Save the plot if a save path is provided\n        if save_path:\n            plt.savefig(save_path, dpi=300, bbox_inches=\"tight\")\n\n        return ax\n\n    except Exception as e:\n        raise ValueError(f\"An error occurred in generating or saving the plot: {str(e)}\")"}
{"task_id": "BigCodeBench/108", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    # Check if 'df' is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input 'df' must be a pandas DataFrame.\")\n    \n    # Check if 'df' contains the required 'value' column\n    if 'value' not in df.columns:\n        raise ValueError(\"DataFrame must contain a 'value' column.\")\n    \n    # Check if 'value' column contains numeric data\n    if not pd.api.types.is_numeric_dtype(df['value']):\n        raise ValueError(\"The 'value' column must contain numeric data.\")\n    \n    # Check if 'freq' is a valid frequency string\n    try:\n        pd.date_range(start='2020-01-01', periods=2, freq=freq)\n    except ValueError:\n        raise ValueError(\"The 'freq' parameter is not a valid frequency string.\")\n    \n    # Check if 'decomposition_model' is valid\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"The 'decomposition_model' must be either 'additive' or 'multiplicative'.\")\n    \n    # Ensure the index is a DatetimeIndex\n    if not isinstance(df.index, pd.DatetimeIndex):\n        raise ValueError(\"DataFrame index must be a DatetimeIndex.\")\n    \n    # Perform the time series decomposition\n    result = seasonal_decompose(df['value'], model=decomposition_model, period=pd.Timedelta(freq).days)\n    \n    # Create the plot\n    fig, axes = plt.subplots(4, 1, figsize=(12, 10), sharex=True)\n    \n    axes[0].plot(result.observed)\n    axes[0].set_title('Observed')\n    \n    axes[1].plot(result.trend)\n    axes[1].set_title('Trend')\n    \n    axes[2].plot(result.seasonal)\n    axes[2].set_title('Seasonal')\n    \n    axes[3].plot(result.resid)\n    axes[3].set_title('Residual')\n    \n    plt.tight_layout()\n    \n    return result, axes"}
{"task_id": "BigCodeBench/120", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    # Input validation\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"'start_date' and 'end_date' must be datetime.datetime instances\")\n    if start_date > end_date:\n        raise ValueError(\"'start_date' must not be later than 'end_date'\")\n\n    # Set the seed for reproducibility\n    random_seed(seed)\n\n    # Calculate the number of days in the range (inclusive)\n    num_days = (end_date - start_date).days + 1\n\n    # Generate a list of random dates within the range\n    random_dates = [start_date + timedelta(days=randint(0, num_days - 1)) for _ in range(num_days)]\n\n    # Create and return a pandas Series from the list of random dates\n    return pd.Series(random_dates)"}
{"task_id": "BigCodeBench/123", "solution": "import pandas as pd\nimport os\nimport glob\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    # Check if my_list is a list\n    if not isinstance(my_list, list):\n        raise TypeError(\"The 'my_list' parameter must be a list.\")\n    \n    # Add '12' to the list\n    my_list.append(12)\n    \n    # Calculate the number of files to concatenate\n    num_files_to_concat = sum(my_list)\n    \n    # Get the list of CSV files in the directory\n    file_pattern = os.path.join(file_dir, f'*{file_ext}')\n    files = glob.glob(file_pattern)\n    \n    # Check if there are any files in the directory\n    if not files:\n        raise FileNotFoundError(f\"No files found in the directory '{file_dir}' with extension '{file_ext}'.\")\n    \n    # Ensure we do not attempt to concatenate more files than available\n    num_files_to_concat = min(num_files_to_concat, len(files))\n    \n    # Read and concatenate the selected CSV files into a DataFrame\n    dfs = [pd.read_csv(file) for file in files[:num_files_to_concat]]\n    result_df = pd.concat(dfs, ignore_index=True)\n    \n    return result_df"}
{"task_id": "BigCodeBench/124", "solution": "from random import randint, seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(my_list, size=100, seed=100):\n    # Input validation\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list\")\n    if not all(isinstance(x, (int, float)) for x in my_list):\n        raise ValueError(\"my_list must contain only numeric elements (int or float)\")\n\n    # Set random seed for reproducibility\n    random_seed(seed)\n\n    # Enhance my_list\n    my_list.append(12)\n\n    # Calculate sum of elements in my_list, limited by size\n    total_elements = min(sum(my_list), size)\n\n    # Start timing\n    start_time = time.time()\n\n    # Generate list of random integers\n    random_numbers = [randint(1, 100) for _ in range(total_elements)]\n\n    # End timing\n    end_time = time.time()\n    time_taken = end_time - start_time\n\n    # Create histogram\n    fig, ax = plt.subplots()\n    ax.hist(random_numbers, bins=range(1, 102), edgecolor='black')\n    ax.set_xlabel('Number')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Distribution of Random Numbers')\n\n    return time_taken, ax"}
{"task_id": "BigCodeBench/129", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\ndef task_func(url='http://example.com'):\n    try:\n        # Send a GET request to the URL\n        response = requests.get(url)\n        response.raise_for_status()  # Raise HTTPError for bad responses\n    except requests.RequestException as e:\n        raise ConnectionError(f\"Failed to connect to {url}: {e}\")\n\n    try:\n        # Parse the HTML content using BeautifulSoup\n        soup = BeautifulSoup(response.text, 'html.parser')\n        \n        # Find the first table in the parsed content\n        table = soup.find('table')\n        if not table:\n            raise ValueError(\"No table found on the page.\")\n        \n        # Extract headers if they exist\n        headers = []\n        header_row = table.find('tr')\n        if header_row:\n            headers = [header.text.strip() for header in header_row.find_all('th')]\n        \n        # Extract rows of the table\n        rows = []\n        for row in table.find_all('tr'):\n            cells = row.find_all('td')\n            if cells:\n                rows.append([cell.text.strip() for cell in cells])\n        \n        # Create a DataFrame\n        df = pd.DataFrame(rows, columns=headers if headers else None)\n        \n        if df.empty:\n            raise ValueError(\"No data found in the table.\")\n        \n        return df\n    except Exception as e:\n        raise ValueError(f\"Failed to parse the page content: {e}\")"}
{"task_id": "BigCodeBench/139", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    # Check if the input is a non-empty DataFrame\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty DataFrame\")\n    \n    # Get numeric columns\n    numeric_columns = df.select_dtypes(include=[np.number]).columns\n    \n    # Check if there are any numeric columns\n    if len(numeric_columns) == 0:\n        raise ValueError(\"There are no numeric columns in the DataFrame\")\n    \n    # Create a list to store the Axes objects\n    axes_list = []\n    \n    # Create histograms for each numeric column\n    for column in numeric_columns:\n        fig, ax = plt.subplots()\n        df[column].hist(ax=ax)\n        ax.set_title(column)\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Frequency')\n        axes_list.append(ax)\n    \n    return axes_list"}
{"task_id": "BigCodeBench/147", "solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread, Lock\ndef task_func(ip_range, port):\n    def check_port(ip, port, results, lock):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(1)\n        try:\n            result = sock.connect_ex((str(ip), port))\n            with lock:\n                results[str(ip)] = (result == 0)\n        finally:\n            sock.close()\n\n    results = {}\n    lock = Lock()\n    threads = []\n\n    for ip in IPv4Network(ip_range):\n        thread = Thread(target=check_port, args=(ip, port, results, lock))\n        thread.start()\n        threads.append(thread)\n\n    for thread in threads:\n        thread.join()\n\n    return results"}
{"task_id": "BigCodeBench/161", "solution": "import re\nimport pandas as pd\nfrom datetime import datetime\nimport os\ndef task_func(log_file):\n    # Regular expression pattern to match log entries\n    pattern = r'(\\w+): \\[(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\] - (.+)'\n    \n    # Lists to store extracted data\n    types = []\n    timestamps = []\n    messages = []\n    \n    # Read and process the log file\n    with open(log_file, 'r') as file:\n        for line in file:\n            match = re.match(pattern, line.strip())\n            if match:\n                log_type, timestamp_str, message = match.groups()\n                try:\n                    # Validate timestamp format\n                    timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')\n                    types.append(log_type)\n                    timestamps.append(timestamp_str)\n                    messages.append(message)\n                except ValueError:\n                    raise ValueError(f\"Invalid timestamp format in log entry: {line.strip()}\")\n    \n    # Check if any valid log entries were found\n    if not types:\n        raise ValueError(\"No valid log entries found in the log file.\")\n    \n    # Create a DataFrame from the extracted data\n    df = pd.DataFrame({\n        'Type': types,\n        'Timestamp': timestamps,\n        'Message': messages\n    })\n    \n    # Generate output CSV file path\n    output_file = 'structured_logs.csv'\n    \n    # Save the DataFrame to a CSV file\n    df.to_csv(output_file, index=False)\n    \n    # Return the absolute path of the created CSV file\n    return os.path.abspath(output_file)"}
{"task_id": "BigCodeBench/162", "solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(text, rwidth=0.8):\n    # Extract words from the text using regex\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    \n    # Calculate word lengths\n    word_lengths = [len(word) for word in words]\n    \n    # Create a figure and axis\n    fig, ax = plt.subplots()\n    \n    if word_lengths:\n        # Determine the range for bins\n        max_length = max(word_lengths)\n        bins = range(1, max_length + 2)  # +2 to include the last bin properly\n        \n        # Create the histogram\n        ax.hist(word_lengths, bins=bins, rwidth=rwidth, align='left', edgecolor='black')\n        \n        # Set labels and title\n        ax.set_xlabel('Word Length')\n        ax.set_ylabel('Frequency')\n        ax.set_title('Distribution of Word Lengths')\n        \n        # Set x-axis ticks to integers\n        ax.set_xticks(range(1, max_length + 1))\n        \n        # Add grid for better readability\n        ax.grid(axis='y', linestyle='--', alpha=0.7)\n    else:\n        # If no words are found, display a message\n        ax.text(0.5, 0.5, 'No words found in the text', \n                horizontalalignment='center', verticalalignment='center', \n                transform=ax.transAxes)\n        ax.set_xlabel('Word Length')\n        ax.set_ylabel('Frequency')\n        ax.set_title('Distribution of Word Lengths (Empty)')\n    \n    # Adjust layout to prevent clipping of labels\n    plt.tight_layout()\n    \n    return ax"}
{"task_id": "BigCodeBench/177", "solution": "import re\nimport nltk\nfrom string import punctuation\nfrom collections import Counter\nimport pandas as pd\ndef task_func(df):\n    # Check if DataFrame is empty or missing necessary columns\n    if df.empty or not {'Title', 'Content'}.issubset(df.columns):\n        raise ValueError(\"DataFrame is empty or does not contain the necessary columns 'Title' and 'Content'.\")\n\n    # Filter articles with titles containing \"like\" or \"what\" (case-insensitive)\n    filtered_df = df[df['Title'].str.contains('like|what', case=False, na=False)]\n\n    # Combine all contents into one text\n    combined_text = ' '.join(filtered_df['Content'].fillna(''))\n\n    # Remove punctuation and convert to lowercase\n    text_no_punctuation = re.sub(f\"[{re.escape(punctuation)}]\", \"\", combined_text.lower())\n\n    # Tokenize the text\n    words = nltk.word_tokenize(text_no_punctuation)\n\n    # Calculate frequency of each word\n    word_freq = Counter(words)\n\n    return dict(word_freq)"}
{"task_id": "BigCodeBench/184", "solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\ndef task_func(dataframe, text_column):\n    def preprocess_text(text):\n        if pd.isna(text):\n            return \"\"\n        # Convert to lowercase\n        text = text.lower()\n        # Remove numbers\n        text = re.sub(r'\\d+', '', text)\n        # Remove punctuation\n        text = re.sub(r'[^\\w\\s]', '', text)\n        # Remove stopwords\n        text = \" \".join([word for word in text.split() if word not in STOPWORDS])\n        return text\n\n    # Apply preprocessing to the specified text column\n    dataframe['cleaned_text'] = dataframe[text_column].apply(preprocess_text)\n\n    # Vectorization\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(dataframe['cleaned_text'])\n    feature_names = vectorizer.get_feature_names_out()\n\n    # Transform to DataFrame\n    df_transformed = pd.DataFrame(X.toarray(), columns=feature_names, index=dataframe.index)\n\n    return df_transformed"}
{"task_id": "BigCodeBench/187", "solution": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    # Validate input dictionary\n    if 'Lon' not in dic or 'Lat' not in dic:\n        raise ValueError(\"'Lon' or 'Lat' keys are missing in the dictionary\")\n    if not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"'Lon' or 'Lat' values are not tuples\")\n\n    # Generate random coordinates for each city\n    coordinates = [Point(np.random.uniform(*dic['Lon']), np.random.uniform(*dic['Lat'])) for _ in cities]\n\n    # Create a GeoDataFrame\n    gdf = gpd.GeoDataFrame({\n        'City': cities,\n        'Coordinates': coordinates\n    }, geometry='Coordinates')\n\n    return gdf"}
{"task_id": "BigCodeBench/199", "solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    # Validate input types and formats\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object\")\n    if not isinstance(cities, list) or not all(isinstance(city, str) for city in cities):\n        raise ValueError(\"cities must be a list of strings\")\n    if not isinstance(weather_conditions, list) or not all(isinstance(condition, str) for condition in weather_conditions):\n        raise ValueError(\"weather_conditions must be a list of strings\")\n    if not isinstance(timezones, dict) or not all(isinstance(k, str) and isinstance(v, str) for k, v in timezones.items()):\n        raise ValueError(\"timezones must be a dictionary with string keys and values\")\n    if not isinstance(seed, int):\n        raise ValueError(\"seed must be an integer\")\n\n    # Set the random seed for reproducibility\n    set_seed(seed)\n\n    # Ensure utc_datetime is timezone-aware\n    if utc_datetime.tzinfo is None:\n        utc_datetime = utc_datetime.replace(tzinfo=pytz.UTC)\n\n    # Prepare the data for the DataFrame\n    weather_data = {\n        'City': [],\n        'Local Time': [],\n        'Weather Condition': []\n    }\n\n    for city in cities:\n        if city not in timezones:\n            raise ValueError(f\"Timezone not provided for city: {city}\")\n\n        # Convert UTC to local time\n        local_tz = pytz.timezone(timezones[city])\n        local_time = utc_datetime.astimezone(local_tz)\n\n        # Format local time as required\n        formatted_time = local_time.strftime('%Y-%m-%d %H:%M:%S %Z')\n\n        # Randomly select a weather condition\n        weather = weather_conditions[randint(0, len(weather_conditions) - 1)]\n\n        # Append data to the dictionary\n        weather_data['City'].append(city)\n        weather_data['Local Time'].append(formatted_time)\n        weather_data['Weather Condition'].append(weather)\n\n    # Create and return the DataFrame\n    return pd.DataFrame(weather_data)"}
{"task_id": "BigCodeBench/208", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(elements, seed=0):\n    # Input validation\n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"elements must be a positive integer\")\n\n    # Set random seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate random steps (-1 or 1)\n    steps = np.random.choice([-1, 1], size=elements)\n\n    # Calculate cumulative sum to get the walk positions\n    walk = np.cumsum(steps)\n\n    # Calculate descriptive statistics\n    df = pd.DataFrame(walk, columns=['Position'])\n    stats = df['Position'].describe(percentiles=[0.05, 0.25, 0.5, 0.75, 0.95])\n\n    # Create dictionary of descriptive statistics\n    stats_dict = {\n        'count': int(stats['count']),\n        'mean': stats['mean'],\n        'std': stats['std'],\n        'min': stats['min'],\n        '5th percentile': stats['5%'],\n        '25th percentile': stats['25%'],\n        'median': stats['50%'],\n        '75th percentile': stats['75%'],\n        '95th percentile': stats['95%'],\n        'max': stats['max']\n    }\n\n    # Plot the random walk\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(range(elements), walk)\n    ax.set_title('Random Walk')\n    ax.set_xlabel('Step')\n    ax.set_ylabel('Position')\n    ax.grid(True)\n\n    return stats_dict, ax"}
{"task_id": "BigCodeBench/211", "solution": "import requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n    # Ensure the destination directory exists\n    os.makedirs(destination_directory, exist_ok=True)\n\n    # Download the zip file\n    response = requests.get(url, headers=headers, stream=True)\n    response.raise_for_status()  # Raise an exception for bad status codes\n\n    # Generate a filename from the URL\n    filename = os.path.basename(url) or 'downloaded.zip'\n    zip_path = os.path.join(destination_directory, filename)\n\n    # Save the zip file\n    with open(zip_path, 'wb') as file:\n        for chunk in response.iter_content(chunk_size=8192):\n            file.write(chunk)\n\n    # Extract the zip file\n    extracted_files = []\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n        extracted_files = zip_ref.namelist()\n\n    return extracted_files"}
{"task_id": "BigCodeBench/214", "solution": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    # Set the seed for reproducibility\n    random.seed(seed)\n    np.random.seed(seed)\n\n    # Check if range_low is less than range_high\n    if range_low >= range_high:\n        raise ValueError(\"range_low must be less than range_high\")\n\n    # Generate a random RGB image\n    image = np.random.randint(range_low, range_high + 1, size=image_size, dtype=np.uint8)\n\n    # Display the image\n    fig, ax = plt.subplots()\n    ax.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    ax.axis('off')  # Hide the axes\n    plt.show()\n\n    return ax, image"}
{"task_id": "BigCodeBench/227", "solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\ndef task_func(L, M, N, audio_file):\n    # Check if the audio file exists\n    if not os.path.exists(audio_file):\n        raise FileNotFoundError(f\"The specified audio file '{audio_file}' does not exist.\")\n\n    # Create MxN matrix from list L\n    matrix = np.array(L[:M*N]).reshape(M, N)\n\n    # Read audio file\n    audio_data, sample_rate = sf.read(audio_file)\n\n    # Calculate Sound Pressure Level (SPL)\n    spl = 20 * np.log10(np.sqrt(np.mean(audio_data**2)))\n\n    # Normalize matrix based on SPL\n    normalized_matrix = matrix * (spl / np.max(np.abs(matrix)))\n\n    # Generate spectrogram from normalized matrix\n    D = librosa.stft(normalized_matrix.flatten())\n    S_db = librosa.amplitude_to_db(np.abs(D), ref=np.max)\n\n    # Create figure and plot spectrogram\n    fig, ax = plt.subplots()\n    img = librosa.display.specshow(S_db, sr=sample_rate, x_axis='time', y_axis='log', ax=ax)\n    ax.set_title('Spectrogram (log frequency, linear time)')\n    fig.colorbar(img, ax=ax, format=\"%+2.0f dB\")\n\n    return normalized_matrix, fig"}
{"task_id": "BigCodeBench/239", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(original):\n    # Extract numeric values from tuples\n    numeric_values = np.array([item for tup in original for item in tup if isinstance(item, (int, float))])\n    \n    # Compute basic statistics\n    basic_stats = {\n        'mean': np.mean(numeric_values),\n        'standard_deviation': np.std(numeric_values),\n        'minimum': np.min(numeric_values),\n        'maximum': np.max(numeric_values)\n    }\n    \n    # Generate histogram with overlaid PDF\n    fig, ax = plt.subplots()\n    \n    # Plot histogram\n    ax.hist(numeric_values, density=True, alpha=0.6, bins='auto', label='Histogram')\n    \n    # Fit a normal distribution to the data\n    mu, sigma = stats.norm.fit(numeric_values)\n    \n    # Generate points for the PDF\n    x = np.linspace(np.min(numeric_values), np.max(numeric_values), 100)\n    pdf = stats.norm.pdf(x, mu, sigma)\n    \n    # Plot PDF\n    ax.plot(x, pdf, 'r-', label='PDF')\n    \n    # Set labels and title\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Density')\n    ax.set_title('Histogram with Overlaid PDF')\n    ax.legend()\n    \n    return numeric_values, basic_stats, ax"}
{"task_id": "BigCodeBench/241", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n    # Convert the original list to a numpy array\n    original_array = np.array(original)\n    \n    # Normalize the array\n    normalized_array = preprocessing.normalize(original_array.reshape(1, -1))[0]\n    \n    # Create the plot\n    fig, ax = plt.subplots()\n    \n    # Plot original data\n    ax.plot(original_array, label='Original', marker='o')\n    \n    # Plot normalized data\n    ax.plot(normalized_array, label='Normalized', marker='x')\n    \n    # Customize the plot\n    ax.set_title('Original vs Normalized Data')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.legend()\n    ax.grid(True)\n    \n    # Show the plot\n    plt.show()\n    \n    return original_array, normalized_array, ax"}
{"task_id": "BigCodeBench/267", "solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\ndef task_func(data, sample_rate=8000):\n    # 1. Add a new key \"a\" with the value 1 to the dictionary\n    data['a'] = 1\n\n    # 2. Generate a signal based on the values in \"data\"\n    # We'll use the numeric values in the dictionary to create a composite signal\n    t = np.linspace(0, 1, sample_rate, endpoint=False)  # 1 second of time\n    signal = np.zeros_like(t)\n    for value in data.values():\n        if isinstance(value, (int, float)):\n            signal += np.sin(2 * np.pi * value * t)\n\n    # 3. Run a Fast Fourier Transform (FFT) on the signal\n    fft_result = fftpack.fft(signal)\n    frequencies = fftpack.fftfreq(len(signal), 1 / sample_rate)\n\n    # 4. Plot the FFT of the signal\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(frequencies[:len(frequencies)//2], np.abs(fft_result)[:len(frequencies)//2])\n    ax.set_xlabel('Frequency (Hz)')\n    ax.set_ylabel('Magnitude')\n    ax.set_title('FFT of the Signal')\n    ax.grid(True)\n\n    # Return the FFT result and the plot axes\n    return fft_result, ax"}
{"task_id": "BigCodeBench/273", "solution": "import cgi\nimport http.server\nimport json\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\ndef task_func():\n    class PostRequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            # Check Content-Type header\n            content_type = self.headers.get('Content-Type')\n            if content_type != 'application/json':\n                self.send_error(400, \"Content-Type header is not application/json\")\n                return\n\n            # Read and parse request body\n            content_length = int(self.headers.get('Content-Length', 0))\n            try:\n                body = self.rfile.read(content_length)\n                data = json.loads(body)\n            except json.JSONDecodeError:\n                self.send_error(400, \"Invalid JSON\")\n                return\n\n            # Check for 'data' key in JSON\n            if 'data' not in data:\n                self.send_error(400, \"No data key in request\")\n                return\n\n            # If all checks pass, send success response\n            self.send_response(200)\n            self.send_header('Content-Type', 'application/json')\n            response = json.dumps(SUCCESS_RESPONSE)\n            self.send_header('Content-Length', len(response))\n            self.end_headers()\n            self.wfile.write(response.encode('utf-8'))\n\n    # Start the server\n    server_address = ('', 8000)\n    httpd = http.server.HTTPServer(server_address, PostRequestHandler)\n    print(\"Server running on port 8000\")\n    httpd.serve_forever()"}
{"task_id": "BigCodeBench/274", "solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    class EmailRequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length).decode('utf-8')\n\n            try:\n                email_data = json.loads(post_data)\n                \n                # Check for required keys\n                required_keys = ['subject', 'message', 'to']\n                if not all(key in email_data for key in required_keys):\n                    raise ValueError(\"Missing required keys in email data\")\n\n                # Prepare the email\n                msg = MIMEText(email_data['message'])\n                msg['Subject'] = email_data['subject']\n                msg['From'] = smtp_username\n                msg['To'] = email_data['to']\n\n                # Send the email\n                with smtplib.SMTP(smtp_server, smtp_port) as server:\n                    server.starttls()\n                    server.login(smtp_username, smtp_password)\n                    server.send_message(msg)\n\n                # Send success response\n                self.send_response(200)\n                self.send_header('Content-Type', 'text/plain')\n                self.send_header('Content-Length', '7')\n                self.end_headers()\n                self.wfile.write(b'Success')\n\n            except json.JSONDecodeError:\n                self.send_error(400, \"Invalid JSON\")\n            except ValueError as e:\n                self.send_error(400, str(e))\n            except smtplib.SMTPAuthenticationError:\n                self.send_error(535, \"Authentication Failed\")\n            except Exception as e:\n                self.send_error(500, str(e))\n\n    return EmailRequestHandler"}
{"task_id": "BigCodeBench/287", "solution": "from collections import Counter\nimport os\nimport json\ndef task_func(filename, directory):\n    word_counts = {}\n    total_words = 0\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.txt'):\n                file_path = os.path.join(root, file)\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n                    words = content.split()\n                    word_count = len(words)\n                    word_counts[file] = word_count\n                    total_words += word_count\n\n    with open(filename, 'w', encoding='utf-8') as json_file:\n        json.dump(word_counts, json_file, ensure_ascii=False, indent=4)\n\n    return total_words"}
{"task_id": "BigCodeBench/302", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n    # Check if DataFrame is empty or missing required columns\n    if df.empty or not set(COLUMNS).issubset(df.columns):\n        raise ValueError(\"DataFrame is empty or missing required columns.\")\n\n    # Check if 'Value' column contains valid lists\n    if not all(isinstance(val, list) for val in df['Value']):\n        raise ValueError(\"'Value' column must contain lists.\")\n\n    # Find the maximum length of lists in 'Value' column\n    max_length = max(len(val) for val in df['Value'])\n\n    # Create new columns for each element in the lists\n    for i in range(max_length):\n        df[f'Value_{i}'] = df['Value'].apply(lambda x: x[i] if i < len(x) else np.nan)\n\n    # Calculate correlation matrix\n    correlation_matrix = df[[f'Value_{i}' for i in range(max_length)]].corr()\n\n    if plot:\n        plt.figure(figsize=(10, 8))\n        ax = sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')\n        plt.title(\"Correlation Heatmap\")\n        plt.tight_layout()\n        return correlation_matrix, ax\n    else:\n        return correlation_matrix"}
{"task_id": "BigCodeBench/308", "solution": "import pandas as pd\nfrom statistics import mean\nimport random\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\ndef task_func(additional_fields = []):\n    # Combine predefined fields with additional fields\n    all_fields = FIELDS + additional_fields\n    \n    # Generate random grades for each student in each subject\n    data = {student: {field: random.randint(0, 100) for field in all_fields} for student in STUDENTS}\n    \n    # Create DataFrame from the data\n    df = pd.DataFrame(data).T\n    \n    # Calculate the average grade for each student\n    df['Average Grade'] = df.mean(axis=1).round(2)\n    \n    # Calculate the average grade for each subject\n    subject_averages = df.mean().round(2)\n    subject_averages.name = 'Average'\n    \n    # Add the subject averages as a new row\n    df = df.append(subject_averages)\n    \n    return df"}
{"task_id": "BigCodeBench/310", "solution": "import os\nimport csv\nimport random\nfrom statistics import mean\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n    # Ensure the directory exists\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    \n    # Generate data\n    data = []\n    ages, heights, weights = [], [], []\n    \n    for i in range(1, PEOPLE_COUNT + 1):\n        name = f\"Person_{i}\"\n        age = random.randint(18, 80)\n        height = round(random.uniform(1.5, 2.0), 2)  # in meters\n        weight = round(random.uniform(50, 100), 2)  # in kg\n        \n        data.append([name, age, height, weight])\n        ages.append(age)\n        heights.append(height)\n        weights.append(weight)\n    \n    # Calculate averages\n    avg_age = round(mean(ages), 2)\n    avg_height = round(mean(heights), 2)\n    avg_weight = round(mean(weights), 2)\n    \n    # Write data to CSV file\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(COLUMNS)\n        writer.writerows(data)\n        writer.writerow(['Average', avg_age, avg_height, avg_weight])\n    \n    return os.path.abspath(filename)"}
{"task_id": "BigCodeBench/313", "solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n    # Dictionary to store subdirectories and their files\n    organized_files = {}\n    \n    # Regular expression to find the first text not enclosed in square brackets\n    pattern = re.compile(r'^([^\\[\\]]+)(?:\\[|$)')\n    \n    # Iterate over all files in the directory\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        \n        # Skip if it's not a file\n        if not os.path.isfile(file_path):\n            continue\n        \n        # Find the first text not enclosed in square brackets\n        match = pattern.match(filename)\n        if match:\n            subdir_name = match.group(1).strip()\n            if subdir_name:\n                subdir_path = os.path.join(directory, subdir_name)\n                \n                # Create the subdirectory if it doesn't exist\n                if not os.path.exists(subdir_path):\n                    os.makedirs(subdir_path)\n                \n                # Move the file to the subdirectory\n                new_file_path = os.path.join(subdir_path, filename)\n                shutil.move(file_path, new_file_path)\n                \n                # Update the organized_files dictionary\n                if subdir_name not in organized_files:\n                    organized_files[subdir_name] = []\n                organized_files[subdir_name].append(filename)\n    \n    return (directory, organized_files)"}
{"task_id": "BigCodeBench/324", "solution": "import subprocess\nimport time\nimport threading\ndef task_func(file_list):\n    exit_codes = [None] * len(file_list)\n    lock = threading.Lock()\n\n    def run_subprocess(file, index):\n        try:\n            result = subprocess.run(['python', file], capture_output=True, text=True, check=False)\n            with lock:\n                exit_codes[index] = result.returncode\n        except Exception as e:\n            print(f\"Error running {file}: {str(e)}\")\n            with lock:\n                exit_codes[index] = -1\n\n    threads = []\n    for i, file in enumerate(file_list):\n        thread = threading.Thread(target=run_subprocess, args=(file, i))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    return exit_codes"}
{"task_id": "BigCodeBench/326", "solution": "import subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n    # Ensure the directory path is valid\n    if not os.path.isdir(directory_path):\n        print(f\"Error: '{directory_path}' is not a valid directory.\")\n        return []\n\n    # Find all .bat files in the directory\n    bat_files = glob.glob(os.path.join(directory_path, '*.bat'))\n\n    results = []\n    for bat_file in bat_files:\n        file_name = os.path.basename(bat_file)\n        try:\n            # Run the .bat file and capture the exit code\n            result = subprocess.run([bat_file], capture_output=True, text=True, check=True)\n            exit_code = result.returncode\n        except subprocess.CalledProcessError as e:\n            # If the process exits with a non-zero status\n            exit_code = e.returncode\n        except Exception as e:\n            # If the file couldn't be executed for any other reason\n            print(f\"Error executing {file_name}: {str(e)}\")\n            exit_code = None\n\n        results.append((file_name, exit_code))\n\n    return results"}
{"task_id": "BigCodeBench/341", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, col):\n    # Validate input\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame.\")\n    if df.empty:\n        raise ValueError(\"The input df must not be empty.\")\n    if col not in df.columns:\n        raise ValueError(f\"The input df must contain the specified column '{col}'.\")\n\n    # Create figure with two subplots\n    fig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, figsize=(10, 10))\n\n    # Subplot 1: Histogram with KDE\n    if pd.api.types.is_numeric_dtype(df[col]):\n        sns.histplot(data=df, x=col, kde=True, ax=ax1)\n        ax1.set_title(f\"Histogram with KDE of '{col}'\")\n    else:\n        sns.histplot(data=df, x=col, ax=ax1)\n        ax1.set_title(f\"Histogram of '{col}'\")\n    \n    # Subplot 2: Box plot\n    sns.boxplot(data=df, x=col, ax=ax2)\n    ax2.set_title(f\"Box plot of '{col}'\")\n\n    # Adjust layout and return figure\n    plt.tight_layout()\n    return fig"}
{"task_id": "BigCodeBench/346", "solution": "import subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run a Python script as a process with predefined arguments.\n\n    Args:\n        script_path (str): Path to the Python script to be executed.\n        wait (bool): Whether to wait for the process to complete. Defaults to True.\n        *args: Variable length argument list for the script.\n\n    Returns:\n        int: The return code of the subprocess if 'wait' is True.\n        None: If 'wait' is False.\n\n    Raises:\n        ValueError: If the script does not exist.\n        subprocess.CalledProcessError: If the script raises an exception.\n    \"\"\"\n    if not os.path.isfile(script_path):\n        raise ValueError(f\"The script does not exist: {script_path}\")\n\n    cmd = [sys.executable, script_path] + list(args)\n\n    if wait:\n        try:\n            result = subprocess.run(cmd, check=True, capture_output=True, text=True)\n            return result.returncode\n        except subprocess.CalledProcessError as e:\n            print(f\"Error output: {e.stderr}\", file=sys.stderr)\n            raise\n    else:\n        subprocess.Popen(cmd)\n        return None"}
{"task_id": "BigCodeBench/360", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_location, sheet_name):\n    # Check if the file exists\n    if not os.path.exists(file_location):\n        raise FileNotFoundError(f\"The Excel file does not exist at the specified path: {file_location}\")\n    \n    # Load the Excel file\n    try:\n        df = pd.read_excel(file_location, sheet_name=sheet_name)\n    except ValueError:\n        raise ValueError(f\"The specified sheet '{sheet_name}' does not exist in the workbook.\")\n    \n    # Calculate mean and standard deviation for each column\n    means = df.mean()\n    stds = df.std()\n    \n    # Create a dictionary with mean and standard deviation of each column\n    stats = {\n        'mean': means.to_dict(),\n        'std': stds.to_dict()\n    }\n    \n    # Create the bar chart\n    fig, ax = plt.subplots(figsize=(12, 6))\n    \n    x = np.arange(len(df.columns))\n    width = 0.35\n    \n    ax.bar(x - width/2, means, width, label='Mean', yerr=stds, capsize=5)\n    ax.bar(x + width/2, stds, width, label='Standard Deviation')\n    \n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Values')\n    ax.set_title('Mean and Standard Deviation')\n    ax.set_xticks(x)\n    ax.set_xticklabels(df.columns, rotation=45, ha='right')\n    ax.legend()\n    \n    plt.tight_layout()\n    \n    return stats, fig"}
{"task_id": "BigCodeBench/367", "solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(activities):\n    # Check if all activities are datetime objects\n    if not all(isinstance(activity, datetime) for activity in activities):\n        raise TypeError(\"If the activities are not datetime objects.\")\n\n    # Count activities for each day of the week\n    day_counts = defaultdict(int)\n    for activity in activities:\n        day_of_week = activity.strftime('%A')\n        day_counts[day_of_week] += 1\n\n    # Define the order of days\n    days_order = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n\n    # Prepare data for plotting\n    x_labels = days_order\n    y_values = [day_counts[day] for day in days_order]\n\n    # Create the bar chart\n    fig, ax = plt.subplots()\n    ax.bar(x_labels, y_values)\n    ax.set_xlabel('Day of the Week')\n    ax.set_ylabel('Number of Activities')\n    ax.set_title('Weekly Activity')\n    plt.xticks(rotation=45, ha='right')\n\n    return ax"}
{"task_id": "BigCodeBench/368", "solution": "import os\nimport shutil\nimport random\ndef task_func(src_dir: str, dest_dir: str, seed: int = 100) -> str:\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Ensure the source directory exists\n    if not os.path.isdir(src_dir):\n        raise ValueError(f\"Source directory '{src_dir}' does not exist.\")\n    \n    # Create the destination directory if it doesn't exist\n    os.makedirs(dest_dir, exist_ok=True)\n    \n    # Get all files from the source directory\n    files = [f for f in os.listdir(src_dir) if os.path.isfile(os.path.join(src_dir, f))]\n    \n    # Check if there are any files to move\n    if not files:\n        raise ValueError(f\"No files found in the source directory '{src_dir}'.\")\n    \n    # Select a random file\n    file_to_move = random.choice(files)\n    \n    # Construct full paths\n    src_path = os.path.join(src_dir, file_to_move)\n    dest_path = os.path.join(dest_dir, file_to_move)\n    \n    # Move the file\n    shutil.move(src_path, dest_path)\n    \n    return file_to_move"}
{"task_id": "BigCodeBench/374", "solution": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n    # Ensure the directory path ends with a slash\n    directory_path = os.path.join(directory_path, '')\n    \n    # Counter for processed Excel files\n    processed_files = 0\n    \n    # Find all .xlsx files in the directory\n    xlsx_files = glob.glob(os.path.join(directory_path, '*.xlsx'))\n    \n    for file_path in xlsx_files:\n        workbook = load_workbook(filename=file_path)\n        modified = False\n        \n        for sheet in workbook.worksheets:\n            for row in sheet.iter_rows():\n                for cell in row:\n                    if isinstance(cell.value, str):\n                        new_value = re.sub(r'(?<!\\\\)\"', r'\\\\\"', cell.value)\n                        if new_value != cell.value:\n                            cell.value = new_value\n                            modified = True\n        \n        if modified:\n            workbook.save(file_path)\n            processed_files += 1\n    \n    return processed_files"}
{"task_id": "BigCodeBench/399", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n    # Input validation\n    if frequency < 0:\n        raise ValueError(\"Frequency must be non-negative.\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive.\")\n\n    # Generate time array\n    t = np.linspace(0, 2*np.pi, sample_size)\n\n    # Calculate sine and cosine waves\n    sine_wave = np.sin(frequency * t)\n    cosine_wave = np.cos(frequency * t)\n\n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(t, sine_wave, label='Sine Wave', color='blue')\n    ax.plot(t, cosine_wave, label='Cosine Wave', color='red', linestyle='--')\n\n    # Set labels and title\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.set_title(f'Sine and Cosine Waves (Frequency: {frequency} Hz)')\n\n    # Add legend and grid\n    ax.legend()\n    ax.grid(True, linestyle=':')\n\n    # Set y-axis limits to show full wave\n    ax.set_ylim(-1.1, 1.1)\n\n    # Adjust layout to prevent cutting off labels\n    plt.tight_layout()\n\n    return fig, ax"}
{"task_id": "BigCodeBench/401", "solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\ndef task_func(app_name):\n    # Create Flask application\n    app = Flask(app_name)\n\n    # Configure mail settings from environment variables with defaults\n    app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER', 'localhost')\n    app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', 25))\n    app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS', '').lower() in ('true', 'yes', '1', 'on')\n    app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')\n    app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')\n\n    # Initialize Flask-Mail\n    mail = Mail(app)\n\n    # Prepare mail configurations for output\n    mail_config = {\n        'MAIL_SERVER': app.config['MAIL_SERVER'],\n        'MAIL_PORT': app.config['MAIL_PORT'],\n        'MAIL_USE_TLS': app.config['MAIL_USE_TLS'],\n        'MAIL_USERNAME': app.config['MAIL_USERNAME'],\n        'MAIL_PASSWORD': app.config['MAIL_PASSWORD']\n    }\n\n    return (mail, mail_config)"}
{"task_id": "BigCodeBench/409", "solution": "import os\nimport pandas as pd\nimport numpy as np\ndef task_func(excel_file_path, file_name, column_name):\n    # Construct the full file path\n    full_path = os.path.join(excel_file_path, file_name)\n    \n    # Check if the file exists\n    if not os.path.exists(full_path):\n        raise FileNotFoundError(f\"The file '{file_name}' does not exist at the specified path: '{excel_file_path}'\")\n    \n    try:\n        # Read the Excel file\n        df = pd.read_excel(full_path)\n        \n        # Check if the specified column exists in the DataFrame\n        if column_name not in df.columns:\n            raise ValueError(f\"The column '{column_name}' does not exist in the Excel file.\")\n        \n        # Extract the data from the specified column\n        data = df[column_name]\n        \n        # Calculate the mean, median, and standard deviation\n        mean_value = np.mean(data)\n        median_value = np.median(data)\n        std_deviation = np.std(data)\n        \n        # Return the results in a dictionary\n        return {\n            'mean': mean_value,\n            'median': median_value,\n            'standard_deviation': std_deviation\n        }\n    \n    except pd.errors.EmptyDataError:\n        raise ValueError(\"The Excel file is empty.\")\n    except pd.errors.ParserError:\n        raise ValueError(\"Unable to parse the Excel file. Please ensure it's a valid Excel file.\")\n    except Exception as e:\n        raise Exception(f\"An unexpected error occurred: {str(e)}\")"}
{"task_id": "BigCodeBench/417", "solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\ndef task_func(X, Y, learning_rate=0.01, epochs=50):\n    # Split the data into training (75%) and test (25%) sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n\n    # Construct the Sequential model\n    model = Sequential([\n        Dense(1, input_dim=2, activation='sigmoid')\n    ])\n\n    # Compile the model\n    optimizer = SGD(learning_rate=learning_rate)\n    model.compile(loss='binary_crossentropy', optimizer=optimizer)\n\n    # Fit the model to the training data, evaluating on the test set\n    history = model.fit(X_train, Y_train, epochs=epochs, validation_data=(X_test, Y_test), verbose=0)\n\n    # Plot the model's training and validation loss\n    fig, ax = plt.subplots()\n    ax.plot(history.history['loss'], label='Train')\n    ax.plot(history.history['val_loss'], label='Test')\n    ax.set_title('Model loss')\n    ax.set_xlabel('Epoch')\n    ax.set_ylabel('Loss')\n    ax.legend()\n\n    # Return the trained model and the Axes object\n    return model, ax"}
{"task_id": "BigCodeBench/418", "solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n    # Split the data into training and test sets (70% training, 30% test)\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    # Create a Keras Sequential model with one hidden layer using sigmoid activation\n    model = keras.Sequential([\n        keras.layers.Dense(10, activation='sigmoid', input_shape=(X_train.shape[1],)),\n        keras.layers.Dense(1, activation='sigmoid')\n    ])\n\n    # Compile the model with binary cross-entropy loss and SGD optimizer\n    model.compile(optimizer=keras.optimizers.SGD(learning_rate=0.01),\n                  loss='binary_crossentropy',\n                  metrics=['accuracy'])\n\n    # Fit the model to the training data in non-verbose mode\n    model.fit(X_train, Y_train, epochs=100, batch_size=32, verbose=0)\n\n    # Predict probabilities for the test set\n    Y_pred = model.predict(X_test)\n\n    # Compute ROC curve and AUC\n    fpr, tpr, _ = roc_curve(Y_test, Y_pred)\n    roc_auc = auc(fpr, tpr)\n\n    # Plot the ROC curve\n    fig, ax = plt.subplots()\n    ax.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')\n    ax.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    ax.set_xlim([0.0, 1.0])\n    ax.set_ylim([0.0, 1.05])\n    ax.set_xlabel('False positive rate')\n    ax.set_ylabel('True positive rate')\n    ax.set_title('ROC curve')\n    ax.legend(loc=\"lower right\")\n\n    return model, ax"}
{"task_id": "BigCodeBench/424", "solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    # Check if the image file exists\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"The image file does not exist at the specified path: {image_path}\")\n    \n    # Check if n_clusters is a positive integer\n    if not isinstance(n_clusters, int) or n_clusters <= 0:\n        raise ValueError(\"n_clusters must be a positive integer\")\n    \n    # Read the image\n    original_image = cv2.imread(image_path)\n    if original_image is None:\n        raise FileNotFoundError(f\"Failed to read the image at the specified path: {image_path}\")\n    \n    # Convert image from BGR to RGB\n    original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)\n    \n    # If n_clusters is 1, return the original image for both\n    if n_clusters == 1:\n        return original_image, original_image.copy()\n    \n    # Reshape the image to a 2D array of pixels\n    pixel_values = original_image.reshape((-1, 3))\n    pixel_values = np.float32(pixel_values)\n    \n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed)\n    kmeans.fit(pixel_values)\n    \n    # Replace each pixel value with its corresponding cluster centroid\n    segmented_image = kmeans.cluster_centers_[kmeans.labels_]\n    segmented_image = segmented_image.reshape(original_image.shape)\n    segmented_image = np.uint8(segmented_image)\n    \n    # Save each region as a separate image\n    for i in range(n_clusters):\n        region = np.zeros_like(original_image)\n        mask = kmeans.labels_ == i\n        region[mask.reshape(original_image.shape[:2])] = segmented_image[mask.reshape(original_image.shape[:2])]\n        cv2.imwrite(f'region_{i}.png', cv2.cvtColor(region, cv2.COLOR_RGB2BGR))\n    \n    return original_image, segmented_image"}
{"task_id": "BigCodeBench/443", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    # Calculate the product of matrix P and 3D tensor T\n    result = np.tensordot(P, T, axes=([-1], [0]))\n    \n    # Flatten the result\n    flattened_result = result.reshape(-1, 1)\n    \n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    cluster_result = kmeans.fit_predict(flattened_result)\n    \n    # Visualize the clustering result\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(np.arange(len(flattened_result)), flattened_result, c=cluster_result, cmap='viridis')\n    ax.set_title('KMeans Clustering Visualization')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    \n    # Add a color bar\n    plt.colorbar(scatter, ax=ax, label='Cluster')\n    \n    return cluster_result, ax"}
{"task_id": "BigCodeBench/445", "solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\ndef task_func(points, seed=0):\n    # Input validation\n    if not isinstance(points, np.ndarray):\n        raise TypeError(\"Input 'points' must be a numpy array.\")\n    if points.ndim != 2 or points.shape[1] != 2:\n        raise ValueError(\"Input 'points' must be a 2D array with shape (n, 2).\")\n    if points.shape[0] < 3:\n        raise ValueError(\"At least 3 points are required to compute a Voronoi diagram.\")\n\n    # Set random seed for reproducibility\n    np.random.seed(seed)\n\n    # Apply jittering\n    jitter = np.random.normal(0, 1e-10, points.shape)\n    jittered_points = points + jitter\n\n    # Compute Voronoi diagram\n    vor = Voronoi(jittered_points)\n\n    # Create plot\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax, show_vertices=False, line_colors='blue', line_width=2, line_alpha=0.6, point_size=2)\n\n    # Plot original points\n    ax.plot(points[:, 0], points[:, 1], 'ro', markersize=5)\n\n    # Set plot limits\n    margin = 0.1\n    ax.set_xlim(points[:, 0].min() - margin, points[:, 0].max() + margin)\n    ax.set_ylim(points[:, 1].min() - margin, points[:, 1].max() + margin)\n\n    # Set labels and title\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.set_title('Voronoi Diagram')\n\n    return vor, ax"}
{"task_id": "BigCodeBench/454", "solution": "import os\nimport shutil\nimport glob\ndef task_func(src_dir, dest_dir, ext):\n    # Check if source and destination directories exist\n    if not os.path.isdir(src_dir):\n        raise FileNotFoundError(f\"Source directory '{src_dir}' does not exist\")\n    if not os.path.isdir(dest_dir):\n        raise FileNotFoundError(f\"Destination directory '{dest_dir}' does not exist\")\n\n    # Initialize a list to store the paths of successfully moved files\n    moved_files = []\n\n    # Use glob to find files with the specified extension in the source directory\n    for file_path in glob.glob(os.path.join(src_dir, f\"*{ext}\")):\n        file_name = os.path.basename(file_path)\n        dest_path = os.path.join(dest_dir, file_name)\n        \n        # Check if the file already exists in the destination directory\n        if not os.path.exists(dest_path):\n            # Move the file\n            shutil.move(file_path, dest_path)\n            # Append the moved file's path to the list\n            moved_files.append(dest_path)\n    \n    # Return the list of successfully moved files\n    return moved_files"}
{"task_id": "BigCodeBench/458", "solution": "import json\nimport re\nimport pandas as pd\ndef task_func(json_str):\n    # Check if the JSON string is empty or whitespace-only\n    if not json_str.strip():\n        return pd.DataFrame()\n\n    try:\n        # Load JSON string into a dictionary\n        data_dict = json.loads(json_str)\n    except json.JSONDecodeError:\n        # Return empty DataFrame if JSON is invalid\n        return pd.DataFrame()\n\n    def double_value(value):\n        if isinstance(value, (int, float)):\n            return value * 2\n        elif isinstance(value, str):\n            # Use regex to check if the string can be interpreted as a number\n            if re.match(r'^-?\\d+(\\.\\d+)?$', value):\n                return float(value) * 2\n        elif isinstance(value, list):\n            return [double_value(v) for v in value]\n        return value\n\n    # Normalize the dictionary by doubling numerical values\n    normalized_dict = {key: double_value(value) for key, value in data_dict.items()}\n\n    # Create a Pandas DataFrame from the normalized dictionary\n    df = pd.DataFrame([normalized_dict])\n\n    # Convert numerical columns to float\n    for col in df.columns:\n        if df[col].dtype == 'object':\n            try:\n                df[col] = df[col].astype(float)\n            except ValueError:\n                pass  # Keep as-is if conversion to float fails\n\n    return df"}
{"task_id": "BigCodeBench/461", "solution": "import subprocess\nimport psutil\nimport time\nimport os\ndef task_func(script_path: str, timeout=10) -> dict:\n    if not os.path.exists(script_path):\n        raise FileNotFoundError(f\"The script path {script_path} does not exist.\")\n\n    process = subprocess.Popen(['bash', script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    start_time = time.time()\n    \n    cpu_usage = 0.0\n    memory_usage = 0\n    \n    try:\n        while True:\n            if process.poll() is not None:\n                break\n            \n            if time.time() - start_time > timeout:\n                process.terminate()\n                process.wait()\n                raise TimeoutError(f\"Script execution exceeded the timeout of {timeout} seconds.\")\n            \n            try:\n                proc = psutil.Process(process.pid)\n                cpu_usage += proc.cpu_percent(interval=0.1)\n                memory_usage += proc.memory_info().rss - memory_usage\n            except (psutil.NoSuchProcess, psutil.ZombieProcess):\n                break\n            \n            time.sleep(0.1)\n    \n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n    finally:\n        if process.poll() is None:\n            process.terminate()\n            process.wait()\n\n    return {\n        'CPU Usage': cpu_usage,\n        'Memory Usage': memory_usage\n    }"}
{"task_id": "BigCodeBench/477", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    # Set random seed for reproducibility\n    np.random.seed(seed)\n    \n    # Generate categories\n    if N >= len(CATEGORIES):\n        # Ensure each category appears at least once\n        categories = CATEGORIES + list(np.random.choice(CATEGORIES, N - len(CATEGORIES)))\n        np.random.shuffle(categories)\n    else:\n        # Randomly sample categories without replacement\n        categories = np.random.choice(CATEGORIES, N, replace=False)\n    \n    # Generate random values for x and y\n    x = np.random.rand(N)\n    y = np.random.rand(N)\n    \n    # Create DataFrame\n    df = pd.DataFrame({\n        'x': x,\n        'y': y,\n        'category': categories\n    })\n    \n    # Create scatter plot\n    fig, ax = plt.subplots()\n    for category in CATEGORIES:\n        subset = df[df['category'] == category]\n        ax.scatter(subset['x'], subset['y'], label=category)\n    \n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.legend(title='Category')\n    ax.set_title('Scatter plot of x vs y, colored by category')\n    \n    plt.tight_layout()\n    \n    return df, ax"}
{"task_id": "BigCodeBench/486", "solution": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_time, end_time, step, trend, seed=42):\n    # Set random seed for reproducibility\n    np.random.seed(seed)\n    \n    # Generate date range\n    date_range = pd.date_range(start=datetime.fromtimestamp(start_time),\n                               end=datetime.fromtimestamp(end_time),\n                               freq=f'{step}S')\n    \n    # Generate random data from normal distribution\n    data = np.random.normal(size=len(date_range))\n    \n    # Add linear trend\n    data += np.arange(len(date_range)) * trend\n    \n    # Create DataFrame\n    df = pd.DataFrame({'Time': date_range, 'Value': data})\n    \n    # Create plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(df['Time'], df['Value'])\n    \n    # Set labels and title\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Value')\n    ax.set_title('Time Series with Linear Trend')\n    \n    # Rotate x-axis labels for better readability\n    plt.xticks(rotation=45)\n    \n    # Adjust layout to prevent clipping of labels\n    plt.tight_layout()\n    \n    return ax"}
{"task_id": "BigCodeBench/492", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nimport random\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    # Set random seed for reproducibility\n    random.seed(random_seed)\n\n    # Validate input\n    if not isinstance(epoch_milliseconds, int) or epoch_milliseconds < 0:\n        raise ValueError(\"epoch_milliseconds must be a non-negative integer\")\n\n    # Convert epoch milliseconds to datetime\n    start_date = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n    end_date = datetime.now()\n\n    # Generate date range\n    date_range = pd.date_range(start=start_date, end=end_date, freq='D')\n\n    # Generate sales data\n    data = []\n    for date in date_range:\n        for product in products:\n            sales = random.randint(10, 50)\n            data.append({\n                'Product': product,\n                'Date': date,\n                'Sales': sales\n            })\n\n    # Create DataFrame\n    df = pd.DataFrame(data)\n\n    return df"}
{"task_id": "BigCodeBench/501", "solution": "import xlwt\nimport os\nimport pandas as pd\nimport json\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    # Validate input type\n    if not isinstance(json_str, (str, bytes, bytearray)):\n        raise TypeError(\"json_str must be a string, bytes, or bytearray\")\n    \n    # Parse JSON\n    try:\n        data = json.loads(json_str)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string\")\n    \n    # Ensure data is a list (array)\n    if not isinstance(data, list):\n        raise ValueError(\"JSON root must be an array\")\n    \n    # Create DataFrame (handles empty arrays)\n    df = pd.DataFrame(data)\n    \n    # Ensure filename has .xlsx extension\n    if not filename.endswith('.xlsx'):\n        filename += '.xlsx'\n    \n    # Get absolute path\n    abs_path = os.path.abspath(filename)\n    \n    # Write to Excel file\n    try:\n        df.to_excel(abs_path, sheet_name=sheet_name, index=False, engine='openpyxl')\n    except Exception as e:\n        raise Exception(f\"Error writing to Excel file: {str(e)}\")\n    \n    return abs_path"}
{"task_id": "BigCodeBench/502", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(days_in_past=7, random_seed=0):\n    # Set random seed for reproducibility\n    random.seed(random_seed)\n    \n    # Define activities\n    activities = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n    \n    # Generate dates\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=days_in_past-1)\n    dates = [start_date + timedelta(days=i) for i in range(days_in_past)]\n    \n    # Generate data\n    data = []\n    for date in dates:\n        for activity in activities:\n            duration = random.randint(0, 120)\n            data.append({\n                'Date': date.strftime('%Y-%m-%d'),\n                'Activity': activity,\n                'Duration': duration\n            })\n    \n    # Create DataFrame\n    df = pd.DataFrame(data)\n    \n    # Create plot\n    plt.figure(figsize=(12, 6))\n    ax = sns.lineplot(data=df, x='Date', y='Duration', hue='Activity', marker='o')\n    \n    # Customize plot\n    plt.title('Daily Activity Durations')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    return ax, df"}
{"task_id": "BigCodeBench/503", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    # Set random seed for reproducibility\n    np.random.seed(random_seed)\n    \n    # Generate date range\n    end_date = datetime.now().date()\n    start_date = end_date - timedelta(days=days_in_past-1)\n    date_range = pd.date_range(start=start_date, end=end_date)\n    \n    # Generate random stock prices\n    prices = np.random.random((days_in_past, len(stock_names)))\n    \n    # Create DataFrame\n    df = pd.DataFrame(prices, columns=stock_names, index=date_range)\n    \n    return df"}
{"task_id": "BigCodeBench/509", "solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    try:\n        # Read the files\n        with open(file_path1, 'r', newline='') as file1, open(file_path2, 'r', newline='') as file2:\n            reader1 = csv.reader(file1, delimiter=delimiter, quotechar=quotechar)\n            reader2 = csv.reader(file2, delimiter=delimiter, quotechar=quotechar)\n            \n            lines1 = list(reader1)\n            lines2 = list(reader2)\n            \n            # Check if files are empty\n            if not lines1:\n                raise ValueError(f\"The file {file_path1} is empty.\")\n            if not lines2:\n                raise ValueError(f\"The file {file_path2} is empty.\")\n            \n            # Convert lines to strings for comparison\n            str_lines1 = [delimiter.join(line) for line in lines1]\n            str_lines2 = [delimiter.join(line) for line in lines2]\n            \n            # Generate diff\n            diff = list(ndiff(str_lines1, str_lines2))\n            \n            # Process diff output\n            diff_report = []\n            line_number = 1\n            for line in diff:\n                status = line[0]\n                content = line[2:]\n                if status != ' ':  # Only include lines with differences\n                    diff_report.append({\n                        'Line Number': line_number,\n                        'Status': status,\n                        'Content': content\n                    })\n                if status != '+':  # Don't increment line number for added lines in second file\n                    line_number += 1\n            \n            # Create DataFrame\n            diff_df = pd.DataFrame(diff_report)\n            \n            return diff_df\n        \n    except FileNotFoundError as e:\n        raise FileNotFoundError(f\"File not found: {e}\")\n    except ValueError as e:\n        raise ValueError(str(e))\n    except Exception as e:\n        raise Exception(f\"An error occurred while processing the files: {e}\")"}
{"task_id": "BigCodeBench/511", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    # Convert the list of dictionaries to a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Initialize the result dictionary with default values\n    result = {\n        'sum': 0,\n        'mean': np.nan,\n        'min': np.nan,\n        'max': np.nan\n    }\n    \n    if not df.empty and column in df.columns:\n        # Calculate statistics for the specified column\n        result['sum'] = df[column].sum()\n        result['mean'] = df[column].mean()\n        result['min'] = df[column].min()\n        result['max'] = df[column].max()\n    \n    # Create a pie chart\n    fig, ax = plt.subplots()\n    \n    if not df.empty and 'Age' in df.columns:\n        # Group by Age and sum the values of the specified column\n        age_groups = df.groupby('Age')[column].sum()\n        \n        # Create the pie chart\n        ax.pie(age_groups.values, labels=age_groups.index, autopct='%1.1f%%', startangle=90)\n        ax.set_title(f'Distribution of {column} by Age')\n        ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle\n    else:\n        ax.text(0.5, 0.5, 'No data available for visualization', \n                horizontalalignment='center', verticalalignment='center')\n        ax.axis('off')\n    \n    return result, ax"}
{"task_id": "BigCodeBench/513", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    # Check if data is empty\n    if not data:\n        raise ValueError(\"The data list is empty.\")\n\n    # Convert data to DataFrame\n    df = pd.DataFrame(data)\n\n    # Check if specified column exists\n    if column not in df.columns:\n        raise KeyError(f\"The specified column '{column}' is not valid.\")\n\n    # Validate non-negative values for steps, calories burned, and distance walked\n    for col in ['steps', 'calories burned', 'distance walked']:\n        if col in df.columns and (df[col] < 0).any():\n            raise ValueError(f\"Negative values found in '{col}' column.\")\n\n    # Calculate statistics\n    stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max()\n    }\n\n    # Create line chart\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(df['Date'], df[column], marker='o')\n    ax.set_xlabel('Date')\n    ax.set_ylabel(column)\n    ax.set_title(f'Line Chart of {column}')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    return stats, ax"}
{"task_id": "BigCodeBench/526", "solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file=\"data.json\"):\n    # Read the JSON file\n    with open(input_file, 'r') as file:\n        data = json.load(file)\n    \n    # Initialize a defaultdict to store numeric values for each key\n    values = defaultdict(list)\n    \n    # Collect numeric values for each key\n    for item in data:\n        for key, value in item.items():\n            if isinstance(value, (int, float)):\n                values[key].append(value)\n    \n    # Calculate mean and median for each key\n    results = []\n    for key, nums in values.items():\n        results.append({\n            'variable': key,\n            'mean': np.mean(nums),\n            'median': np.median(nums)\n        })\n    \n    # Create a DataFrame from the results\n    df = pd.DataFrame(results)\n    \n    # Set the index to 'variable' and sort\n    df.set_index('variable', inplace=True)\n    df.sort_index(inplace=True)\n    \n    return df"}
{"task_id": "BigCodeBench/528", "solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n    # Check if the file has a .csv extension\n    if not file_path.lower().endswith('.csv'):\n        raise ValueError(\"File must have a .csv extension\")\n\n    # Read CSV file and count duplicate rows\n    with open(file_path, 'r', newline='') as csvfile:\n        reader = csv.reader(csvfile)\n        row_counts = Counter(tuple(row) for row in reader)\n\n    # Filter out non-duplicates\n    duplicates = {row: count for row, count in row_counts.items() if count > 1}\n\n    # Convert duplicates to pandas DataFrame\n    df = pd.DataFrame(list(duplicates.keys()), columns=[f'Column_{i+1}' for i in range(len(next(iter(duplicates))))])\n    df['Count'] = duplicates.values()\n\n    # Create bar plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    df.plot(kind='bar', x='Column_1', y='Count', ax=ax)\n    ax.set_xlabel('Duplicate Rows')\n    ax.set_ylabel('Count')\n    ax.set_title('Duplicate Rows in CSV File')\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n\n    return duplicates, ax"}
{"task_id": "BigCodeBench/530", "solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    # Check if DataFrame is empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    # Check if 'name' and 'age' columns exist\n    if 'name' not in df.columns or 'age' not in df.columns:\n        raise ValueError(\"DataFrame must contain 'name' and 'age' columns\")\n\n    # Round down ages to nearest integer and check for negative values\n    df['age'] = np.floor(df['age']).astype(int)\n    if (df['age'] < 0).any():\n        raise ValueError(\"Age must not be negative\")\n\n    # Identify duplicate names\n    duplicate_names = df[df.duplicated(subset=['name'], keep=False)]\n\n    # If no duplicates, return empty Counter and None\n    if duplicate_names.empty:\n        return Counter(), None\n\n    # Record age distribution among duplicate names\n    age_distribution = Counter(duplicate_names['age'])\n\n    # Create histogram plot\n    min_age = duplicate_names['age'].min()\n    max_age = duplicate_names['age'].max()\n    bins = np.arange(min_age - 0.5, max_age + 1.5, 1)\n\n    fig, ax = plt.subplots(figsize=(10, 6))\n    sns.histplot(data=duplicate_names, x='age', bins=bins, discrete=True, ax=ax)\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Count')\n    ax.set_title('Age Distribution Among Duplicate Names')\n    ax.grid(axis='y')\n\n    return age_distribution, ax"}
{"task_id": "BigCodeBench/532", "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=4):\n    # Count duplicate values in the 'value' column\n    value_counts = Counter(df['value'])\n    \n    # Create the histogram\n    fig, ax = plt.subplots()\n    n, bins, patches = ax.hist(df['value'], bins=bins, density=True, alpha=0.6, color='green')\n    \n    # Fit a normal distribution to the data\n    mu, std = norm.fit(df['value'])\n    \n    # Generate points for the normal distribution curve\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mu, std)\n    \n    # Plot the normal distribution curve\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    # Set plot title and labels\n    ax.set_title(\"Distribution\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    \n    return value_counts, ax"}
{"task_id": "BigCodeBench/553", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(a, b):\n    # Determine the number of columns based on the length of b\n    num_columns = min(len(b), len(COLUMNS))\n    \n    # Generate random data\n    data = np.random.rand(len(a), num_columns)\n    \n    # Create DataFrame with specified row indices and columns\n    df = pd.DataFrame(data, index=a, columns=COLUMNS[:num_columns])\n    \n    # Plot the DataFrame as a bar chart\n    fig, ax = plt.subplots(figsize=(10, 6))\n    df.plot(kind='bar', ax=ax)\n    \n    # Customize the plot\n    ax.set_title('Random Data Bar Chart')\n    ax.set_xlabel('Indices')\n    ax.set_ylabel('Values')\n    ax.legend(title='Columns')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    # Show the plot\n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/560", "solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(data):\n    # Ensure 'month' is in datetime format\n    if data['month'].dtype == 'int64':\n        data['month'] = pd.to_datetime(data['month'], format='%m')\n    elif data['month'].dtype == 'object':\n        data['month'] = pd.to_datetime(data['month'], format='%B')\n    \n    # Sort the data by month\n    data = data.sort_values('month')\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(data['month'].dt.strftime('%B'), data['value'])\n    \n    # Set the title and labels\n    year = data['month'].dt.year.iloc[0]\n    ax.set_title(f'Monthly Data for {year}')\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n    \n    # Rotate x-axis labels for better readability\n    plt.xticks(rotation=45, ha='right')\n    \n    # Adjust layout to prevent clipping of labels\n    plt.tight_layout()\n    \n    return ax"}
{"task_id": "BigCodeBench/567", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Convert the string data to a numeric pandas Series\n    numeric_data = pd.to_numeric(pd.Series(data.split(',')))\n    \n    # Calculate the bins for the histogram\n    bins = np.arange(numeric_data.min(), numeric_data.max() + 2) - 0.5\n    \n    # Create the histogram\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.hist(numeric_data, bins=bins, edgecolor='black')\n    \n    # Set the labels and title\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Values')\n    \n    # Show the plot\n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/574", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n    # Generate x values\n    x = np.linspace(0, 2 * np.pi, array_length)\n    \n    # Generate a sine wave\n    y_true = np.sin(x)\n    \n    # Add noise to the sine wave\n    np.random.seed(42)  # For reproducibility\n    y_noisy = y_true + noise_level * np.random.randn(array_length)\n    \n    # Define the model function for curve fitting\n    def sine_model(x, amplitude, frequency, phase, offset):\n        return amplitude * np.sin(frequency * x + phase) + offset\n    \n    # Perform curve fitting\n    initial_guess = [1, 1, 0, 0]\n    popt, _ = curve_fit(sine_model, x, y_noisy, p0=initial_guess)\n    \n    # Generate the fitted curve\n    y_fit = sine_model(x, *popt)\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(x, y_noisy, color='blue', alpha=0.5, label='Noisy data')\n    ax.plot(x, y_fit, color='red', label='Fitted curve')\n    \n    # Customize the plot\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Noisy Sine Wave and Fitted Curve')\n    ax.legend()\n    ax.grid(True, linestyle='--', alpha=0.7)\n    \n    return ax"}
{"task_id": "BigCodeBench/579", "solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(csv_file):\n    \"\"\"\n    Reads a CSV file, normalizes the text to ASCII, counts the words,\n    and returns the 10 most common words with their frequencies as a\n    matplotlib bar plot and a list of tuples.\n\n    Args:\n        csv_file (str): Path to the CSV file.\n\n    Returns:\n        tuple: (matplotlib.axes.Axes, list) containing the bar plot and\n               the 10 most common words with their frequencies.\n\n    Raises:\n        FileNotFoundError: If the CSV file cannot be found.\n        IOError: If there is an error reading the file.\n    \"\"\"\n    try:\n        word_counter = Counter()\n\n        # Read CSV file and normalize text\n        with open(csv_file, 'r', encoding='utf-8') as file:\n            reader = csv.reader(file)\n            for row in reader:\n                for cell in row:\n                    normalized_text = unicodedata.normalize('NFKD', cell).encode('ascii', 'ignore').decode('ascii')\n                    words = normalized_text.lower().split()\n                    word_counter.update(words)\n\n        # Get 10 most common words\n        most_common = word_counter.most_common(10)\n        words, frequencies = zip(*most_common)\n\n        # Create bar plot\n        fig, ax = plt.subplots(figsize=(10, 6))\n        ax.bar(words, frequencies)\n        ax.set_xlabel('Words')\n        ax.set_ylabel('Frequency')\n        ax.set_title('10 Most Common Words')\n        plt.xticks(rotation=45, ha='right')\n        plt.tight_layout()\n\n        return ax, most_common\n\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The CSV file '{csv_file}' could not be found.\")\n    except IOError:\n        raise IOError(f\"An error occurred while reading the file '{csv_file}'.\")"}
{"task_id": "BigCodeBench/582", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n    # Generate normally distributed random numbers\n    data = np.random.normal(loc=0, scale=1, size=size)\n    \n    # Create a figure and axis\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Plot histogram\n    n, bins, _ = ax.hist(data, bins=30, density=True, alpha=0.7, color='skyblue', edgecolor='black', label='Histogram')\n    \n    # Calculate PDF\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    pdf = stats.norm.pdf(x, loc=np.mean(data), scale=np.std(data))\n    \n    # Plot PDF\n    ax.plot(x, pdf, 'r-', lw=2, label='PDF')\n    \n    # Set labels and title\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Density')\n    ax.set_title('Histogram and PDF of Normally Distributed Random Numbers')\n    \n    # Add legend\n    ax.legend()\n    \n    # Adjust layout\n    plt.tight_layout()\n    \n    return fig"}
{"task_id": "BigCodeBench/583", "solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n    # Generate RSA key pair\n    (public_key, private_key) = rsa.newkeys(2048)\n\n    # Convert private key to PEM format\n    private_key_pem = private_key.save_pkcs1()\n\n    # Generate random encryption password and nonce\n    password = get_random_bytes(32)  # 256-bit key for AES\n    nonce = get_random_bytes(16)\n\n    # Encrypt the private key using AES in GCM mode\n    cipher = AES.new(password, AES.MODE_GCM, nonce=nonce)\n    encrypted_private_key, tag = cipher.encrypt_and_digest(private_key_pem)\n\n    # Generate random filename\n    random_bytes = os.urandom(8)\n    filename = f\"private_key_{random_bytes.hex()}.txt\"\n\n    # Write encrypted private key to file\n    with open(filename, 'wb') as f:\n        f.write(nonce + tag + encrypted_private_key)\n\n    return public_key, filename, password, nonce"}
{"task_id": "BigCodeBench/587", "solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\ndef task_func(file_path):\n    # Generate RSA keys\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    \n    # Read the file to be encrypted\n    with open(file_path, 'rb') as f:\n        file_data = f.read()\n    \n    # Generate a random AES key\n    aes_key = os.urandom(32)  # 256-bit key\n    \n    # Pad the data\n    padder = padding.PKCS7(algorithms.AES.block_size).padder()\n    padded_data = padder.update(file_data) + padder.finalize()\n    \n    # Encrypt the data with AES\n    iv = os.urandom(16)\n    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n    \n    # Encrypt the AES key with RSA public key\n    encrypted_aes_key = rsa.encrypt(aes_key, pub_key)\n    \n    # Save the encrypted file\n    encrypted_file_path = file_path + '.enc'\n    with open(encrypted_file_path, 'wb') as f:\n        f.write(iv + encrypted_data)\n    \n    # Save the encrypted AES key\n    encrypted_aes_key_path = file_path + '.key.enc'\n    with open(encrypted_aes_key_path, 'wb') as f:\n        f.write(encrypted_aes_key)\n    \n    return pub_key, encrypted_file_path, encrypted_aes_key_path"}
{"task_id": "BigCodeBench/590", "solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n    # Validate the URL\n    if not url or not isinstance(url, str):\n        raise ValueError(\"The provided URL is invalid or empty.\")\n\n    try:\n        # Fetch the HTML content from the URL\n        with urllib.request.urlopen(url) as response:\n            html_content = response.read()\n    except urllib.error.URLError as e:\n        raise urllib.error.URLError(\"There is an issue with network connectivity or the server.\") from e\n\n    # Parse the HTML content\n    doc = pq(html_content)\n\n    # Extract anchor tags\n    anchors = doc('a')\n\n    # Prepare data for DataFrame\n    data = []\n    fetch_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n    for anchor in anchors.items():\n        text = anchor.text()\n        href = anchor.attr('href')\n        data.append({\n            'text': text,\n            'href': href,\n            'fetch_time': fetch_time\n        })\n\n    # Create and return DataFrame\n    return pd.DataFrame(data)"}
{"task_id": "BigCodeBench/592", "solution": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint, uniform\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Ensure the output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Generate a unique filename with timestamp\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    filename = f\"sensor_data_{timestamp}.csv\"\n    filepath = os.path.join(output_dir, filename)\n\n    # Generate sensor data\n    start_time = datetime.now()\n    data = []\n    for hour in range(hours):\n        current_time = start_time + timedelta(hours=hour)\n        temperature = round(uniform(20.0, 30.0), 1)  # Temperature between 20.0 and 30.0 \u00b0C\n        humidity = round(uniform(30.0, 70.0), 1)     # Humidity between 30.0% and 70.0%\n        pressure = round(uniform(980.0, 1030.0), 1)  # Pressure between 980.0 and 1030.0 hPa\n        data.append([current_time.strftime('%Y-%m-%d %H:%M:%S'), temperature, humidity, pressure])\n\n    # Write data to CSV file\n    with open(filepath, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time'] + SENSORS)\n        writer.writerows(data)\n\n    print(f\"Sensor data for {hours} hours has been saved to {filepath}\")"}
{"task_id": "BigCodeBench/593", "solution": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Ensure output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n    \n    # Generate data\n    start_time = datetime.now()\n    data = []\n    for i in range(hours):\n        current_time = start_time + timedelta(hours=i)\n        row = [current_time.strftime('%Y-%m-%d %H:%M:%S')]\n        row.extend([randint(0, 100) for _ in VEHICLE_TYPES])\n        data.append(row)\n    \n    # Create DataFrame\n    df = pd.DataFrame(data, columns=['Time'] + VEHICLE_TYPES)\n    \n    # Save to CSV\n    csv_path = os.path.join(output_dir, 'traffic_data.csv')\n    df.to_csv(csv_path, index=False)\n    \n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    for vehicle_type in VEHICLE_TYPES:\n        ax.plot(df['Time'], df[vehicle_type], label=vehicle_type)\n    \n    ax.set_xlabel('Time')\n    ax.set_ylabel('Vehicle Count')\n    ax.set_title('Traffic Data Over Time')\n    ax.legend()\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    # Save plot\n    plot_path = os.path.join(output_dir, 'traffic_plot.png')\n    plt.savefig(plot_path)\n    \n    return csv_path, ax"}
{"task_id": "BigCodeBench/594", "solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime, timedelta\nfrom random import randint\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Ensure output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n    \n    # Create backup directory\n    backup_dir = os.path.join(output_dir, 'backup')\n    os.makedirs(backup_dir, exist_ok=True)\n    \n    # Generate filename with timestamp\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    filename = f'weather_data_{timestamp}.csv'\n    filepath = os.path.join(output_dir, filename)\n    \n    # Generate weather data\n    data = []\n    current_time = datetime.now()\n    for _ in range(hours):\n        condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS) - 1)]\n        data.append([current_time.strftime('%Y-%m-%d %H:%M:%S'), condition])\n        current_time += timedelta(hours=1)\n    \n    # Write data to CSV file\n    with open(filepath, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time', 'Condition'])\n        writer.writerows(data)\n    \n    # Backup the file\n    backup_filepath = os.path.join(backup_dir, filename)\n    shutil.copy2(filepath, backup_filepath)\n    \n    return filepath"}
{"task_id": "BigCodeBench/618", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000\ndef task_func(goals, penalties):\n    # Generate random data\n    data = {\n        'Team': [TEAMS[randint(0, len(TEAMS) - 1)] for _ in range(goals + penalties)],\n        'Goals': [randint(0, 5) for _ in range(goals)],\n        'Penalty Cost': [PENALTY_COST * randint(1, 5) for _ in range(penalties)]\n    }\n    \n    # Create DataFrame\n    df = pd.DataFrame(data)\n    \n    # Ensure all teams are represented\n    for team in TEAMS:\n        if team not in df['Team'].values:\n            df = df.append({'Team': team, 'Goals': 0, 'Penalty Cost': 0}, ignore_index=True)\n    \n    # Plotting\n    fig, axes = plt.subplots(2, 1, figsize=(12, 10))\n    \n    # Goals plot\n    sns.barplot(x='Team', y='Goals', data=df, ax=axes[0], estimator=sum, ci=None)\n    axes[0].set_title('Total Goals by Team')\n    axes[0].set_ylabel('Goals')\n    \n    # Penalty Cost plot\n    sns.barplot(x='Team', y='Penalty Cost', data=df, ax=axes[1], estimator=sum, ci=None)\n    axes[1].set_title('Total Penalty Costs by Team')\n    axes[1].set_ylabel('Penalty Cost ($)')\n    \n    plt.tight_layout()\n    \n    return df, [axes[0], axes[1]]"}
{"task_id": "BigCodeBench/636", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(rows):\n    # Generate DataFrame with random integer values between 0 and 9\n    df = pd.DataFrame(np.random.randint(0, 10, size=(rows, len(COLUMNS))), columns=COLUMNS)\n    \n    # Count non-zero values in each column\n    non_zero_counts = (df != 0).sum()\n    \n    # Create bar plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    non_zero_counts.plot(kind='bar', ax=ax)\n    \n    # Customize the plot\n    ax.set_title('Count of Non-Zero Values in Each Column')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Number of Non-Zero Values')\n    ax.set_ylim(0, rows)  # Set y-axis limit to max possible count\n    \n    # Add value labels on top of each bar\n    for i, v in enumerate(non_zero_counts):\n        ax.text(i, v, str(v), ha='center', va='bottom')\n    \n    plt.tight_layout()\n    \n    return df, ax"}
{"task_id": "BigCodeBench/637", "solution": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\ndef task_func(num_students: int) -> Tuple[pd.DataFrame, plt.Axes]:\n    # Define courses\n    courses = ['Math', 'Science', 'History', 'English']\n    \n    # Generate random student IDs\n    student_ids = [f'Student_{i}' for i in range(1, num_students + 1)]\n    \n    # Create DataFrame with random grades\n    data = {course: np.random.randint(0, 101, size=num_students) for course in courses}\n    df = pd.DataFrame(data, index=student_ids)\n    \n    # Calculate average grade in each course\n    average_grades = df.mean()\n    \n    # Calculate number of students with passing grade (>= 60)\n    passing_counts = (df >= 60).sum()\n    \n    # Create bar plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    x = np.arange(len(courses))\n    width = 0.35\n    \n    ax.bar(x - width/2, average_grades, width, label='Average Grade', color='skyblue')\n    ax.bar(x + width/2, passing_counts, width, label='Passing Count', color='lightgreen')\n    \n    ax.set_title('Course-wise Average and Passing Grade Counts')\n    ax.set_xlabel('Courses')\n    ax.set_ylabel('Counts / Grades')\n    ax.set_xticks(x)\n    ax.set_xticklabels(courses)\n    ax.legend()\n    \n    plt.tight_layout()\n    \n    return df, ax"}
{"task_id": "BigCodeBench/654", "solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n    # Filter the array to get rows where the first column matches the target value\n    mask = array[:, 0] == target_value\n    filtered_indices = np.where(mask)[0]\n    \n    if len(filtered_indices) == 0:\n        raise ValueError(f\"No matching values found for target_value: {target_value}\")\n    \n    y_data = array[mask, 1]  # Values from the second column of matching rows\n    \n    # Define the exponential decay function\n    def exp_decay(x, a, b, c):\n        return a * np.exp(-b * x) + c\n    \n    # Fit the exponential decay function to the data\n    popt, _ = optimize.curve_fit(exp_decay, filtered_indices, y_data, p0=[1, 0.1, 0])\n    \n    # Create the plot\n    fig, ax = plt.subplots()\n    ax.scatter(filtered_indices, y_data, color='blue', label='Data')\n    \n    # Generate smooth curve for plotting\n    x_smooth = np.linspace(filtered_indices.min(), filtered_indices.max(), 100)\n    y_smooth = exp_decay(x_smooth, *popt)\n    ax.plot(x_smooth, y_smooth, 'r-', label='Fitted Curve')\n    \n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.set_title(f'Exponential Decay Fit (Target Value: {target_value})')\n    ax.legend()\n    \n    return popt, ax"}
{"task_id": "BigCodeBench/655", "solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = set(nltk.corpus.stopwords.words('english'))\ndef task_func(texts, num_topics):\n    def preprocess(text):\n        \"\"\"Preprocess the input text.\"\"\"\n        text = ALPHANUMERIC.sub(' ', text)\n        text = text.lower()\n        words = text.split()\n        return ' '.join(word for word in words if word not in STOPWORDS)\n\n    # Preprocess the texts\n    processed_texts = [preprocess(text) for text in texts]\n\n    # Vectorize the processed texts using TF-IDF\n    vectorizer = TfidfVectorizer()\n    tfidf_matrix = vectorizer.fit_transform(processed_texts)\n\n    # Apply NMF to extract topics\n    nmf_model = NMF(n_components=num_topics, random_state=42)\n    nmf_model.fit(tfidf_matrix)\n\n    # Get the feature names (words)\n    feature_names = vectorizer.get_feature_names_out()\n\n    # Extract the top words for each topic\n    topics = []\n    for topic in nmf_model.components_:\n        top_word_indices = topic.argsort()[:-11:-1]  # Get indices of top 10 words\n        top_words = [feature_names[i] for i in top_word_indices]\n        topics.append(top_words)\n\n    return topics"}
{"task_id": "BigCodeBench/657", "solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(texts, stopwords=None):\n    # Download stopwords if not provided\n    if stopwords is None:\n        nltk.download('stopwords', quiet=True)\n        stopwords = set(nltk.corpus.stopwords.words('english'))\n    \n    # Function to clean and tokenize text\n    def clean_and_tokenize(text):\n        # Remove non-alphanumeric characters except space and lowercase\n        text = ALPHANUMERIC.sub(' ', text).lower()\n        # Tokenize and remove stopwords\n        tokens = nltk.word_tokenize(text)\n        tokens = [word for word in tokens if word not in stopwords]\n        return tokens\n    \n    # Clean and tokenize all texts\n    processed_texts = [clean_and_tokenize(text) for text in texts]\n    \n    # Train Word2Vec model\n    word2vec_model = Word2Vec(sentences=processed_texts, vector_size=100, window=5, min_count=1, workers=4)\n    \n    return word2vec_model"}
{"task_id": "BigCodeBench/678", "solution": "import pandas as pd\nimport json\nimport os\nimport shutil\ndef task_func(path):\n    # Create the directory if it doesn't exist\n    os.makedirs(path, exist_ok=True)\n    \n    # Create the processed subdirectory\n    processed_path = os.path.join(path, 'processed')\n    os.makedirs(processed_path, exist_ok=True)\n    \n    # Initialize an empty DataFrame to store all data\n    df = pd.DataFrame()\n    \n    # Get all JSON files in the directory and sort them alphabetically\n    json_files = sorted([f for f in os.listdir(path) if f.endswith('.json')])\n    \n    for file_name in json_files:\n        file_path = os.path.join(path, file_name)\n        \n        try:\n            # Read the JSON file\n            with open(file_path, 'r') as file:\n                data = json.load(file)\n            \n            # Convert JSON to DataFrame\n            temp_df = pd.DataFrame(data)\n            \n            # Add the \"Source\" column with the filename\n            temp_df['Source'] = file_name\n            \n            # Append to the main DataFrame\n            df = pd.concat([df, temp_df], ignore_index=True)\n            \n            # Move the processed file to the processed subdirectory\n            shutil.move(file_path, os.path.join(processed_path, file_name))\n            \n        except Exception as e:\n            print(f\"Error processing {file_name}: {str(e)}\")\n    \n    return df"}
{"task_id": "BigCodeBench/720", "solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\ndef task_func():\n    # Define the directory and file path\n    dir_path = \"task_func_data\"\n    file_path = os.path.join(dir_path, \"Output.txt\")\n    \n    # Create the directory if it doesn't exist\n    os.makedirs(dir_path, exist_ok=True)\n    \n    # Generate random sensor data\n    temperature = round(random.uniform(20.0, 30.0), 2)\n    humidity = round(random.uniform(40.0, 60.0), 2)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    \n    # Write data to CSV file in append mode\n    with open(file_path, mode='a', newline='') as file:\n        writer = csv.writer(file)\n        # Write header if the file is empty\n        if os.stat(file_path).st_size == 0:\n            writer.writerow([\"Timestamp\", \"Temperature\", \"Humidity\"])\n        writer.writerow([timestamp, temperature, humidity])\n    \n    # Store the file path before deletion\n    return_path = file_path\n    \n    # Delete the file after use\n    os.remove(file_path)\n    \n    return return_path"}
{"task_id": "BigCodeBench/723", "solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\nCSV_FILE_PATH = 'scraped_data.csv'\ndef task_func(url):\n    # Fetch the webpage content\n    try:\n        with urllib.request.urlopen(url) as response:\n            html_content = response.read()\n    except urllib.error.URLError as e:\n        print(f\"Error fetching URL: {e}\")\n        return None\n\n    # Parse the HTML content\n    soup = BeautifulSoup(html_content, 'html.parser')\n\n    # Find all tables in the HTML\n    tables = soup.find_all('table')\n\n    if not tables:\n        print(\"No tables found on the webpage.\")\n        return None\n\n    # We'll use the first table found\n    table = tables[0]\n\n    # Extract headers\n    headers = [header.text.strip() for header in table.find_all('th')]\n    if not headers:\n        # If no <th> elements, use first row as headers\n        headers = [cell.text.strip() for cell in table.find('tr').find_all(['th', 'td'])]\n\n    # Extract rows\n    rows = []\n    for row in table.find_all('tr')[1:]:  # Skip the header row\n        cells = row.find_all(['td', 'th'])\n        if cells:\n            row_data = [cell.text.strip() for cell in cells]\n            rows.append(row_data)\n\n    # Write data to CSV file\n    try:\n        with open(CSV_FILE_PATH, 'w', newline='', encoding='utf-8') as csvfile:\n            writer = csv.writer(csvfile)\n            writer.writerow(headers)\n            writer.writerows(rows)\n        print(f\"Data successfully saved to {CSV_FILE_PATH}\")\n    except IOError as e:\n        print(f\"Error writing to CSV file: {e}\")\n        return None\n\n    return CSV_FILE_PATH"}
{"task_id": "BigCodeBench/752", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data, target_column, test_size=0.2, random_state=0) -> float:\n    # Input validation\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data is not a DataFrame\")\n    \n    if data.empty:\n        raise ValueError(\"data is empty\")\n    \n    if target_column not in data.columns:\n        raise ValueError(\"target_column is not a column of data\")\n    \n    if not data.select_dtypes(include=[np.number]).columns.tolist() == data.columns.tolist():\n        raise ValueError(\"data contains values that are not numeric\")\n    \n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer\")\n    \n    if not 0 < test_size < 1:\n        raise ValueError(\"test_size is not between 0 and 1\")\n\n    # Prepare the data\n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n\n    # Split the data into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n\n    # Train the linear regression model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    # Calculate and return the model's score on the test set\n    return model.score(X_test, y_test)"}
{"task_id": "BigCodeBench/760", "solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    \n    # Set random seed for reproducibility\n    np.random.seed(rng_seed)\n\n    # Generate 100 random IDs\n    ids = np.arange(1, 101)\n\n    # Combine and select random names\n    all_names = latin_names + other_names\n    names = np.random.choice(all_names, size=100)\n\n    # Generate random dates of birth\n    start_date = datetime.date(start_year, 1, 1)\n    end_date = datetime.date(end_year, 12, 31)\n    days_between_dates = (end_date - start_date).days\n    random_days = np.random.randint(0, days_between_dates + 1, size=100)\n    dates_of_birth = [start_date + datetime.timedelta(days=day) for day in random_days]\n\n    # Correct encoding and generate emails\n    def correct_name(name):\n        return codecs.decode(codecs.encode(name, 'latin-1'), 'utf-8')\n\n    def generate_email(name, year):\n        email_name = re.sub(r'[\u00e1\u00e9\u00ed\u00f3\u00fa\u00f1]', lambda m: {'\u00e1':'a','\u00e9':'e','\u00ed':'i','\u00f3':'o','\u00fa':'u','\u00f1':'n'}[m.group()], name.lower())\n        return f\"{email_name}{year}@{email_domain}\"\n\n    corrected_names = [correct_name(name) for name in names]\n    emails = [generate_email(name, dob.year) for name, dob in zip(corrected_names, dates_of_birth)]\n\n    # Create DataFrame\n    df = pd.DataFrame({\n        'ID': ids,\n        'Name': corrected_names,\n        'Date of Birth': dates_of_birth,\n        'Email': emails\n    })\n\n    return df"}
{"task_id": "BigCodeBench/763", "solution": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\ndef task_func(input_file, output_file):\n    # Read JSON file\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    \n    # Initialize defaultdict to store values for each key\n    values_dict = defaultdict(list)\n    \n    # Collect values for each key\n    for item in data:\n        for key, value in item.items():\n            if isinstance(value, (int, float)):\n                values_dict[key].append(value)\n    \n    # Calculate mean and median for each key\n    results = {}\n    for key, values in values_dict.items():\n        results[key] = {\n            \"mean\": np.mean(values),\n            \"median\": np.median(values)\n        }\n    \n    # Write results to CSV file\n    with open(output_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow([\"Field\", \"Mean\", \"Median\"])\n        for key, stats in results.items():\n            writer.writerow([key, stats[\"mean\"], stats[\"median\"]])\n    \n    return results"}
{"task_id": "BigCodeBench/765", "solution": "import os\nfrom pathlib import Path\nimport shutil\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    copied_files = []\n    target_path = Path(target_dir)\n    \n    # Ensure the target directory exists\n    target_path.mkdir(parents=True, exist_ok=True)\n    \n    for file_path in kwargs.values():\n        file_path = Path(file_path)\n        \n        # Check if the file exists and is not empty\n        if file_path.exists() and file_path.stat().st_size > 0:\n            # Copy the file to the target directory\n            dest_path = target_path / file_path.name\n            shutil.copy2(file_path, dest_path)\n            copied_files.append(str(dest_path))\n    \n    return {\"copied_files\": copied_files}"}
{"task_id": "BigCodeBench/771", "solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n    new_files = []\n    directory_path = Path(directory)\n    \n    if not directory_path.is_dir():\n        raise ValueError(f\"The directory {directory} does not exist.\")\n    \n    regex = re.compile(pattern)\n    \n    for file_path in directory_path.glob('*.csv'):\n        match = regex.match(file_path.name)\n        if match:\n            base_name = match.group(1)\n            new_file_name = f\"{base_name}.csv\"\n            new_file_path = directory_path / new_file_name\n            \n            with file_path.open('r', newline='') as source, new_file_path.open('w', newline='') as target:\n                reader = csv.reader(source)\n                writer = csv.writer(target)\n                for row in reader:\n                    writer.writerow(row)\n            \n            new_files.append(new_file_name)\n    \n    return new_files"}
{"task_id": "BigCodeBench/777", "solution": "import re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    extracted_dirs = []\n    \n    for filename in os.listdir(directory):\n        match = re.match(pattern, filename)\n        if match:\n            # Split the filename at the last occurrence of \"-\"\n            prefix = filename.rsplit('-', 1)[0]\n            \n            zip_path = os.path.join(directory, filename)\n            extract_dir = os.path.join(directory, prefix)\n            \n            # Create the extraction directory if it doesn't exist\n            os.makedirs(extract_dir, exist_ok=True)\n            \n            # Extract the zip file\n            with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                zip_ref.extractall(extract_dir)\n            \n            # Add the extraction directory to the list if not already present\n            if extract_dir not in extracted_dirs:\n                extracted_dirs.append(extract_dir)\n    \n    return extracted_dirs"}
{"task_id": "BigCodeBench/785", "solution": "import subprocess\nimport os\nimport glob\nimport zipfile\nfrom datetime import datetime\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    \"\"\"\n    Archive all files matching the given pattern and delete the originals.\n\n    Args:\n        pattern (str): The file pattern to match (e.g., '*.txt').\n\n    Returns:\n        str: The archive file path.\n\n    Raises:\n        FileNotFoundError: If no files match the given pattern.\n    \"\"\"\n    # Ensure the archive directory exists\n    os.makedirs(ARCHIVE_DIR, exist_ok=True)\n\n    # Find all files matching the pattern\n    files_to_archive = glob.glob(pattern)\n\n    if not files_to_archive:\n        raise FileNotFoundError(f\"No files found matching the pattern: {pattern}\")\n\n    # Generate a unique archive filename\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    archive_filename = f\"archive_{timestamp}.zip\"\n    archive_path = os.path.join(ARCHIVE_DIR, archive_filename)\n\n    # Create the ZIP archive\n    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for file in files_to_archive:\n            zip_file.write(file, os.path.basename(file))\n            os.remove(file)  # Delete the original file after archiving\n\n    return archive_path"}
{"task_id": "BigCodeBench/800", "solution": "import csv\nimport os\nfrom collections import Counter\nCSV_FILE_PATH = 'match_data.csv'\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    count = Counter()\n\n    # Check if the file exists\n    if not os.path.exists(csv_file_path):\n        print(f\"Error: File '{csv_file_path}' not found.\")\n        return count\n\n    # Read the CSV file and count goals and penalties\n    try:\n        with open(csv_file_path, 'r', newline='') as file:\n            reader = csv.DictReader(file)\n            for row in reader:\n                count['goals'] += int(row['goals'])\n                count['penalties'] += int(row['penalties'])\n    except csv.Error as e:\n        print(f\"Error reading CSV file: {e}\")\n        return count\n    except ValueError as e:\n        print(f\"Error converting data to integer: {e}\")\n        return count\n\n    # Update the counts with the given goals and penalties\n    count['goals'] += goals\n    count['penalties'] += penalties\n\n    return count"}
{"task_id": "BigCodeBench/826", "solution": "import re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    moved_files_count = 0\n    pattern = re.compile(file_pattern)\n\n    # Ensure the target directory exists\n    os.makedirs(target_dir, exist_ok=True)\n\n    # Iterate through all files in the source directory\n    for filename in os.listdir(source_dir):\n        if pattern.match(filename):\n            source_path = os.path.join(source_dir, filename)\n            target_path = os.path.join(target_dir, filename)\n            \n            try:\n                shutil.move(source_path, target_path)\n                moved_files_count += 1\n            except (shutil.Error, OSError) as e:\n                print(f\"Error moving {filename}: {str(e)}\")\n\n    return moved_files_count"}
{"task_id": "BigCodeBench/845", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(text1, text2):\n    def clean_text(text):\n        return ALPHANUMERIC.sub(' ', text).lower().strip()\n    \n    def cosine_similarity(vec1, vec2):\n        dot_product = np.dot(vec1, vec2)\n        norm1 = np.linalg.norm(vec1)\n        norm2 = np.linalg.norm(vec2)\n        return dot_product / (norm1 * norm2) if norm1 and norm2 else 0.0\n\n    # Clean texts\n    text1_clean = clean_text(text1)\n    text2_clean = clean_text(text2)\n    \n    # Compute term frequencies\n    tf1 = Counter(text1_clean.split())\n    tf2 = Counter(text2_clean.split())\n    \n    # Get all unique terms\n    all_terms = set(tf1.keys()) | set(tf2.keys())\n    \n    # Create term frequency vectors\n    vec1 = np.array([tf1.get(term, 0) for term in all_terms])\n    vec2 = np.array([tf2.get(term, 0) for term in all_terms])\n    \n    # Compute cosine similarity\n    cos_sim = cosine_similarity(vec1, vec2)\n    \n    # Compute Levenshtein ratio\n    lev_ratio = ratio(text1_clean, text2_clean)\n    \n    return (cos_sim, lev_ratio)"}
{"task_id": "BigCodeBench/854", "solution": "from functools import reduce\nfrom itertools import permutations\nimport math\ndef task_func(numbers):\n    # Validate input\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"Input must be a list of integers.\")\n    if any(num < 0 for num in numbers):\n        raise ValueError(\"Input numbers cannot be negative.\")\n\n    # Handle empty list case\n    if not numbers:\n        return [], []\n\n    # Generate all permutations\n    all_permutations = list(permutations(numbers))\n\n    # Calculate sum of factorials for each permutation\n    factorial_sums = [sum(math.factorial(num) for num in perm) for perm in all_permutations]\n\n    return factorial_sums, all_permutations"}
{"task_id": "BigCodeBench/857", "solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    transferred_files = []\n\n    # Ensure the source directory exists\n    if not os.path.exists(SOURCE_DIR):\n        raise FileNotFoundError(f\"Source directory '{SOURCE_DIR}' does not exist.\")\n\n    # Create the destination directory if it doesn't exist\n    os.makedirs(DEST_DIR, exist_ok=True)\n\n    # Convert extensions to lowercase for case-insensitive matching\n    extensions = [ext.lower() for ext in EXTENSIONS]\n\n    # Get all files in the source directory\n    all_files = glob.glob(os.path.join(SOURCE_DIR, '*'))\n\n    for file_path in all_files:\n        file_name = os.path.basename(file_path)\n        file_ext = os.path.splitext(file_name)[1].lower()\n\n        if file_ext[1:] in extensions:  # Remove the dot from file_ext\n            dest_path = os.path.join(DEST_DIR, file_name)\n            try:\n                shutil.move(file_path, dest_path)\n                transferred_files.append(file_name)\n            except Exception as e:\n                warnings.warn(f\"Could not transfer '{file_name}': {str(e)}\")\n\n    return transferred_files"}
{"task_id": "BigCodeBench/865", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n    # Convert the input data to a pandas DataFrame\n    df = pd.DataFrame(data, columns=['Item', 'Count', 'Weight'])\n    \n    # Normalize counts using z-score normalization\n    df['Normalized Count'] = zscore(df['Count'])\n    \n    # Normalize weights using min-max scaling\n    scaler = MinMaxScaler()\n    df['Normalized Weight'] = scaler.fit_transform(df[['Weight']])\n    \n    # Select and return the required columns\n    return df[['Item', 'Normalized Count', 'Normalized Weight']]"}
{"task_id": "BigCodeBench/870", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n    if not data_list:\n        return pd.DataFrame(columns=['Mean Value'])\n\n    # Find the maximum length of tuples in the list\n    max_length = max(len(tup) for tup in data_list)\n\n    # Initialize lists to store numerical values for each position\n    numerical_values = [[] for _ in range(max_length)]\n\n    # Collect numerical values for each position\n    for tup in data_list:\n        for i, value in enumerate(tup):\n            if isinstance(value, (int, float)):\n                numerical_values[i].append(value)\n\n    # Calculate means for each position\n    means = [np.mean(values) if values else np.nan for values in numerical_values]\n\n    # Create DataFrame\n    df = pd.DataFrame({'Mean Value': means})\n    df.index = [f'Position {i}' for i in range(len(means))]\n\n    return df\ndata = [('a', '1', 2.1), ('b', 21, 'c'), (12, 3, 4.3), (['d'], 4, 5.4), ('e', 5, 6.5)]"}
{"task_id": "BigCodeBench/879", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\ndef task_func(data, col1, col2):\n    # Check if data is empty\n    if data.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n    \n    # Check if columns exist in the DataFrame\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(f\"Column '{col1}' or '{col2}' not found in the DataFrame.\")\n    \n    # Check if columns are categorical\n    if not pd.api.types.is_categorical_dtype(data[col1]) and not isinstance(data[col1].dtype, pd.CategoricalDtype) and data[col1].dtype != object:\n        raise TypeError(f\"Column '{col1}' contains non-categorical data.\")\n    if not pd.api.types.is_categorical_dtype(data[col2]) and not isinstance(data[col2].dtype, pd.CategoricalDtype) and data[col2].dtype != object:\n        raise TypeError(f\"Column '{col2}' contains non-categorical data.\")\n    \n    # Check if columns have multiple categories\n    if data[col1].nunique() < 2 or data[col2].nunique() < 2:\n        raise ValueError(\"One or both of the columns do not have multiple categories.\")\n    \n    # Construct the contingency table\n    contingency_table = pd.crosstab(data[col1], data[col2])\n    \n    # Check if any category has less than 5 observations\n    if (contingency_table < 5).any().any():\n        raise ValueError(\"Some categories have less than 5 observations, violating the chi-square test assumptions.\")\n    \n    # Perform the chi-square test of independence\n    _, p_value, _, _ = chi2_contingency(contingency_table)\n    \n    return p_value"}
{"task_id": "BigCodeBench/897", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\nNUMBERS = list(range(1, 7))\ndef task_func(rolls, seed=None):\n    # Set seed for reproducibility if provided\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    \n    # Simulate dice rolls\n    dice_rolls = [random.choice(NUMBERS) for _ in range(rolls)]\n    \n    # Calculate frequency of each outcome\n    frequency = np.zeros(6, dtype=int)\n    for roll in dice_rolls:\n        frequency[roll - 1] += 1\n    \n    # Create histogram\n    fig, ax = plt.subplots()\n    ax.hist(dice_rolls, bins=np.arange(0.5, 7.5, 1), align='mid', rwidth=0.8, \n            color='skyblue', edgecolor='black')\n    ax.set_title(\"Histogram of Dice Rolls\")\n    ax.set_xlabel(\"Dice Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_xticks(NUMBERS)\n    ax.set_xlim(0.5, 6.5)\n    \n    # Return the frequency array and the Axes object\n    return (frequency, ax)"}
{"task_id": "BigCodeBench/906", "solution": "import zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    # Ensure target directory exists\n    os.makedirs(target_dir, exist_ok=True)\n\n    # Full path for the archive\n    archive_path = os.path.join(target_dir, archive_name)\n\n    # Create a new ZIP file\n    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        # Walk through the source directory\n        for root, _, files in os.walk(source_dir):\n            for file in files:\n                # Check if the file has '_processed' suffix\n                if file.endswith('_processed' + os.path.splitext(file)[1]):\n                    file_path = os.path.join(root, file)\n                    # Add file to the archive with relative path\n                    arcname = os.path.relpath(file_path, source_dir)\n                    zipf.write(file_path, arcname)\n\n    return archive_path"}
{"task_id": "BigCodeBench/914", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    # Ensure the DataFrame has a 'Close' column and a datetime index\n    if 'Close' not in df.columns:\n        raise ValueError(\"DataFrame must have a 'Close' column\")\n    if not isinstance(df.index, pd.DatetimeIndex):\n        df['Date'] = pd.to_datetime(df['Date'])\n        df.set_index('Date', inplace=True)\n\n    # Prepare the data for linear regression\n    df['Time'] = (df.index - df.index.min()).total_seconds()\n    X = df[['Time']]\n    y = df['Close']\n\n    # Create and fit the linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # Generate future timestamps for the next 7 days\n    last_date = df.index.max()\n    future_dates = [last_date + pd.Timedelta(seconds=24*60*60*i) for i in range(1, 8)]\n    future_times = np.array([(date - df.index.min()).total_seconds() for date in future_dates]).reshape(-1, 1)\n\n    # Predict the closing prices for the next 7 days\n    future_prices = model.predict(future_times)\n\n    # Plot the data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(df.index, y, label='Historical Prices')\n    ax.plot(future_dates, future_prices, label='Predicted Prices', linestyle='--')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Stock Closing Prices: Historical and Predicted')\n    ax.legend()\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    return (future_prices.tolist(), ax)"}
{"task_id": "BigCodeBench/915", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\nimport pandas as pd\ndef task_func(df, z_threshold=2):\n    # Calculate Z-Scores for the 'closing_price' column\n    z_scores = zscore(df['closing_price'])\n    \n    # Identify outliers based on the Z-Score threshold\n    outliers = df[np.abs(z_scores) > z_threshold]\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Plot all closing prices\n    ax.plot(df.index, df['closing_price'], label='Closing Price', color='blue', marker='o')\n    \n    # Highlight outliers\n    ax.scatter(outliers.index, outliers['closing_price'], color='red', s=100, label='Outlier')\n    \n    # Set labels and title\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers in Closing Prices')\n    \n    # Add legend\n    ax.legend()\n    \n    # Adjust layout\n    plt.tight_layout()\n    \n    return outliers[['closing_price']], ax"}
{"task_id": "BigCodeBench/916", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df: pd.DataFrame) -> tuple:\n    # Ensure the DataFrame has a column named 'Close'\n    if 'Close' not in df.columns:\n        raise ValueError(\"DataFrame must contain a column named 'Close'\")\n\n    # Create a figure with two subplots side by side\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n\n    # Box plot\n    sns.boxplot(y=df['Close'], ax=ax1)\n    ax1.set_title('Box Plot of Closing Prices')\n    ax1.set_ylabel('Closing Price')\n\n    # Histogram\n    sns.histplot(df['Close'], kde=True, ax=ax2)\n    ax2.set_title('Histogram of Closing Prices')\n    ax2.set_xlabel('Closing Price')\n    ax2.set_ylabel('Frequency')\n\n    # Adjust layout\n    plt.tight_layout()\n\n    # Return the Axes objects as a tuple\n    return (ax1, ax2)"}
{"task_id": "BigCodeBench/917", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    # Ensure the DataFrame has a datetime index\n    if not isinstance(df.index, pd.DatetimeIndex):\n        df.index = pd.to_datetime(df.index)\n    \n    # Assuming the closing price is in a column named 'close'\n    # If it's named differently, replace 'close' with the correct column name\n    close_prices = df['close']\n    \n    # Fit the ARIMA model\n    # Using order=(1,1,1) as an example; adjust based on your data characteristics\n    model = ARIMA(close_prices, order=(1,1,1))\n    model_fit = model.fit()\n    \n    # Forecast the next 7 days\n    forecast = model_fit.forecast(steps=7)\n    forecast_values = forecast.tolist()\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(12, 6))\n    \n    # Plot historical data\n    ax.plot(close_prices.index, close_prices, label='Historical Prices')\n    \n    # Plot forecast\n    forecast_dates = pd.date_range(start=close_prices.index[-1] + pd.Timedelta(days=1), periods=7)\n    ax.plot(forecast_dates, forecast_values, color='red', linestyle='--', label='Forecast')\n    \n    # Customize the plot\n    ax.set_title('Share Closing Prices Forecast')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.legend()\n    \n    # Add grid for better readability\n    ax.grid(True, linestyle='--', alpha=0.7)\n    \n    # Rotate x-axis labels for better readability\n    plt.xticks(rotation=45)\n    \n    # Adjust layout to prevent cutting off labels\n    plt.tight_layout()\n    \n    return forecast_values, ax"}
{"task_id": "BigCodeBench/928", "solution": "from collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n    # Generate all possible two-letter combinations\n    combinations = [''.join(pair) for pair in itertools.product(string.ascii_lowercase, repeat=2)]\n    \n    # Initialize the dictionary with all combinations set to 0\n    result = {combo: 0 for combo in combinations}\n    \n    # Count the occurrences of two-letter combinations in the word\n    word_pairs = [word[i:i+2].lower() for i in range(len(word) - 1)]\n    pair_counts = Counter(word_pairs)\n    \n    # Update the result dictionary with the counts from the word\n    for pair, count in pair_counts.items():\n        if pair in result:\n            result[pair] = count\n    \n    return result"}
{"task_id": "BigCodeBench/942", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    # Generate date range\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Create sales data\n    data = []\n    for date in dates:\n        for category in categories:\n            sales = np.random.randint(100, 1000)  # Random sales between 100 and 1000\n            data.append([date, category, sales])\n    \n    # Create DataFrame\n    df = pd.DataFrame(data, columns=['Date', 'Category', 'Sales'])\n    \n    # Create plot\n    fig, ax = plt.subplots(figsize=(12, 6))\n    \n    for category in categories:\n        category_data = df[df['Category'] == category]\n        ax.plot(category_data['Date'], category_data['Sales'], marker='o', label=category)\n    \n    ax.set_title('Sales Report by Category Over Time')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.legend()\n    ax.grid(True)\n    \n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    return df, ax"}
{"task_id": "BigCodeBench/945", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    # Generate date range\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Generate or use provided sales data\n    if sales_data is None:\n        np.random.seed(42)  # For reproducibility\n        sales = 100 + np.cumsum(np.random.normal(5, 10, periods))\n    else:\n        sales = np.array(sales_data)\n    \n    # Create a DataFrame\n    df = pd.DataFrame({'date': dates, 'sales': sales})\n    \n    # Prepare data for linear regression\n    X = np.arange(periods).reshape(-1, 1)\n    y = df['sales'].values\n    \n    # Fit linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Forecast future sales\n    future_X = np.arange(periods, 2*periods).reshape(-1, 1)\n    forecasted_sales = model.predict(future_X)\n    \n    return forecasted_sales"}
{"task_id": "BigCodeBench/952", "solution": "import pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    # Set random seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Check if n_tasks is negative\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n\n    # Ensure n_tasks doesn't exceed the number of available tasks\n    n_tasks = min(n_tasks, len(task_list))\n\n    # Sanitize task names\n    sanitized_tasks = [task.replace(\" \", \"_\") for task in task_list]\n\n    # Randomly select tasks\n    selected_tasks = random.sample(sanitized_tasks, n_tasks)\n\n    # Get current date\n    current_date = datetime.now().strftime('%Y-%m-%d')\n\n    # Create assignments\n    assignments = []\n    for task in selected_tasks:\n        assigned_to = random.choice(employees)\n        assignments.append({\n            'Task Name': task,\n            'Assigned To': assigned_to,\n            'Due Date': current_date\n        })\n\n    # Create and return DataFrame\n    return pd.DataFrame(assignments)"}
{"task_id": "BigCodeBench/955", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\ndef task_func(mystrings, text):\n    # Check if the input text is empty\n    if not text.strip():\n        raise ValueError(\"Input text is empty.\")\n\n    # Convert text to lowercase for case-insensitive operation\n    text = text.lower()\n\n    # Replace spaces with underscores in given words\n    for word in mystrings:\n        word_lower = word.lower()\n        word_underscore = word_lower.replace(' ', '_')\n        text = re.sub(r'\\b' + re.escape(word_lower) + r'\\b', word_underscore, text)\n\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Count the frequency of each unique word\n    word_counts = Counter(words)\n\n    # Get unique words in order of appearance\n    unique_words = []\n    for word in words:\n        if word not in unique_words:\n            unique_words.append(word)\n\n    # Get frequencies for the unique words\n    frequencies = [word_counts[word] for word in unique_words]\n\n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(unique_words, frequencies)\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Word Frequency')\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n\n    return ax"}
{"task_id": "BigCodeBench/963", "solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(f\"The source directory '{source_directory}' does not exist.\")\n\n    # Ensure the target directory exists\n    os.makedirs(target_directory, exist_ok=True)\n\n    # Define valid file extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Create the full path for the zip file\n    zip_path = os.path.join(target_directory, f\"{zip_name}.zip\")\n\n    # Create a new zip file\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        # Iterate through all files in the source directory\n        for ext in valid_extensions:\n            for file_path in glob.glob(os.path.join(source_directory, f\"*{ext}\")):\n                # Add file to the zip archive\n                zipf.write(file_path, os.path.basename(file_path))\n\n    # Return the full path to the created zip file\n    return zip_path"}
{"task_id": "BigCodeBench/964", "solution": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\nimport csv\ndef task_func(source_directory: str, target_directory: str) -> int:\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"The source directory {source_directory} does not exist.\")\n\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    converted_count = 0\n    supported_extensions = {'.txt', '.docx', '.xlsx', '.csv'}\n\n    for file_path in Path(source_directory).iterdir():\n        if file_path.suffix.lower() in supported_extensions:\n            try:\n                if file_path.suffix.lower() == '.txt':\n                    with open(file_path, 'r', encoding='utf-8') as file:\n                        content = file.read()\n                elif file_path.suffix.lower() == '.docx':\n                    doc = docx.Document(file_path)\n                    content = '\\n'.join(paragraph.text for paragraph in doc.paragraphs)\n                elif file_path.suffix.lower() == '.xlsx':\n                    df = pd.read_excel(file_path, header=None)\n                    content = '\\n'.join(df.astype(str).values.flatten())\n                else:  # .csv\n                    with open(file_path, 'r', newline='', encoding='utf-8') as csvfile:\n                        content = '\\n'.join(','.join(row) for row in csv.reader(csvfile))\n\n                df = pd.DataFrame({'Text': [content]})\n                output_path = Path(target_directory) / f\"{file_path.stem}.csv\"\n                df.to_csv(output_path, index=False)\n                converted_count += 1\n\n            except Exception as e:\n                print(f\"Error processing {file_path}: {str(e)}\")\n\n    return converted_count"}
{"task_id": "BigCodeBench/969", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    # Check if DataFrame is empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    \n    # Check for NaN values\n    if df.isnull().values.any():\n        raise ValueError(\"DataFrame contains NaN values\")\n    \n    # Check if all columns are numeric\n    if not all(np.issubdtype(dtype, np.number) for dtype in df.dtypes):\n        raise TypeError(\"DataFrame contains non-numeric data types\")\n    \n    # Compute the cumulative sum for each column\n    cumsum_df = df.cumsum()\n    \n    # Initialize MinMaxScaler\n    scaler = MinMaxScaler()\n    \n    # Fit and transform the cumulative sum DataFrame\n    normalized_cumsum = scaler.fit_transform(cumsum_df)\n    \n    # Convert the normalized array back to DataFrame with original column names and index\n    normalized_cumsum_df = pd.DataFrame(normalized_cumsum, columns=df.columns, index=df.index)\n    \n    return normalized_cumsum_df"}
{"task_id": "BigCodeBench/971", "solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\ndef task_func(directory_path: str):\n    # Check if the directory exists\n    if not os.path.isdir(directory_path):\n        raise ValueError(\"The provided directory does not exist.\")\n    \n    result = []\n    \n    # Iterate over each item in the directory\n    for entry in os.scandir(directory_path):\n        if entry.is_file():\n            # Get file stats\n            stat = entry.stat()\n            \n            # Get file size\n            file_size = stat.st_size\n            \n            # Get creation time (or last metadata change time if creation time is not available)\n            ctime = stat.st_ctime\n            creation_time = datetime.fromtimestamp(ctime, tz=timezone.utc).isoformat()\n            \n            # Get modification time\n            mtime = stat.st_mtime\n            modification_time = datetime.fromtimestamp(mtime, tz=timezone.utc).isoformat()\n            \n            # Append the result as a tuple\n            result.append((entry.name, file_size, creation_time, modification_time))\n    \n    return result"}
{"task_id": "BigCodeBench/985", "solution": "import pandas as pd\nimport json\nimport os\nimport math\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    # Parse JSON data\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"The JSON data is malformed.\")\n\n    # Check if data is empty\n    if not data:\n        raise ValueError(\"The JSON data is empty.\")\n\n    # Prepare data for DataFrame\n    valid_data = []\n    for item in data:\n        country = item.get(\"Country\")\n        population = item.get(\"Population\")\n\n        # Validate country name\n        if not isinstance(country, str):\n            raise ValueError(\"Country names must be strings.\")\n\n        # Validate population\n        if not isinstance(population, (int, float)) or population < 0:\n            raise ValueError(\"Population must be a non-negative number.\")\n\n        # Round down float populations\n        population = math.floor(population)\n\n        valid_data.append({\"Country\": country, \"Population\": population})\n\n    # Create DataFrame\n    df = pd.DataFrame(valid_data, columns=[\"Country\", \"Population\"])\n\n    # Generate file path\n    file_path = os.path.join(output_dir, file_name)\n\n    # Write DataFrame to CSV\n    try:\n        df.to_csv(file_path, index=False)\n    except IOError:\n        raise IOError(\"The file cannot be written to the specified directory.\")\n\n    return file_path, df"}
{"task_id": "BigCodeBench/988", "solution": "import os\nimport re\nfrom pathlib import Path\ndef task_func(dir_path: str, predicates: list) -> dict:\n    # Validate directory path\n    if not os.path.exists(dir_path) or not os.path.isdir(dir_path):\n        raise FileNotFoundError(f\"The specified directory does not exist or is not a directory: {dir_path}\")\n\n    # Validate predicates\n    if not predicates:\n        raise ValueError(\"No valid predicates are provided.\")\n\n    # Deduplicate predicates\n    predicates = list(dict.fromkeys(predicates))\n\n    # Initialize result dictionary\n    result = {}\n\n    # Iterate over items in the directory\n    for item in os.listdir(dir_path):\n        item_results = {}\n        for predicate in predicates:\n            if callable(predicate):\n                # If predicate is a function, call it with the item name\n                item_results[predicate.__name__] = predicate(item)\n            elif isinstance(predicate, str):\n                # If predicate is a string, treat it as a regex pattern\n                item_results[predicate] = bool(re.match(predicate, item))\n            else:\n                # For any other type of predicate, evaluate it to False\n                item_results[str(predicate)] = False\n        result[item] = item_results\n\n    return result"}
{"task_id": "BigCodeBench/990", "solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\ndef task_func(hex_string):\n    # Decode the hexadecimal string to bytes\n    byte_data = binascii.unhexlify(hex_string)\n    \n    # Convert bytes to a UTF-8 string\n    utf8_string = byte_data.decode('utf-8')\n    \n    # Encode the UTF-8 string into different formats\n    result = {\n        'hex': hex_string,\n        'base64': base64.b64encode(byte_data).decode('utf-8'),\n        'utf-8': utf8_string,\n        'utf-16': utf8_string.encode('utf-16').decode('utf-16'),\n        'utf-32': utf8_string.encode('utf-32').decode('utf-32'),\n        'ASCII': utf8_string if all(ord(c) < 128 for c in utf8_string) else 'Not representable in ASCII',\n        'URL': urllib.parse.quote(utf8_string),\n        'ROT13': codecs.encode(utf8_string, 'rot_13')\n    }\n    \n    return result"}
{"task_id": "BigCodeBench/998", "solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\ndef task_func(url):\n    try:\n        # Download the file\n        urllib.request.urlretrieve(url, TARGET_TAR_FILE)\n        \n        # Calculate MD5 checksum\n        md5_hash = hashlib.md5()\n        with open(TARGET_TAR_FILE, \"rb\") as f:\n            for chunk in iter(lambda: f.read(4096), b\"\"):\n                md5_hash.update(chunk)\n        calculated_checksum = md5_hash.hexdigest()\n        \n        # Validate checksum\n        if calculated_checksum != EXPECTED_MD5_CHECKSUM:\n            os.remove(TARGET_TAR_FILE)\n            return False\n        \n        # Extract contents\n        with tarfile.open(TARGET_TAR_FILE, \"r:gz\") as tar:\n            tar.extractall()\n        \n        return True\n    \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        if os.path.exists(TARGET_TAR_FILE):\n            os.remove(TARGET_TAR_FILE)\n        return False"}
{"task_id": "BigCodeBench/999", "solution": "import urllib.request\nimport os\nimport csv\nimport collections\ndef task_func(url, column_name, csv_file_path):\n    try:\n        # Download the CSV file from the given URL\n        urllib.request.urlretrieve(url, csv_file_path)\n        \n        # Initialize a defaultdict to count occurrences\n        value_counts = collections.defaultdict(int)\n        \n        # Read the CSV file and count occurrences in the specified column\n        with open(csv_file_path, 'r', newline='', encoding='utf-8') as csvfile:\n            reader = csv.DictReader(csvfile)\n            \n            # Check if the specified column exists\n            if column_name not in reader.fieldnames:\n                raise ValueError(f\"The provided column_name '{column_name}' does not exist in the CSV file.\")\n            \n            # Count occurrences of each value in the specified column\n            for row in reader:\n                value = row[column_name]\n                value_counts[value] += 1\n        \n        return dict(value_counts)\n    \n    except urllib.error.URLError as e:\n        raise Exception(f\"Failed to download the CSV file: {e}\")\n    \n    except csv.Error as e:\n        raise Exception(f\"Error reading the CSV file: {e}\")\n    \n    finally:\n        # Delete the downloaded CSV file if it exists\n        if os.path.exists(csv_file_path):\n            os.remove(csv_file_path)"}
{"task_id": "BigCodeBench/1003", "solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\ndef task_func(url):\n    try:\n        # Fetch the XML file from the specified URL\n        with urllib.request.urlopen(url) as response:\n            xml_data = response.read()\n    except urllib.error.URLError as e:\n        raise ValueError(f\"Failed to fetch XML from URL: {e}\")\n\n    try:\n        # Parse the XML data\n        root = etree.fromstring(xml_data)\n    except etree.XMLSyntaxError as e:\n        raise ValueError(f\"Invalid XML syntax: {e}\")\n\n    # Check if the XML structure conforms to the expected format\n    if root.tag != 'root' or not all(child.tag == 'item' for child in root):\n        raise ValueError(\"XML structure does not match expected format\")\n\n    # Extract data from XML\n    data = []\n    for item in root:\n        item_data = {child.tag: child.text for child in item}\n        data.append(item_data)\n\n    # Check if we have any data to construct a DataFrame\n    if not data:\n        raise ValueError(\"No data found in XML to construct a DataFrame\")\n\n    # Convert the list of dictionaries to a DataFrame\n    df = pd.DataFrame(data)\n    return df"}
{"task_id": "BigCodeBench/1004", "solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(url):\n    # Download the text file from the specified URL\n    try:\n        with urllib.request.urlopen(url) as response:\n            text = response.read().decode('utf-8')\n    except Exception as e:\n        print(f\"Error downloading file: {e}\")\n        return None\n\n    # Process the text to count word frequencies\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_freq = Counter(words)\n\n    # Get the ten most common words\n    most_common = word_freq.most_common(10)\n\n    # Prepare data for plotting\n    words, counts = zip(*most_common)\n\n    # Create the bar chart\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(words, counts)\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Top 10 Most Frequent Words')\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n\n    return (word_freq, ax)"}
{"task_id": "BigCodeBench/1006", "solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    try:\n        # Ensure the download directory exists\n        os.makedirs(download_path, exist_ok=True)\n\n        # Download the file\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n\n        # Check if the content type is 'application/zip'\n        content_type = response.headers.get('Content-Type', '').lower()\n        if 'application/zip' not in content_type:\n            return \"Error: The URL does not point to a ZIP file.\"\n\n        # Save the file locally\n        file_name = url.split('/')[-1]\n        file_path = os.path.join(download_path, file_name)\n        with open(file_path, 'wb') as file:\n            for chunk in response.iter_content(chunk_size=8192):\n                file.write(chunk)\n\n        # Extract the ZIP file\n        try:\n            with ZipFile(file_path, 'r') as zip_ref:\n                zip_ref.extractall(download_path)\n            \n            # Clean up the downloaded zip file\n            os.remove(file_path)\n            \n            return download_path\n        except BadZipFile:\n            os.remove(file_path)\n            return \"Error: The downloaded file is not a valid ZIP file.\"\n\n    except requests.exceptions.RequestException:\n        return \"Error: Unable to download the file from the provided URL.\"\n    except Exception as e:\n        return f\"Error: {str(e)}\""}
{"task_id": "BigCodeBench/1008", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\ndef task_func(url, table_id):\n    try:\n        # Send a GET request to the URL\n        response = requests.get(url)\n        response.raise_for_status()  # Raises HTTPError for bad responses\n    except requests.exceptions.RequestException as e:\n        raise requests.exceptions.HTTPError(f\"HTTP request failed: {e}\")\n\n    # Parse the HTML content\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Find the table with the specified ID\n    table = soup.find('table', id=table_id)\n    if not table:\n        raise ValueError(\"Table with the specified ID not found.\")\n\n    # Check if the table has any rows\n    rows = table.find_all('tr')\n    if not rows:\n        return pd.DataFrame()  # Return empty DataFrame if no rows\n\n    # Extract headers (assuming first row contains headers)\n    headers = [th.text.strip() for th in rows[0].find_all(['th', 'td'])]\n\n    # Extract data from remaining rows\n    data = []\n    for row in rows[1:]:\n        cells = row.find_all(['td', 'th'])\n        if cells:  # Ensure the row has cells\n            data.append([cell.text.strip() for cell in cells])\n\n    # Create and return the DataFrame\n    return pd.DataFrame(data, columns=headers)"}
{"task_id": "BigCodeBench/1012", "solution": "import requests\nfrom pathlib import Path\nimport zipfile\nimport shutil\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\ndef task_func(url, filename):\n    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)\n    ZIP_DIR.mkdir(parents=True, exist_ok=True)\n    \n    zip_path = DOWNLOAD_DIR / filename\n    \n    try:\n        # Download the zip file\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n        \n        with zip_path.open('wb') as f:\n            for chunk in response.iter_content(chunk_size=8192):\n                f.write(chunk)\n        \n        # Extract the zip file\n        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n        \n        # Get list of extracted files\n        extracted_files = [f.name for f in ZIP_DIR.iterdir() if f.is_file()]\n        \n        return (\"Success\", extracted_files)\n    \n    except requests.exceptions.RequestException as e:\n        return (f\"Error: Network-related exception - {str(e)}\", [])\n    \n    except (zipfile.BadZipFile, OSError) as e:\n        return (f\"Error: File-related exception - {str(e)}\", [])\n    \n    finally:\n        # Clean up: remove downloaded zip file and extraction directory\n        if zip_path.exists():\n            zip_path.unlink()\n        if ZIP_DIR.exists():\n            shutil.rmtree(ZIP_DIR)"}
{"task_id": "BigCodeBench/1013", "solution": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    try:\n        # Send a GET request to the URL\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an exception for bad status codes\n\n        # Parse the HTML content\n        soup = BeautifulSoup(response.content, 'html.parser')\n\n        # Find all hyperlinks and convert to absolute URLs\n        unique_links = set()\n        for a_tag in soup.find_all('a', href=True):\n            absolute_url = urljoin(base_url, a_tag['href'])\n            unique_links.add(absolute_url)\n\n        # Write unique absolute URLs to CSV file\n        with open(csv_file, mode='w', newline='', encoding='utf-8') as file:\n            writer = csv.writer(file)\n            writer.writerow(['URL'])  # Write header\n            for link in unique_links:\n                writer.writerow([link])\n\n        return len(unique_links)\n\n    except requests.RequestException as e:\n        print(f\"Error fetching the webpage: {e}\")\n        return 0\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return 0"}
{"task_id": "BigCodeBench/1015", "solution": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    try:\n        # Fetch the HTML content\n        if webpage_url.startswith(('http://', 'https://')):\n            response = requests.get(webpage_url)\n            response.raise_for_status()\n            content = response.content\n        else:\n            with open(webpage_url, 'rb') as file:\n                content = file.read()\n\n        # Parse the HTML content\n        tree = html.fromstring(content)\n        tables = pd.read_html(content)\n\n        if not tables:\n            return 0  # No tables found in the HTML content\n\n        # Use the first table found\n        df = tables[0]\n\n        if df.empty:\n            return 0  # The table is empty\n\n        # Connect to the SQLite database\n        conn = sqlite3.connect(database_name)\n\n        # Replace the existing table with new data\n        df.to_sql('my_table', conn, if_exists='replace', index=False)\n\n        # Commit changes and close the connection\n        conn.commit()\n        conn.close()\n\n        # Return the number of rows in the parsed HTML table\n        return len(df)\n\n    except requests.RequestException as e:\n        raise requests.RequestException(f\"Error fetching the webpage: {e}\")\n    except sqlite3.DatabaseError as e:\n        raise sqlite3.DatabaseError(f\"Database error: {e}\")\n    except Exception as e:\n        raise Exception(f\"An unexpected error occurred: {e}\")"}
{"task_id": "BigCodeBench/1019", "solution": "from PIL import Image\nimport codecs\nimport pytesseract\nIMAGE_PATH = \"image.png\"\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    def convert_encoding(text):\n        try:\n            return text.encode(from_encoding).decode(to_encoding)\n        except UnicodeDecodeError as e:\n            raise ValueError(f\"UnicodeDecodeError during conversion: {e}\")\n        except LookupError as e:\n            raise ValueError(f\"Incorrect encodings provided: {e}\")\n\n    try:\n        # Attempt OCR\n        with Image.open(filename) as img:\n            extracted_text = pytesseract.image_to_string(img)\n        \n        if extracted_text.strip():\n            return convert_encoding(extracted_text)\n\n        # Fallback to image comment\n        with Image.open(filename) as img:\n            comment = img.info.get(\"comment\", \"\")\n        \n        if comment:\n            return convert_encoding(comment)\n\n    except Exception as e:\n        # If both OCR and comment processing fail, return an empty string\n        return \"\"\n\n    # If no text was extracted and no comment found, return an empty string\n    return \"\""}
{"task_id": "BigCodeBench/1020", "solution": "import json\nimport requests\nimport chardet\nAPI_URL = \"http://api.example.com/data\"\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    try:\n        # Initiate HTTP GET request with a timeout of 5 seconds\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()  # Raise an exception for HTTP errors\n\n        # Retrieve the response content in raw bytes\n        raw_content = response.content\n\n        # Handle empty content\n        if not raw_content:\n            return {}\n\n        # Detect encoding if not provided\n        if from_encoding is None:\n            detected = chardet.detect(raw_content)\n            from_encoding = detected['encoding']\n\n            # Raise exception if encoding cannot be detected for non-empty content\n            if from_encoding is None:\n                raise ValueError(\"Unable to detect encoding for non-empty content\")\n\n        # Decode the raw content using the detected or provided encoding\n        decoded_content = raw_content.decode(from_encoding)\n\n        # Re-encode the content to the desired encoding\n        re_encoded_content = decoded_content.encode(to_encoding)\n\n        # Parse the JSON data\n        json_data = json.loads(re_encoded_content.decode(to_encoding))\n\n        return json_data\n\n    except requests.exceptions.RequestException as e:\n        print(f\"Request failed: {e}\")\n        return {}\n    except json.JSONDecodeError as e:\n        print(f\"JSON parsing error: {e}\")\n        return {}\n    except ValueError as e:\n        print(f\"Value error: {e}\")\n        raise\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return {}"}
{"task_id": "BigCodeBench/1022", "solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    # Check if the file exists\n    if not os.path.exists(csv_file_path):\n        raise FileNotFoundError(f\"The file '{csv_file_path}' does not exist.\")\n    \n    try:\n        # Read the CSV file\n        df = pd.read_csv(csv_file_path)\n        \n        # Check if the DataFrame is empty\n        if df.empty:\n            return pd.DataFrame()\n        \n        # Check if the specified column exists in the DataFrame\n        if column_name not in df.columns:\n            raise ValueError(f\"The column '{column_name}' is not present in the CSV file.\")\n        \n        # Convert the date column to datetime objects\n        df[column_name] = pd.to_datetime(df[column_name], format=date_format, errors='coerce')\n        \n        # Filter rows based on the current date\n        current_date = datetime.now().date()\n        df = df[df[column_name].dt.date <= current_date]\n        \n        # Sort the resulting data by the date column\n        df = df.sort_values(by=column_name)\n        \n        return df\n    \n    except EmptyDataError:\n        # Return an empty DataFrame if the CSV file is empty\n        return pd.DataFrame()"}
{"task_id": "BigCodeBench/1039", "solution": ""}
{"task_id": "BigCodeBench/1040", "solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    # Create and configure the server socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setblocking(False)\n    server_socket.bind((server_address, server_port))\n    server_socket.listen(5)\n\n    # Initialize socket lists and message queues\n    inputs = [server_socket]\n    outputs = []\n    message_queues = {}\n\n    start_time = datetime.now()\n    end_time = start_time + timedelta(minutes=run_duration)\n\n    print(f\"Server started on {server_address}:{server_port}\")\n\n    while datetime.now() < end_time:\n        readable, writable, exceptional = select.select(inputs, outputs, inputs, 1.0)\n\n        for s in readable:\n            if s is server_socket:\n                # Handle new connection\n                connection, client_address = s.accept()\n                connection.setblocking(False)\n                inputs.append(connection)\n                message_queues[connection] = queue.Queue()\n                print(f\"New connection from {client_address}\")\n            else:\n                # Handle data from client\n                try:\n                    data = s.recv(buffer_size)\n                    if data:\n                        # Append server time and queue the response\n                        current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n                        response = f\"{data.decode().strip()} (Server Time: {current_time})\".encode()\n                        message_queues[s].put(response)\n                        if s not in outputs:\n                            outputs.append(s)\n                    else:\n                        # Client closed connection\n                        print(f\"Client {s.getpeername()} disconnected\")\n                        if s in outputs:\n                            outputs.remove(s)\n                        inputs.remove(s)\n                        s.close()\n                        del message_queues[s]\n                except Exception as e:\n                    print(f\"Error handling client {s.getpeername()}: {e}\")\n                    if s in outputs:\n                        outputs.remove(s)\n                    inputs.remove(s)\n                    s.close()\n                    del message_queues[s]\n\n        for s in writable:\n            try:\n                next_msg = message_queues[s].get_nowait()\n            except queue.Empty:\n                outputs.remove(s)\n            else:\n                s.send(next_msg)\n\n        for s in exceptional:\n            print(f\"Handling exceptional condition for {s.getpeername()}\")\n            inputs.remove(s)\n            if s in outputs:\n                outputs.remove(s)\n            s.close()\n            del message_queues[s]\n\n    # Clean up\n    for s in inputs:\n        s.close()\n    server_socket.close()\n\n    run_time = datetime.now() - start_time\n    return f\"Server operated for {run_time.total_seconds():.2f} seconds and handled {len(message_queues)} connections.\""}
{"task_id": "BigCodeBench/1042", "solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\ndef task_func(client_socket):\n    try:\n        # Receive message from client socket\n        message = client_socket.recv(BUFFER_SIZE).decode('utf-8')\n        \n        # Get email details from user\n        sender_email = input(\"Enter sender's email: \")\n        recipient_email = input(\"Enter recipient's email: \")\n        password = getpass.getpass(\"Enter sender's email password: \")\n        \n        # Create email message\n        email = EmailMessage()\n        email.set_content(message)\n        email['Subject'] = 'Message from Client Socket'\n        email['From'] = sender_email\n        email['To'] = recipient_email\n        \n        # Send email via SMTP server\n        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n            server.starttls()\n            server.login(sender_email, password)\n            server.send_message(email)\n        \n        print(\"Email sent successfully.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n    finally:\n        client_socket.close()"}
{"task_id": "BigCodeBench/1053", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n    try:\n        # Read the CSV file\n        df = pd.read_csv(file_path)\n        \n        # Check if the CSV file has a header\n        if 'Text' in df.columns:\n            text_data = df['Text']\n        else:\n            # If no header, assume the first column is the text data\n            text_data = df.iloc[:, 0]\n        \n        # Initialize CountVectorizer with stop words\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        \n        # Fit and transform the text data\n        word_counts = vectorizer.fit_transform(text_data)\n        \n        # Get word frequencies\n        word_freq = dict(zip(vectorizer.get_feature_names_out(), word_counts.sum(axis=0).tolist()[0]))\n        \n        # Sort words by frequency and get top 10\n        top_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:10]\n        \n        # Separate words and frequencies for plotting\n        words, frequencies = zip(*top_words)\n        \n        # Create the plot\n        fig, ax = plt.subplots(figsize=(12, 6))\n        ax.bar(words, frequencies)\n        ax.set_title('Top 10 Most Common Words')\n        ax.set_xlabel('Words')\n        ax.set_ylabel('Frequency')\n        plt.xticks(rotation=45, ha='right')\n        plt.tight_layout()\n        \n        if save_path:\n            plt.savefig(save_path)\n            plt.close(fig)\n            return None\n        else:\n            return ax\n    \n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The specified file_path {file_path} does not exist.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None"}
{"task_id": "BigCodeBench/1057", "solution": "import pandas as pd\nimport itertools\nimport numpy as np\ndef task_func(animals=None, foods=None):\n    # Predefined lists\n    default_animals = ['Lion', 'Elephant', 'Giraffe', 'Monkey']\n    default_foods = ['Banana', 'Grass', 'Meat', 'Leaves']\n\n    # Handle special cases\n    if animals is None and foods is None:\n        return pd.DataFrame()  # Return empty DataFrame if both lists are not provided\n    \n    if animals is None or len(animals) == 0:\n        animals = default_animals\n    if foods is None or len(foods) == 0:\n        foods = default_foods\n\n    # Generate all possible combinations\n    combinations = list(itertools.product(animals, foods))\n\n    # Shuffle the combinations randomly\n    np.random.shuffle(combinations)\n\n    # Create a DataFrame\n    df = pd.DataFrame(combinations, columns=['Animal', 'Food'])\n\n    # Format the cells as 'animal:food'\n    df['Combination'] = df['Animal'] + ':' + df['Food']\n\n    # Pivot the DataFrame to have animals as rows and foods as columns\n    pivot_df = df.pivot(index='Animal', columns='Food', values='Combination')\n\n    # Fill NaN values with an empty string\n    pivot_df = pivot_df.fillna('')\n\n    return pivot_df"}
{"task_id": "BigCodeBench/1077", "solution": "from datetime import datetime\nimport pytz\nimport numpy as np\ndef task_func(time_strings, timezone):\n    if len(time_strings) < 2:\n        return 0.0\n    \n    tz = pytz.timezone(timezone)\n    \n    # Convert timestamps to the specified timezone\n    converted_times = [\n        datetime.strptime(ts, \"%Y-%m-%d %H:%M:%S\")\n        .replace(tzinfo=pytz.UTC)\n        .astimezone(tz)\n        for ts in time_strings\n    ]\n    \n    # Calculate time differences in seconds\n    time_diffs = [\n        abs((converted_times[i+1] - converted_times[i]).total_seconds())\n        for i in range(len(converted_times) - 1)\n    ]\n    \n    if not time_diffs:\n        return 0.0\n    \n    # Calculate and return the mean time difference\n    return np.mean(time_diffs)"}
{"task_id": "BigCodeBench/1085", "solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Lowercase the text and remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text.lower())\n    \n    # Split into words\n    words = text.split()\n    \n    # Count word frequencies\n    word_counts = Counter(words)\n    \n    # Get the top 10 most common words\n    top_10 = word_counts.most_common(10)\n    \n    # Prepare data for plotting\n    words, counts = zip(*top_10)\n    \n    # Create the bar chart\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(words, counts)\n    \n    # Customize the chart\n    ax.set_title('Top 10 Most Common Words')\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    plt.xticks(rotation=45, ha='right')\n    \n    # Adjust layout and display the plot\n    plt.tight_layout()\n    plt.show()\n    \n    return top_10, ax"}
{"task_id": "BigCodeBench/1124", "solution": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\ndef task_func(myString):\n    # Regular expression to find URLs in the string\n    url_pattern = re.compile(r'https?://(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&//=]*)')\n    match = url_pattern.search(myString)\n    \n    if not match:\n        return \"No valid URL found in the provided string.\"\n    \n    url = match.group()\n    \n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n    except requests.RequestException:\n        return f\"Unable to fetch the content of the URL: {url}\"\n    \n    soup = BeautifulSoup(response.text, 'html.parser')\n    title_tag = soup.find('title')\n    \n    if not title_tag:\n        return \"No title tag found in the webpage.\"\n    \n    return title_tag.string.strip()"}
{"task_id": "BigCodeBench/1129", "solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\ndef task_func(json_data, unknown_key, save_dir=None):\n    # Parse the JSON string\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON data provided\")\n\n    # Find the URL associated with the specified key\n    url = data.get(unknown_key)\n    if not url:\n        raise KeyError(f\"Key '{unknown_key}' not found in the JSON data\")\n\n    # Download the file from the URL\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        raise ValueError(f\"Failed to download file from URL: {url}. Error: {str(e)}\")\n\n    # Generate the timestamped filename\n    timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n    filename = f\"{unknown_key}_{timestamp}.txt\"\n\n    # Determine the save directory\n    if save_dir is None:\n        save_dir = os.getcwd()\n    \n    # Ensure the save directory exists\n    os.makedirs(save_dir, exist_ok=True)\n\n    # Construct the full file path\n    file_path = os.path.join(save_dir, filename)\n\n    # Save the downloaded content to the file\n    with open(file_path, 'wb') as file:\n        file.write(response.content)\n\n    # Return the absolute path of the saved file\n    return os.path.abspath(file_path)"}
{"task_id": "BigCodeBench/1137", "solution": "import bs4\nimport requests\nimport re\nimport json\nfrom urllib.parse import urlparse\ndef task_func(url: str, output_path: str) -> list:\n    # Regular expression pattern for phone numbers\n    phone_pattern = re.compile(r'\\b(?:\\+?(\\d{1,3})[-. ]?)?(\\(?\\d{3}\\)?[-. ]?)?\\d{3}[-. ]?\\d{4}\\b')\n    \n    # Determine if the URL is a local file or a webpage\n    parsed_url = urlparse(url)\n    \n    if parsed_url.scheme == 'file':\n        # Handle local file\n        with open(parsed_url.path, 'r', encoding='utf-8') as file:\n            content = file.read()\n    else:\n        # Handle webpage\n        response = requests.get(url)\n        response.raise_for_status()\n        content = response.text\n    \n    # Parse the content\n    soup = bs4.BeautifulSoup(content, 'html.parser')\n    \n    # Extract text from the parsed content\n    text = soup.get_text()\n    \n    # Find all matches of the phone number pattern in the text\n    phone_numbers = phone_pattern.findall(text)\n    \n    # Process and clean the phone numbers\n    cleaned_numbers = []\n    for number in phone_numbers:\n        cleaned = ''.join(number).strip()\n        cleaned = re.sub(r'[-.\\s()]', '', cleaned)\n        if len(cleaned) >= 10:  # Ensure the number has at least 10 digits\n            cleaned_numbers.append(cleaned)\n    \n    # Remove duplicates while preserving order\n    unique_numbers = list(dict.fromkeys(cleaned_numbers))\n    \n    # Save the phone numbers to the specified output file in JSON format\n    with open(output_path, 'w', encoding='utf-8') as outfile:\n        json.dump(unique_numbers, outfile, indent=2)\n    \n    return unique_numbers"}
