{"task_id": "BigCodeBench/13", "solution": "import subprocess\nimport ftplib\nimport os\nfrom typing import List\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test') -> List[str]:\n    \"\"\"\n    Download all files from a specific directory on an FTP server using wget in a subprocess.\n\n    Args:\n        ftp_server (str): The FTP server address.\n        ftp_user (str): The FTP server username.\n        ftp_password (str): The FTP server password.\n        ftp_dir (str): The directory path on the FTP server from which files need to be downloaded.\n\n    Returns:\n        List[str]: A list of filenames that were attempted to be downloaded from the FTP server.\n\n    Raises:\n        Exception: If there is a failure in connecting to the FTP server, logging in, or changing directory.\n    \"\"\"\n    try:\n        # Connect to the FTP server\n        ftp = ftplib.FTP(ftp_server)\n    except Exception as e:\n        raise Exception(f\"Failed to connect to FTP server {ftp_server}: {str(e)}\")\n\n    try:\n        # Login to the FTP server\n        ftp.login(user=ftp_user, passwd=ftp_password)\n    except Exception as e:\n        raise Exception(f\"Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}\")\n\n    try:\n        # Change to the specified directory\n        ftp.cwd(ftp_dir)\n    except Exception as e:\n        raise Exception(f\"Failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}\")\n\n    # Get the list of files in the directory\n    file_list = ftp.nlst()\n\n    # Close the FTP connection\n    ftp.quit()\n\n    downloaded_files = []\n    for file in file_list:\n        try:\n            # Construct the wget command\n            wget_command = [\n                \"wget\",\n                \"--no-verbose\",\n                f\"ftp://{ftp_user}:{ftp_password}@{ftp_server}{ftp_dir}/{file}\"\n            ]\n            \n            # Execute wget command\n            subprocess.run(wget_command, check=True, capture_output=True)\n            downloaded_files.append(file)\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to download {file}: {e}\")\n        except Exception as e:\n            print(f\"An error occurred while downloading {file}: {e}\")\n\n    return downloaded_files"}
{"task_id": "BigCodeBench/15", "solution": "import subprocess\nimport csv\nimport os\ndef task_func(commands_file_path, output_dir_path):\n    \"\"\"\n    Execute shell commands from a CSV file and save outputs to separate files.\n\n    Args:\n    commands_file_path (str): Path to the CSV file containing shell commands.\n    output_dir_path (str): Path to the directory where output files will be saved.\n\n    Returns:\n    list of str: Paths to the created output files.\n\n    Raises:\n    FileNotFoundError: If the commands_file_path does not exist.\n    \"\"\"\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(f\"The file {commands_file_path} does not exist.\")\n\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n\n    output_files = []\n\n    with open(commands_file_path, 'r', newline='') as csvfile:\n        reader = csv.reader(csvfile)\n        for index, row in enumerate(reader):\n            if row:  # Skip empty rows\n                command = row[0]\n                output_file = os.path.join(output_dir_path, f'command_{index}_output.txt')\n                output_files.append(output_file)\n\n                try:\n                    result = subprocess.run(command, shell=True, check=True, \n                                            capture_output=True, text=True)\n                    output = result.stdout\n                except subprocess.CalledProcessError as e:\n                    output = f\"Command failed with exit code {e.returncode}.\\n\"\n                    output += f\"Error message: {e.stderr}\"\n\n                with open(output_file, 'w') as f:\n                    f.write(output)\n\n    return output_files"}
{"task_id": "BigCodeBench/17", "solution": "import subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n    # Check if the process is running\n    process_found = False\n    for proc in psutil.process_iter(['name']):\n        if proc.info['name'] == process_name:\n            process_found = True\n            # Terminate the process\n            proc.terminate()\n            # Wait for the process to terminate\n            proc.wait(timeout=5)\n            break\n    \n    # Start or restart the process\n    try:\n        subprocess.Popen(process_name)\n        if process_found:\n            return f\"Process found. Restarting {process_name}.\"\n        else:\n            return f\"Process not found. Starting {process_name}.\"\n    except FileNotFoundError:\n        return f\"Error: {process_name} not found. Make sure it's a valid executable.\""}
{"task_id": "BigCodeBench/19", "solution": "import os\nimport glob\nimport zipfile\ndef task_func(directory):\n    # Check if the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The specified directory '{directory}' does not exist\")\n\n    # Get all files in the directory (not including subdirectories)\n    files = [f for f in glob.glob(os.path.join(directory, '*')) if os.path.isfile(f)]\n\n    # If there are no files, return None\n    if not files:\n        return None\n\n    # Create the zip file\n    zip_path = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files:\n            zipf.write(file, os.path.basename(file))\n\n    return zip_path"}
{"task_id": "BigCodeBench/34", "solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Remove URLs from the text\n    text_without_urls = re.sub(r'http[s]?://\\S+', '', text)\n    \n    # Remove any remaining punctuation and split into words\n    words = re.findall(r'\\w+', text_without_urls.lower())\n    \n    # Check if there are any words left\n    if not words:\n        raise ValueError(\"No words available to generate a word cloud after removing URLs.\")\n    \n    # Join the words back into a string\n    clean_text = ' '.join(words)\n    \n    # Generate the word cloud\n    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(clean_text)\n    \n    # Plot the word cloud\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.title('Word Cloud')\n    plt.tight_layout(pad=0)\n    plt.show()\n    \n    return wordcloud"}
{"task_id": "BigCodeBench/37", "solution": "from sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(df, target_column):\n    # Separate features and target\n    X = df.drop(columns=[target_column])\n    y = df[target_column]\n    \n    # Train the Random Forest Classifier\n    rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n    rf_classifier.fit(X, y)\n    \n    # Get feature importances and create a DataFrame\n    feature_importances = pd.DataFrame({\n        'feature': X.columns,\n        'importance': rf_classifier.feature_importances_\n    }).sort_values('importance', ascending=False)\n    \n    # Create the bar plot\n    plt.figure(figsize=(10, 6))\n    ax = sns.barplot(x='importance', y='feature', data=feature_importances)\n    \n    # Set labels and title\n    ax.set_xlabel('Feature Importance Score')\n    ax.set_ylabel('Features')\n    ax.set_title('Visualizing Important Features')\n    \n    # Adjust layout to prevent clipping of ylabel\n    plt.tight_layout()\n    \n    return rf_classifier, ax"}
{"task_id": "BigCodeBench/82", "solution": "from flask import Flask, render_template, redirect, url_for, flash\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\nlogin_manager = LoginManager()\nclass User(UserMixin):\n    def __init__(self, id, username, password):\n        self.id = id\n        self.username = username\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\nusers = {\n    1: User(1, 'user1', 'password123'),\n    2: User(2, 'user2', 'securepass')\n}\ndef task_func(secret_key, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    app.config['SECRET_KEY'] = secret_key\n    login_manager.init_app(app)\n    login_manager.login_view = 'login'\n\n    @login_manager.user_loader\n    def load_user(user_id):\n        return users.get(int(user_id))\n\n    @app.route('/')\n    def home():\n        return render_template('home.html')\n\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        if current_user.is_authenticated:\n            return redirect(url_for('protected'))\n        \n        form = LoginForm()\n        if form.validate_on_submit():\n            user = next((u for u in users.values() if u.username == form.username.data), None)\n            if user and user.check_password(form.password.data):\n                login_user(user)\n                return redirect(url_for('protected'))\n            else:\n                flash('Invalid username or password')\n        return render_template('login.html', form=form)\n\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('home'))\n\n    @app.route('/protected')\n    @login_required\n    def protected():\n        return render_template('protected.html', username=current_user.username)\n\n    return app"}
{"task_id": "BigCodeBench/89", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data, column, outlier_z_score):\n    \"\"\"\n    Identifies and removes outliers from a specified column of a dataset based on the Z-score.\n\n    Args:\n        data (pd.DataFrame): The input dataset.\n        column (str): The name of the column to analyze.\n        outlier_z_score (float): The Z-score threshold for outlier detection.\n\n    Returns:\n        tuple: A tuple containing the original data, the data without outliers, and the indices of the outliers.\n    \"\"\"\n    # Ensure the column is numeric\n    data[column] = pd.to_numeric(data[column], errors='coerce')\n    \n    # Standardize the column\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data[[column]])\n    \n    # Calculate Z-scores\n    z_scores = np.abs(stats.zscore(standardized_data))\n    \n    # Identify outliers\n    outlier_mask = z_scores > outlier_z_score\n    outlier_indices = data.index[outlier_mask.flatten()]\n    \n    # Remove outliers\n    data_without_outliers = data[~outlier_mask.flatten()].copy()\n    \n    # Visualize the data\n    plt.figure(figsize=(12, 5))\n    \n    # Plot original data with outliers\n    plt.subplot(1, 2, 1)\n    plt.scatter(data.index, data[column], color='blue', alpha=0.6)\n    plt.scatter(outlier_indices, data.loc[outlier_indices, column], color='red', alpha=0.6)\n    plt.title('Data with Outliers')\n    plt.xlabel('Index')\n    plt.ylabel(column)\n    \n    # Plot data without outliers\n    plt.subplot(1, 2, 2)\n    plt.scatter(data_without_outliers.index, data_without_outliers[column], color='green', alpha=0.6)\n    plt.title('Data without Outliers')\n    plt.xlabel('Index')\n    plt.ylabel(column)\n    \n    plt.tight_layout()\n    plt.show()\n    \n    return data, data_without_outliers, outlier_indices"}
{"task_id": "BigCodeBench/92", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\nimport numpy as np\ndef task_func(data, n_clusters=3):\n    \"\"\"\n    Perform K-means clustering on a dataset and generate a scatter plot visualizing the clusters and their centroids.\n\n    Args:\n        data (pd.DataFrame): The input dataset for clustering.\n        n_clusters (int, optional): The number of clusters to form. Defaults to 3.\n\n    Returns:\n        tuple:\n            np.ndarray: An array of cluster labels assigned to each sample.\n            plt.Axes: An Axes object with the scatter plot showing the clusters and centroids.\n\n    Raises:\n        ValueError: If 'data' is not a pd.DataFrame.\n        ValueError: If 'n_clusters' is not an integer greater than 1.\n    \"\"\"\n    # Input validation\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n    \n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    cluster_labels = kmeans.fit_predict(data)\n\n    # Create scatter plot\n    fig, ax = plt.subplots(figsize=(10, 8))\n    \n    # Plot data points colored by cluster\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=cluster_labels, cmap='viridis', alpha=0.7)\n    \n    # Plot centroids\n    centroids = kmeans.cluster_centers_\n    ax.scatter(centroids[:, 0], centroids[:, 1], c='red', marker='X', s=200, linewidths=2, label='Centroids')\n\n    # Set labels and title\n    ax.set_xlabel(data.columns[0])\n    ax.set_ylabel(data.columns[1])\n    ax.set_title(f'K-means Clustering (k={n_clusters})')\n\n    # Add legend for centroids\n    ax.legend()\n\n    # Add colorbar\n    plt.colorbar(scatter, label='Cluster')\n\n    return cluster_labels, ax"}
{"task_id": "BigCodeBench/93", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on a dataset and record the result.\n    Also, generates a scatter plot of the transformed data.\n\n    Args:\n    data (pd.DataFrame or np.array): The input dataset.\n    n_components (int, optional): Number of principal components. Defaults to 2.\n\n    Returns:\n    tuple: (DataFrame of transformed data, matplotlib Axes object with scatter plot)\n\n    Raises:\n    ValueError: If n_components is not a positive integer.\n    \"\"\"\n    # Check if n_components is a positive integer\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n\n    # Perform PCA\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n\n    # Create DataFrame with transformed data\n    columns = [f'PC{i+1}' for i in range(n_components)]\n    transformed_df = pd.DataFrame(data=transformed_data, columns=columns)\n\n    # Generate scatter plot\n    fig, ax = plt.subplots(figsize=(10, 8))\n    \n    if n_components >= 2:\n        scatter = ax.scatter(transformed_df['PC1'], transformed_df['PC2'], \n                             c=transformed_df.index, cmap='viridis')\n        ax.set_xlabel('Principal Component 1')\n        ax.set_ylabel('Principal Component 2')\n        plt.colorbar(scatter, ax=ax, label='Data point index')\n    else:\n        ax.scatter(range(len(transformed_df)), transformed_df['PC1'])\n        ax.set_xlabel('Data point index')\n        ax.set_ylabel('Principal Component 1')\n\n    ax.set_title(f'PCA Transformed Data (n_components={n_components})')\n    plt.tight_layout()\n\n    return transformed_df, ax"}
{"task_id": "BigCodeBench/99", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\ndef task_func():\n    # Load the iris dataset\n    iris = load_iris()\n    iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    iris_df['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)\n\n    # Set the global font to Arial for better readability and visual appeal\n    plt.rcParams['font.family'] = 'Arial'\n\n    # Generate a pair plot from the iris dataset\n    pair_plot = sns.pairplot(iris_df, hue='species', height=2.5, aspect=1.2)\n\n    # Set the title of the plot\n    pair_plot.fig.suptitle('Iris Dataset Pair Plot', fontsize=16, y=1.02)\n\n    # Label the axes with full feature names\n    for i, var in enumerate(iris.feature_names):\n        pair_plot.axes[i, 0].set_ylabel(var, fontsize=10)\n        pair_plot.axes[-1, i].set_xlabel(var, fontsize=10)\n\n    # Adjust the layout to prevent overlapping\n    plt.tight_layout()\n\n    # Return the matplotlib Figure object\n    return pair_plot.fig"}
{"task_id": "BigCodeBench/100", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime, timedelta\ndef task_func(seed=42):\n    try:\n        # Set seed for reproducibility\n        random.seed(seed)\n        \n        # Generate dates for the past 30 days\n        end_date = datetime.now()\n        start_date = end_date - timedelta(days=29)\n        dates = pd.date_range(start=start_date, end=end_date, freq='D')\n        \n        # Generate random values\n        values = [random.uniform(0, 100) for _ in range(len(dates))]\n        \n        # Create DataFrame\n        df = pd.DataFrame({'Date': dates, 'Value': values})\n        \n        # Create plot\n        fig, ax = plt.subplots(figsize=(10, 6))\n        ax.plot(df['Date'], df['Value'], marker='o')\n        \n        # Style the plot\n        ax.set_xlabel('Date', fontname='Arial', fontsize=12)\n        ax.set_ylabel('Value', fontname='Arial', fontsize=12)\n        ax.set_title('Random Time Series Data', fontname='Arial', fontsize=14)\n        \n        # Set tick labels to Arial\n        for label in ax.get_xticklabels() + ax.get_yticklabels():\n            label.set_fontname('Arial')\n        \n        # Rotate x-axis labels for better readability\n        plt.xticks(rotation=45)\n        \n        # Adjust layout\n        plt.tight_layout()\n        \n        return ax\n    \n    except Exception as e:\n        raise ValueError(f\"Error generating data or plot: {str(e)}\")"}
{"task_id": "BigCodeBench/101", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport urllib.request\nimport io\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42, save_path=None):\n    \"\"\"\n    Draw the correlation heatmap of the Boston Housing dataset using Seaborn.\n\n    Args:\n        data_url (str): URL of the Boston Housing dataset.\n        seed (int): Random seed for reproducibility.\n        save_path (str, optional): Path to save the heatmap plot. If None, the plot is not saved.\n\n    Returns:\n        matplotlib.axes.Axes: The Axes object containing the heatmap plot.\n\n    Raises:\n        ValueError: If an error occurs in generating or saving the plot.\n    \"\"\"\n    try:\n        # Set random seed for reproducibility\n        np.random.seed(seed)\n\n        # Load the Boston Housing dataset\n        with urllib.request.urlopen(data_url) as url:\n            raw_data = url.read().decode()\n\n        # Process the data\n        data = []\n        for line in raw_data.split('\\n'):\n            if line.strip():\n                data.append(line.split())\n\n        # Create DataFrame\n        columns = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\n        df = pd.DataFrame(data, columns=columns).astype(float)\n\n        # Compute correlation matrix\n        corr_matrix = df.corr()\n\n        # Create heatmap\n        plt.figure(figsize=(12, 10))\n        ax = sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0)\n        plt.title('Correlation Heatmap of Boston Housing Dataset')\n\n        # Save the plot if save_path is provided\n        if save_path:\n            plt.savefig(save_path)\n\n        return ax\n\n    except Exception as e:\n        raise ValueError(f\"An error occurred in generating or saving the plot: {str(e)}\")"}
{"task_id": "BigCodeBench/108", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    \"\"\"\n    Decomposes a time series in the 'value' column of a DataFrame into trend, seasonality, and residuals.\n\n    Parameters:\n    df (pd.DataFrame): DataFrame containing the time series data with a 'value' column.\n    freq (str): Frequency string for the time series. Default is 'D' (daily).\n    decomposition_model (str): Type of decomposition model, either 'additive' or 'multiplicative'. Default is 'multiplicative'.\n\n    Returns:\n    tuple: A tuple containing the decomposition result (DecomposeResult object) and the matplotlib Axes object.\n\n    Raises:\n    ValueError: If 'df' is not a DataFrame, lacks required columns, or contains invalid data types.\n    ValueError: If 'freq' is not a valid frequency string.\n    ValueError: If 'decomposition_model' is not 'additive' or 'multiplicative'.\n    \"\"\"\n    # Check if df is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input 'df' must be a pandas DataFrame.\")\n\n    # Check if 'value' column exists\n    if 'value' not in df.columns:\n        raise ValueError(\"DataFrame must contain a 'value' column.\")\n\n    # Check if 'value' column contains numeric data\n    if not pd.api.types.is_numeric_dtype(df['value']):\n        raise ValueError(\"The 'value' column must contain numeric data.\")\n\n    # Check if freq is a valid frequency string\n    try:\n        pd.date_range(start='2023-01-01', periods=2, freq=freq)\n    except ValueError:\n        raise ValueError(f\"'{freq}' is not a valid frequency string.\")\n\n    # Check if decomposition_model is valid\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"decomposition_model must be either 'additive' or 'multiplicative'.\")\n\n    # Perform seasonal decomposition\n    decomposition = seasonal_decompose(df['value'], model=decomposition_model, period=pd.Timedelta(freq).days)\n\n    # Create plot\n    fig, axes = plt.subplots(4, 1, figsize=(12, 10), sharex=True)\n    \n    axes[0].plot(df.index, decomposition.observed)\n    axes[0].set_title('Observed')\n    \n    axes[1].plot(df.index, decomposition.trend)\n    axes[1].set_title('Trend')\n    \n    axes[2].plot(df.index, decomposition.seasonal)\n    axes[2].set_title('Seasonal')\n    \n    axes[3].plot(df.index, decomposition.resid)\n    axes[3].set_title('Residual')\n    \n    plt.tight_layout()\n\n    return decomposition, axes"}
{"task_id": "BigCodeBench/120", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    \"\"\"\n    Generate a pandas Series of random dates within a specified date range.\n\n    Args:\n        start_date (datetime): The start date of the range (inclusive). Default is January 1, 2020.\n        end_date (datetime): The end date of the range (inclusive). Default is December 31, 2020.\n        seed (int): Seed for the random number generator. Default is 42.\n\n    Returns:\n        pandas.Series: A Series containing random dates within the specified range.\n\n    Raises:\n        ValueError: If start_date or end_date is not a datetime instance, or if start_date is later than end_date.\n    \"\"\"\n    # Input validation\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"Both start_date and end_date must be datetime.datetime instances\")\n    \n    if start_date > end_date:\n        raise ValueError(\"start_date cannot be later than end_date\")\n\n    # Set the random seed\n    random_seed(seed)\n\n    # Calculate the number of days in the range (inclusive)\n    days_range = (end_date - start_date).days + 1\n\n    # Generate random dates\n    random_dates = [start_date + timedelta(days=randint(0, days_range - 1)) for _ in range(days_range)]\n\n    # Create and return the pandas Series\n    return pd.Series(random_dates)"}
{"task_id": "BigCodeBench/123", "solution": "import pandas as pd\nimport os\nimport glob\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    # Check if my_list is a list\n    if not isinstance(my_list, list):\n        raise TypeError(\"The input 'my_list' must be a list.\")\n    \n    # Add the element '12' to the list\n    my_list.append(12)\n    \n    # Calculate the number of files to concatenate\n    num_files = sum(int(x) for x in my_list if isinstance(x, (int, float, str)) and str(x).replace('.', '').isdigit())\n    \n    # Get the list of CSV files in the directory\n    file_pattern = os.path.join(file_dir, f'*{file_ext}')\n    csv_files = glob.glob(file_pattern)\n    \n    # Check if there are any files in the directory\n    if not csv_files:\n        raise FileNotFoundError(f\"No {file_ext} files found in the directory: {file_dir}\")\n    \n    # Read and concatenate the CSV files\n    dfs = []\n    for file in csv_files[:num_files]:\n        try:\n            df = pd.read_csv(file)\n            dfs.append(df)\n        except Exception as e:\n            print(f\"Warning: Could not read file {file}. Error: {str(e)}\")\n    \n    if not dfs:\n        raise FileNotFoundError(\"No valid CSV files could be read.\")\n    \n    # Concatenate all DataFrames\n    result_df = pd.concat(dfs, ignore_index=True)\n    \n    return result_df"}
{"task_id": "BigCodeBench/124", "solution": "from random import randint, seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(my_list, size=100, seed=100):\n    # Validate input\n    if not isinstance(my_list, list):\n        raise TypeError(\"'my_list' must be a list\")\n    if not all(isinstance(item, (int, float)) for item in my_list):\n        raise ValueError(\"All elements in 'my_list' must be numeric (int or float)\")\n\n    # Append 12 to my_list\n    my_list.append(12)\n\n    # Calculate sum of elements in my_list\n    sum_of_elements = sum(my_list)\n\n    # Determine size of random numbers list\n    random_list_size = min(sum_of_elements, size)\n\n    # Set random seed\n    random_seed(seed)\n\n    # Generate random numbers and measure time\n    start_time = time.time()\n    random_numbers = [randint(1, 100) for _ in range(int(random_list_size))]\n    end_time = time.time()\n    time_taken = end_time - start_time\n\n    # Create histogram\n    fig, ax = plt.subplots()\n    ax.hist(random_numbers, bins=range(1, 102), align='left', rwidth=0.8, edgecolor='black')\n    ax.set_xlabel('Number')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Distribution of Random Numbers')\n    ax.set_xlim(0, 101)\n    ax.set_xticks(range(0, 101, 10))\n\n    return time_taken, ax"}
{"task_id": "BigCodeBench/129", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\ndef task_func(url='http://example.com'):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.ConnectionError as e:\n        raise ConnectionError(f\"Failed to connect to {url}: {e}\")\n    except requests.HTTPError as e:\n        raise requests.HTTPError(f\"HTTP request failed for {url}: {e}\")\n\n    soup = BeautifulSoup(response.content, 'html.parser')\n    table = soup.find('table')\n\n    if not table:\n        raise ValueError(\"No table found on the page.\")\n\n    headers = []\n    header_row = table.find('tr')\n    if header_row:\n        headers = [th.get_text(strip=True) for th in header_row.find_all('th')]\n        rows = table.find_all('tr')[1:]\n    else:\n        rows = table.find_all('tr')\n\n    data = []\n    for row in rows:\n        cells = [td.get_text(strip=True) for td in row.find_all('td')]\n        if cells:\n            data.append(cells)\n\n    if not data:\n        raise ValueError(\"No data found in the table.\")\n\n    df = pd.DataFrame(data, columns=headers if headers else None)\n    return df"}
{"task_id": "BigCodeBench/139", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    # Check if the input is a non-empty DataFrame\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty DataFrame\")\n    \n    # Select numeric columns\n    numeric_columns = df.select_dtypes(include=[np.number]).columns\n    \n    # Check if there are any numeric columns in the DataFrame\n    if len(numeric_columns) == 0:\n        raise ValueError(\"There are no numeric columns in the DataFrame\")\n    \n    # Create histograms for each numeric column\n    axes_list = []\n    for column in numeric_columns:\n        fig, ax = plt.subplots()\n        df[column].hist(ax=ax, bins='auto', edgecolor='black')\n        ax.set_title(column)\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Frequency')\n        axes_list.append(ax)\n    \n    return axes_list"}
{"task_id": "BigCodeBench/147", "solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\ndef task_func(ip_range, port):\n    results = {}\n    threads = []\n\n    def check_port(ip):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(1)\n        try:\n            result = sock.connect_ex((str(ip), port))\n            results[str(ip)] = (result == 0)\n        except socket.error:\n            results[str(ip)] = False\n        finally:\n            sock.close()\n\n    network = IPv4Network(ip_range, strict=False)\n    \n    for ip in network:\n        thread = Thread(target=check_port, args=(ip,))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    return results"}
{"task_id": "BigCodeBench/161", "solution": "import re\nimport pandas as pd\nfrom datetime import datetime\nimport os\ndef task_func(log_file):\n    log_pattern = re.compile(r'^(\\w+): \\[(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\] - (.+)$')\n    log_entries = []\n\n    with open(log_file, 'r') as file:\n        for line in file:\n            match = log_pattern.match(line.strip())\n            if match:\n                log_type, timestamp_str, message = match.groups()\n                try:\n                    # Validate timestamp\n                    datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')\n                    log_entries.append({\n                        'Type': log_type,\n                        'Timestamp': timestamp_str,\n                        'Message': message\n                    })\n                except ValueError:\n                    raise ValueError(f\"Invalid timestamp in log entry: {line.strip()}\")\n\n    if not log_entries:\n        raise ValueError(\"No valid log entries found\")\n\n    df = pd.DataFrame(log_entries)\n    \n    # Create output filename\n    base_name = os.path.splitext(log_file)[0]\n    csv_file = f\"{base_name}_structured.csv\"\n    \n    # Save to CSV\n    df.to_csv(csv_file, index=False)\n    \n    return os.path.abspath(csv_file)"}
{"task_id": "BigCodeBench/162", "solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(text, rwidth=0.8):\n    # Extract words using regex\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    \n    # If no words found, return an empty plot\n    if not words:\n        fig, ax = plt.subplots()\n        ax.set_title('Distribution of Word Lengths')\n        ax.set_xlabel('Word Length')\n        ax.set_ylabel('Frequency')\n        return ax\n    \n    # Calculate word lengths\n    word_lengths = [len(word) for word in words]\n    \n    # Create histogram\n    fig, ax = plt.subplots()\n    bins = range(min(word_lengths), max(word_lengths) + 2)\n    ax.hist(word_lengths, bins=bins, align='left', rwidth=rwidth, edgecolor='black')\n    \n    # Customize plot\n    ax.set_title('Distribution of Word Lengths')\n    ax.set_xlabel('Word Length')\n    ax.set_ylabel('Frequency')\n    ax.set_xticks(range(min(word_lengths), max(word_lengths) + 1))\n    \n    # Adjust layout to prevent cut-off labels\n    plt.tight_layout()\n    \n    return ax"}
{"task_id": "BigCodeBench/177", "solution": "import re\nimport nltk\nfrom string import punctuation\nfrom collections import Counter\ndef task_func(df):\n    # Check if DataFrame is empty or missing required columns\n    if df.empty or not {'Title', 'Content'}.issubset(df.columns):\n        raise ValueError(\"DataFrame is empty or does not contain the necessary columns 'Title' and 'Content'\")\n\n    # Filter articles with titles containing \"like\" or \"what\" (case-insensitive)\n    filtered_df = df[df['Title'].str.contains(r'\\b(like|what)\\b', case=False, regex=True)]\n\n    # Combine all content from filtered articles\n    all_content = ' '.join(filtered_df['Content'])\n\n    # Remove punctuation and convert to lowercase\n    clean_content = re.sub(f'[{re.escape(punctuation)}]', '', all_content.lower())\n\n    # Tokenize the content\n    words = nltk.word_tokenize(clean_content)\n\n    # Count word frequencies\n    word_freq = Counter(words)\n\n    return dict(word_freq)"}
{"task_id": "BigCodeBench/184", "solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\ndef task_func(dataframe, text_column):\n    def preprocess_text(text):\n        # Convert to lowercase\n        text = text.lower()\n        # Remove numbers and punctuation\n        text = re.sub(r'\\d+', '', text)\n        text = re.sub(r'[^\\w\\s]', '', text)\n        # Remove stopwords\n        words = text.split()\n        words = [word for word in words if word not in STOPWORDS]\n        return ' '.join(words)\n\n    # Apply preprocessing to the text column\n    dataframe['preprocessed_text'] = dataframe[text_column].apply(preprocess_text)\n\n    # Vectorize the preprocessed text\n    vectorizer = CountVectorizer()\n    vectorized_data = vectorizer.fit_transform(dataframe['preprocessed_text'])\n\n    # Create a DataFrame from the vectorized data\n    word_count_df = pd.DataFrame(\n        vectorized_data.toarray(),\n        columns=vectorizer.get_feature_names_out()\n    )\n\n    return word_count_df"}
{"task_id": "BigCodeBench/187", "solution": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    # Validate input dictionary\n    if 'Lon' not in dic or 'Lat' not in dic:\n        raise ValueError(\"Dictionary must contain 'Lon' and 'Lat' keys\")\n    if not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"Values for 'Lon' and 'Lat' must be tuples\")\n\n    # Generate random coordinates\n    lon_range, lat_range = dic['Lon'], dic['Lat']\n    coordinates = [Point(np.random.uniform(*lon_range), np.random.uniform(*lat_range)) for _ in cities]\n\n    # Create GeoDataFrame\n    gdf = gpd.GeoDataFrame({'City': cities, 'Coordinates': coordinates}, geometry='Coordinates')\n    \n    return gdf"}
{"task_id": "BigCodeBench/199", "solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    # Input validation\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object\")\n    if not all(isinstance(city, str) for city in cities):\n        raise ValueError(\"All cities must be strings\")\n    if not all(isinstance(condition, str) for condition in weather_conditions):\n        raise ValueError(\"All weather conditions must be strings\")\n    if not isinstance(timezones, dict) or not all(isinstance(city, str) and isinstance(tz, str) for city, tz in timezones.items()):\n        raise ValueError(\"timezones must be a dictionary with string keys and values\")\n    if not isinstance(seed, int):\n        raise ValueError(\"seed must be an integer\")\n\n    # Set random seed for reproducibility\n    set_seed(seed)\n\n    # Create a list to store weather reports\n    weather_reports = []\n\n    # Generate weather report for each city\n    for city in cities:\n        if city not in timezones:\n            raise ValueError(f\"Timezone not specified for city: {city}\")\n\n        # Convert UTC time to local time\n        local_tz = pytz.timezone(timezones[city])\n        local_time = utc_datetime.replace(tzinfo=pytz.UTC).astimezone(local_tz)\n\n        # Generate random weather condition\n        weather = weather_conditions[randint(0, len(weather_conditions) - 1)]\n\n        # Format local time as required\n        formatted_time = local_time.strftime('%Y-%m-%d %H:%M:%S %Z')\n\n        # Add report to the list\n        weather_reports.append({\n            'City': city,\n            'Local Time': formatted_time,\n            'Weather Condition': weather\n        })\n\n    # Create DataFrame from the weather reports\n    df = pd.DataFrame(weather_reports)\n\n    return df"}
{"task_id": "BigCodeBench/208", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(elements, seed=0):\n    # Validate input\n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"elements must be a positive integer\")\n\n    # Set random seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate random steps (-1 or 1)\n    steps = np.random.choice([-1, 1], size=elements)\n\n    # Calculate cumulative sum to get the random walk\n    walk = np.cumsum(steps)\n\n    # Calculate descriptive statistics\n    stats = pd.Series(walk).describe(percentiles=[0.05, 0.25, 0.5, 0.75, 0.95])\n    stats_dict = {\n        'count': int(stats['count']),\n        'mean': stats['mean'],\n        'std': stats['std'],\n        'min': stats['min'],\n        '5th percentile': stats['5%'],\n        '25th percentile': stats['25%'],\n        'median': stats['50%'],\n        '75th percentile': stats['75%'],\n        '95th percentile': stats['95%'],\n        'max': stats['max']\n    }\n\n    # Create plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(walk)\n    ax.set_title('Random Walk')\n    ax.set_xlabel('Steps')\n    ax.set_ylabel('Position')\n    ax.grid(True)\n\n    return stats_dict, ax"}
{"task_id": "BigCodeBench/211", "solution": "import requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n    # Ensure the destination directory exists\n    os.makedirs(destination_directory, exist_ok=True)\n\n    # Download the zip file\n    response = requests.get(url, headers=headers, stream=True)\n    response.raise_for_status()  # Raise an exception for bad status codes\n\n    zip_filename = os.path.join(destination_directory, 'downloaded.zip')\n    with open(zip_filename, 'wb') as f:\n        for chunk in response.iter_content(chunk_size=8192):\n            if chunk:\n                f.write(chunk)\n\n    # Extract the contents of the zip file\n    extracted_files = []\n    with zipfile.ZipFile(zip_filename, 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n        extracted_files = zip_ref.namelist()\n\n    # Return the list of extracted files\n    return extracted_files"}
{"task_id": "BigCodeBench/214", "solution": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    \"\"\"\n    Generate a random RGB image and view it.\n\n    Args:\n        seed (int): Random seed for reproducibility. Default is 42.\n        image_size (tuple): Size of the image (height, width, channels). Default is (100, 100, 3).\n        range_low (int): Lower bound for pixel values. Default is 0.\n        range_high (int): Upper bound for pixel values. Default is 255.\n\n    Returns:\n        ax (matplotlib.axes.Axes): Axes object of the plot.\n        image (numpy.ndarray): The numpy array of the generated image.\n\n    Raises:\n        ValueError: If range_low is not less than range_high.\n    \"\"\"\n    # Check if range_low is less than range_high\n    if range_low >= range_high:\n        raise ValueError(\"range_low must be less than range_high\")\n\n    # Set random seed for reproducibility\n    random.seed(seed)\n    np.random.seed(seed)\n\n    # Generate random RGB image\n    image = np.random.randint(range_low, range_high + 1, size=image_size, dtype=np.uint8)\n\n    # Create figure and axis\n    fig, ax = plt.subplots()\n\n    # Display the image\n    ax.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    ax.axis('off')  # Remove axis ticks and labels\n\n    # Show the plot\n    plt.show()\n\n    return ax, image"}
{"task_id": "BigCodeBench/227", "solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\ndef task_func(L, M, N, audio_file):\n    # Check if the audio file exists\n    if not os.path.exists(audio_file):\n        raise FileNotFoundError(f\"The specified audio file '{audio_file}' does not exist.\")\n\n    # Read the audio file\n    data, sample_rate = sf.read(audio_file)\n\n    # Calculate the sound pressure level (SPL)\n    spl = 20 * np.log10(np.sqrt(np.mean(data**2)))\n\n    # Create the MxN matrix from the list L\n    matrix = np.array(L).reshape(M, N)\n\n    # Normalize the matrix based on the SPL\n    normalized_matrix = matrix / np.max(np.abs(matrix)) * (10**(spl/20))\n\n    # Generate the spectrogram\n    D = librosa.stft(normalized_matrix.flatten())\n    S_db = librosa.amplitude_to_db(np.abs(D), ref=np.max)\n\n    # Create the figure and plot the spectrogram\n    fig, ax = plt.subplots(figsize=(10, 6))\n    img = librosa.display.specshow(S_db, x_axis='time', y_axis='log', ax=ax)\n    \n    # Add colorbar and title\n    fig.colorbar(img, ax=ax, format=\"%+2.0f dB\")\n    ax.set_title('Spectrogram (log frequency scale)')\n\n    return normalized_matrix, fig"}
{"task_id": "BigCodeBench/239", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(original):\n    # Extract numeric values from the list of tuples\n    numeric_values = np.array([value for tup in original for value in tup if isinstance(value, (int, float))])\n\n    # Compute basic statistics\n    statistics = {\n        'mean': np.mean(numeric_values),\n        'standard_deviation': np.std(numeric_values),\n        'minimum': np.min(numeric_values),\n        'maximum': np.max(numeric_values)\n    }\n\n    # Generate histogram with overlaid PDF\n    fig, ax = plt.subplots()\n    \n    # Plot histogram\n    ax.hist(numeric_values, density=True, alpha=0.6, bins='auto', edgecolor='black')\n    \n    # Calculate and plot PDF\n    x = np.linspace(np.min(numeric_values), np.max(numeric_values), 100)\n    kde = stats.gaussian_kde(numeric_values)\n    ax.plot(x, kde(x), 'r-', linewidth=2, label='PDF')\n    \n    # Customize plot\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Density')\n    ax.set_title('Histogram with Overlaid PDF')\n    ax.legend()\n\n    return numeric_values, statistics, ax"}
{"task_id": "BigCodeBench/241", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n    # Convert the original list to a numpy array\n    original_array = np.array(original)\n    \n    # Normalize the array\n    normalized_array = preprocessing.normalize(original_array.reshape(1, -1))[0]\n    \n    # Create a figure and axis\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Plot the original array\n    ax.plot(original_array, label='Original', marker='o')\n    \n    # Plot the normalized array\n    ax.plot(normalized_array, label='Normalized', marker='s')\n    \n    # Customize the plot\n    ax.set_title('Original vs Normalized Arrays')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.legend()\n    ax.grid(True, linestyle='--', alpha=0.7)\n    \n    # Adjust y-axis to show both plots clearly\n    ax.set_ylim([min(original_array.min(), normalized_array.min()) - 0.1,\n                 max(original_array.max(), normalized_array.max()) + 0.1])\n    \n    # Show the plot\n    plt.tight_layout()\n    plt.show()\n    \n    return original_array, normalized_array, ax"}
{"task_id": "BigCodeBench/267", "solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\ndef task_func(data, sample_rate=8000):\n    # 1. Add a new key \"a\" with the value 1 to the dictionary\n    data['a'] = 1\n\n    # 2. Generate a signal based on the values in \"data\"\n    signal = np.array(list(data.values()))\n\n    # 3. Run a Fast Fourier Transform (FFT) on the signal\n    fft_result = fftpack.fft(signal)\n\n    # 4. Plot the FFT of the signal\n    frequencies = fftpack.fftfreq(len(signal), d=1/sample_rate)\n    magnitude = np.abs(fft_result)\n\n    fig, ax = plt.subplots()\n    ax.plot(frequencies, magnitude)\n    ax.set_xlabel('Frequency (Hz)')\n    ax.set_ylabel('Magnitude')\n    ax.set_title('FFT of the Signal')\n    ax.grid(True)\n\n    # Adjust x-axis to show only positive frequencies\n    ax.set_xlim(0, sample_rate / 2)\n\n    # Return the FFT result and the plot axes\n    return fft_result, ax"}
{"task_id": "BigCodeBench/273", "solution": "import cgi\nimport http.server\nimport json\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\ndef task_func():\n    class RequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_length = int(self.headers.get('Content-Length', 0))\n            content_type = self.headers.get('Content-Type', '')\n\n            if content_type != 'application/json':\n                self.send_error_response('Content-Type header is not application/json')\n                return\n\n            try:\n                post_data = self.rfile.read(content_length).decode('utf-8')\n                json_data = json.loads(post_data)\n            except json.JSONDecodeError:\n                self.send_error_response('Invalid JSON')\n                return\n\n            if 'data' not in json_data:\n                self.send_error_response('No data key in request')\n                return\n\n            self.send_success_response()\n\n        def send_error_response(self, message):\n            self.send_response(400)\n            self.send_header('Content-Type', 'application/json')\n            response = json.dumps({'status': 'error', 'message': message})\n            self.send_header('Content-Length', str(len(response)))\n            self.end_headers()\n            self.wfile.write(response.encode('utf-8'))\n\n        def send_success_response(self):\n            self.send_response(200)\n            self.send_header('Content-Type', 'application/json')\n            response = json.dumps(SUCCESS_RESPONSE)\n            self.send_header('Content-Length', str(len(response)))\n            self.end_headers()\n            self.wfile.write(response.encode('utf-8'))\n\n    return RequestHandler"}
{"task_id": "BigCodeBench/274", "solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    class EmailRequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            try:\n                # Parse the POST data\n                content_length = int(self.headers['Content-Length'])\n                post_data = self.rfile.read(content_length)\n                \n                # Decode JSON data\n                try:\n                    data = json.loads(post_data.decode('utf-8'))\n                except json.JSONDecodeError:\n                    raise ValueError(\"Invalid JSON data\")\n                \n                # Check for required keys\n                required_keys = ['subject', 'message', 'to']\n                if not all(key in data for key in required_keys):\n                    raise ValueError(\"Missing required keys in JSON data\")\n                \n                # Prepare email\n                msg = MIMEText(data['message'])\n                msg['Subject'] = data['subject']\n                msg['From'] = smtp_username\n                msg['To'] = data['to']\n                \n                # Send email\n                try:\n                    with smtplib.SMTP(smtp_server, smtp_port) as server:\n                        server.starttls()\n                        server.login(smtp_username, smtp_password)\n                        server.sendmail(smtp_username, [data['to']], msg.as_string())\n                except smtplib.SMTPAuthenticationError:\n                    self.send_error(535, \"Authentication Failed\")\n                    return\n                \n                # Send a success response\n                response = \"Email sent successfully\"\n                self.send_response(200)\n                self.send_header('Content-type', 'text/plain')\n                self.send_header('Content-length', len(response))\n                self.end_headers()\n                self.wfile.write(response.encode('utf-8'))\n                \n            except ValueError as e:\n                self.send_error(400, str(e))\n\n    return EmailRequestHandler"}
{"task_id": "BigCodeBench/287", "solution": "from collections import Counter\nimport os\nimport json\ndef task_func(filename, directory):\n    word_counts = Counter()\n    total_words = 0\n\n    # Iterate through all files in the directory and its subdirectories\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.txt'):\n                file_path = os.path.join(root, file)\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n                    words = content.split()\n                    word_count = len(words)\n                    word_counts[file] = word_count\n                    total_words += word_count\n\n    # Export word counts to JSON file\n    with open(filename, 'w', encoding='utf-8') as f:\n        json.dump(dict(word_counts), f, indent=4)\n\n    return total_words"}
{"task_id": "BigCodeBench/302", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df, plot=False):\n    # Check if DataFrame is empty or has invalid 'Value' column\n    if df.empty or 'Value' not in df.columns:\n        raise ValueError(\"The DataFrame is empty or missing the 'Value' column.\")\n    \n    if not all(isinstance(val, list) for val in df['Value']):\n        raise ValueError(\"The 'Value' column contains invalid data. All entries must be lists.\")\n\n    # Split lists in 'Value' column into separate columns\n    max_list_length = max(len(val) for val in df['Value'])\n    for i in range(max_list_length):\n        df[f'Value_{i+1}'] = df['Value'].apply(lambda x: x[i] if i < len(x) else None)\n    \n    # Drop original 'Value' column and calculate correlation\n    df_numeric = df.drop(columns=['Date', 'Value'])\n    correlation_matrix = df_numeric.corr(method='pearson')\n\n    if plot:\n        fig, ax = plt.subplots(figsize=(10, 8))\n        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', ax=ax)\n        ax.set_title(\"Correlation Heatmap\")\n        plt.tight_layout()\n        \n        return correlation_matrix, ax\n    \n    return correlation_matrix"}
{"task_id": "BigCodeBench/308", "solution": "import pandas as pd\nfrom statistics import mean\nimport random\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\ndef task_func(additional_fields=[]):\n    # Combine predefined fields with additional fields\n    all_fields = FIELDS + additional_fields\n    \n    # Generate random grades for each student in each subject\n    grades = {student: {field: random.randint(0, 100) for field in all_fields} for student in STUDENTS}\n    \n    # Create DataFrame from the grades dictionary\n    df = pd.DataFrame.from_dict(grades, orient='index')\n    \n    # Calculate average grade for each student\n    df['Average Grade'] = df.mean(axis=1)\n    \n    # Calculate average grade for each subject\n    subject_averages = df.mean()\n    df.loc['Average'] = subject_averages\n    \n    # Ensure 'Average Grade' column is at the end\n    avg_grade_col = df.pop('Average Grade')\n    df.insert(len(df.columns), 'Average Grade', avg_grade_col)\n    \n    return df"}
{"task_id": "BigCodeBench/310", "solution": "import os\nimport csv\nimport random\nfrom statistics import mean\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n    # Generate simulated data\n    data = []\n    for i in range(PEOPLE_COUNT):\n        name = f\"Person{i+1}\"\n        age = random.randint(18, 80)\n        height = round(random.uniform(150, 200), 1)  # in cm\n        weight = round(random.uniform(45, 120), 1)  # in kg\n        data.append([name, age, height, weight])\n    \n    # Calculate averages\n    ages = [row[1] for row in data]\n    heights = [row[2] for row in data]\n    weights = [row[3] for row in data]\n    \n    avg_age = round(mean(ages), 1)\n    avg_height = round(mean(heights), 1)\n    avg_weight = round(mean(weights), 1)\n    \n    # Append averages to the data\n    data.append([\"Average\", avg_age, avg_height, avg_weight])\n    \n    # Write data to CSV file\n    with open(filename, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(COLUMNS)\n        writer.writerows(data)\n    \n    # Return the absolute path of the created CSV file\n    return os.path.abspath(filename)"}
{"task_id": "BigCodeBench/313", "solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n    # Dictionary to store subdirectories and their files\n    organized_files = {}\n    \n    # Regex pattern to match text not in square brackets at the start of filename\n    pattern = re.compile(r'^([^[\\]]+)')\n    \n    # Iterate through files in the directory\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        \n        # Skip if not a file\n        if not os.path.isfile(file_path):\n            continue\n        \n        # Find the first text not in square brackets\n        match = pattern.match(filename)\n        if match:\n            subdir_name = match.group(1).strip()\n            subdir_path = os.path.join(directory, subdir_name)\n            \n            # Create subdirectory if it doesn't exist\n            if not os.path.exists(subdir_path):\n                os.makedirs(subdir_path)\n            \n            # Move file to subdirectory\n            new_file_path = os.path.join(subdir_path, filename)\n            shutil.move(file_path, new_file_path)\n            \n            # Add file to organized_files dictionary\n            if subdir_name not in organized_files:\n                organized_files[subdir_name] = []\n            organized_files[subdir_name].append(filename)\n    \n    return directory, organized_files"}
{"task_id": "BigCodeBench/324", "solution": "import subprocess\nimport time\nimport threading\ndef task_func(file_list):\n    exit_codes = []\n    threads = []\n    \n    def run_subprocess(file):\n        process = subprocess.Popen(['python', file], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        process.wait()\n        exit_codes.append(process.returncode)\n    \n    for file in file_list:\n        thread = threading.Thread(target=run_subprocess, args=(file,))\n        threads.append(thread)\n        thread.start()\n    \n    for thread in threads:\n        thread.join()\n    \n    return exit_codes"}
{"task_id": "BigCodeBench/326", "solution": "import subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n    results = []\n    \n    # Ensure the directory path exists\n    if not os.path.isdir(directory_path):\n        print(f\"Error: '{directory_path}' is not a valid directory.\", file=sys.stderr)\n        return results\n    \n    # Find all .bat files in the given directory\n    bat_files = glob.glob(os.path.join(directory_path, '*.bat'))\n    \n    for bat_file in bat_files:\n        file_name = os.path.basename(bat_file)\n        try:\n            # Run the .bat file and capture the exit code\n            process = subprocess.run([bat_file], shell=True, check=False, capture_output=True)\n            exit_code = process.returncode\n        except Exception as e:\n            print(f\"Error executing '{file_name}': {str(e)}\", file=sys.stderr)\n            exit_code = None\n        \n        results.append((file_name, exit_code))\n    \n    return results"}
{"task_id": "BigCodeBench/341", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, col):\n    # Input validation\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be DataFrame\")\n    if df.empty:\n        raise ValueError(\"The input df must not be empty\")\n    if col not in df.columns:\n        raise ValueError(f\"The input df must contain the specified column '{col}'\")\n\n    # Create figure with two subplots\n    fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\n\n    # Histogram with kernel density estimate\n    sns.histplot(data=df, x=col, kde=True, ax=ax1)\n    ax1.set_title(f\"Histogram of {col} with KDE\")\n    ax1.set_xlabel(col)\n    ax1.set_ylabel(\"Frequency\")\n\n    # Box plot\n    sns.boxplot(data=df, x=col, ax=ax2)\n    ax2.set_title(f\"Box Plot of {col}\")\n    ax2.set_xlabel(col)\n\n    # Adjust layout\n    plt.tight_layout()\n\n    return fig"}
{"task_id": "BigCodeBench/346", "solution": "import subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run a Python script as a process with predefined arguments.\n\n    Args:\n        script_path (str): Path to the Python script to run.\n        wait (bool): Whether to wait for the process to complete. Defaults to True.\n        *args: Variable length argument list for script arguments.\n\n    Returns:\n        int: The return code of the subprocess if wait is True.\n        None: If wait is False.\n\n    Raises:\n        ValueError: If the script does not exist.\n        subprocess.CalledProcessError: If the script raises an exception.\n    \"\"\"\n    if not os.path.isfile(script_path):\n        raise ValueError(f\"The script '{script_path}' does not exist.\")\n\n    command = [sys.executable, script_path] + list(args)\n\n    try:\n        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        \n        if wait:\n            stdout, stderr = process.communicate()\n            if process.returncode != 0:\n                raise subprocess.CalledProcessError(process.returncode, command, output=stdout, stderr=stderr)\n            return process.returncode\n        else:\n            return None\n    except subprocess.CalledProcessError as e:\n        raise e"}
{"task_id": "BigCodeBench/360", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_location, sheet_name):\n    # Check if the file exists\n    if not os.path.exists(file_location):\n        raise FileNotFoundError(f\"The Excel file does not exist at the specified path: {file_location}\")\n\n    # Load the data from the specified sheet\n    try:\n        df = pd.read_excel(file_location, sheet_name=sheet_name)\n    except ValueError:\n        raise ValueError(f\"The specified sheet '{sheet_name}' does not exist in the workbook.\")\n\n    # Calculate the mean and standard deviation of each column\n    stats = {}\n    for column in df.columns:\n        stats[column] = {\n            'mean': df[column].mean(),\n            'std': df[column].std()\n        }\n\n    # Create a bar chart\n    fig, ax = plt.subplots(figsize=(10, 6))\n    x = np.arange(len(stats))\n    width = 0.35\n\n    means = [stat['mean'] for stat in stats.values()]\n    stds = [stat['std'] for stat in stats.values()]\n\n    ax.bar(x - width/2, means, width, label='Mean', color='skyblue')\n    ax.bar(x + width/2, stds, width, label='Standard Deviation', color='lightgreen')\n\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Values')\n    ax.set_title('Mean and Standard Deviation')\n    ax.set_xticks(x)\n    ax.set_xticklabels(stats.keys(), rotation=45, ha='right')\n    ax.legend()\n\n    plt.tight_layout()\n\n    return stats, fig"}
{"task_id": "BigCodeBench/367", "solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(activities):\n    if not all(isinstance(activity, datetime) for activity in activities):\n        raise TypeError(\"If the activities are not datetime objects.\")\n\n    day_counts = defaultdict(int)\n    for activity in activities:\n        day_counts[activity.strftime('%A')] += 1\n\n    days_of_week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    counts = [day_counts[day] for day in days_of_week]\n\n    fig, ax = plt.subplots()\n    ax.bar(days_of_week, counts)\n    ax.set_xlabel('Day of the Week')\n    ax.set_ylabel('Number of Activities')\n    ax.set_title('Weekly Activity')\n\n    return ax"}
{"task_id": "BigCodeBench/368", "solution": "import os\nimport shutil\nimport random\ndef task_func(src_dir: str, dest_dir: str, seed: int = 100) -> str:\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Ensure source directory exists\n    if not os.path.isdir(src_dir):\n        raise ValueError(f\"Source directory '{src_dir}' does not exist.\")\n    \n    # Create destination directory if it doesn't exist\n    os.makedirs(dest_dir, exist_ok=True)\n    \n    # Get list of files in source directory\n    files = [f for f in os.listdir(src_dir) if os.path.isfile(os.path.join(src_dir, f))]\n    \n    # Check if there are any files to move\n    if not files:\n        raise ValueError(f\"No files found in source directory '{src_dir}'.\")\n    \n    # Select a random file\n    file_to_move = random.choice(files)\n    \n    # Construct full paths\n    src_path = os.path.join(src_dir, file_to_move)\n    dest_path = os.path.join(dest_dir, file_to_move)\n    \n    # Move the file\n    shutil.move(src_path, dest_path)\n    \n    return file_to_move"}
{"task_id": "BigCodeBench/374", "solution": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n    # Ensure the directory path ends with a slash\n    directory_path = os.path.join(directory_path, '')\n    \n    # Get all Excel files in the specified directory\n    excel_files = glob.glob(os.path.join(directory_path, '*.xlsx'))\n    \n    files_processed = 0\n    \n    for file_path in excel_files:\n        workbook = load_workbook(file_path)\n        \n        for sheet in workbook.worksheets:\n            for row in sheet.iter_rows():\n                for cell in row:\n                    if isinstance(cell.value, str):\n                        # Replace double quotes with escaped double quotes\n                        cell.value = re.sub(r'\"', r'\\\\\"', cell.value)\n        \n        # Save the modified workbook\n        workbook.save(file_path)\n        files_processed += 1\n    \n    return files_processed"}
{"task_id": "BigCodeBench/399", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n    \"\"\"\n    Create a diagram of a sine wave and cosine wave with a given frequency and return the plot.\n\n    Args:\n    frequency (float): The frequency of the waves.\n    sample_size (int, optional): The number of points to sample. Defaults to 10000.\n\n    Returns:\n    tuple: (matplotlib.figure.Figure, matplotlib.axes.Axes) The figure and axes objects of the plot.\n\n    Raises:\n    ValueError: If the frequency is negative or if the sample size is non-positive.\n    \"\"\"\n    if frequency < 0:\n        raise ValueError(\"Frequency cannot be negative.\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive.\")\n\n    # Generate time points\n    t = np.linspace(0, 2*np.pi, sample_size)\n\n    # Calculate sine and cosine waves\n    sine_wave = np.sin(frequency * t)\n    cosine_wave = np.cos(frequency * t)\n\n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(t, sine_wave, label='Sine Wave')\n    ax.plot(t, cosine_wave, label='Cosine Wave')\n\n    # Set labels and title\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.set_title(f'Sine and Cosine Waves (Frequency: {frequency} Hz)')\n\n    # Add legend and grid\n    ax.legend()\n    ax.grid(True)\n\n    # Set y-axis limits to show full waves\n    ax.set_ylim(-1.1, 1.1)\n\n    return fig, ax"}
{"task_id": "BigCodeBench/401", "solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\ndef task_func(app_name):\n    app = Flask(app_name)\n\n    # Retrieve email server details from environment variables or use defaults\n    mail_config = {\n        'MAIL_SERVER': os.getenv('MAIL_SERVER', 'localhost'),\n        'MAIL_PORT': int(os.getenv('MAIL_PORT', 25)),\n        'MAIL_USE_TLS': os.getenv('MAIL_USE_TLS', '').lower() in ('true', '1', 'yes'),\n        'MAIL_USERNAME': os.getenv('MAIL_USERNAME'),\n        'MAIL_PASSWORD': os.getenv('MAIL_PASSWORD')\n    }\n\n    # Configure the Flask app with mail settings\n    app.config.update(mail_config)\n\n    # Initialize Flask-Mail\n    mail = Mail(app)\n\n    return mail, mail_config"}
{"task_id": "BigCodeBench/409", "solution": "import os\nimport pandas as pd\nimport numpy as np\ndef task_func(excel_file_path, file_name, column_name):\n    # Construct the full path to the Excel file\n    full_path = os.path.join(excel_file_path, file_name)\n    \n    # Check if the file exists\n    if not os.path.exists(full_path):\n        raise FileNotFoundError(f\"The file '{full_path}' does not exist.\")\n    \n    try:\n        # Load the Excel file into a DataFrame\n        df = pd.read_excel(full_path)\n    except Exception as e:\n        raise FileNotFoundError(f\"Error reading the Excel file: {str(e)}\")\n    \n    # Check if the specified column exists in the DataFrame\n    if column_name not in df.columns:\n        raise ValueError(f\"The column '{column_name}' was not found in the Excel file.\")\n    \n    # Extract the data from the specified column\n    data = df[column_name]\n    \n    # Calculate the mean, median, and standard deviation\n    mean_val = np.mean(data)\n    median_val = np.median(data)\n    std_dev = np.std(data)\n    \n    # Return the results in a dictionary\n    return {\n        'mean': mean_val,\n        'median': median_val,\n        'standard_deviation': std_dev\n    }"}
{"task_id": "BigCodeBench/417", "solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\ndef task_func(X, Y):\n    # Ensure input dimension is 2\n    if X.shape[1] != 2:\n        raise ValueError(\"Input dimension of X must be 2.\")\n\n    # Split the data into training (75%) and test (25%) sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n\n    # Construct the Sequential model\n    model = Sequential([\n        Dense(1, input_dim=2, activation='sigmoid')\n    ])\n\n    # Compile the model\n    optimizer = SGD(learning_rate=0.01)\n    model.compile(loss='binary_crossentropy', optimizer=optimizer)\n\n    # Fit the model to the training data, evaluating on the test set\n    history = model.fit(\n        X_train, Y_train,\n        epochs=100,\n        verbose=0,\n        validation_data=(X_test, Y_test)\n    )\n\n    # Plot the model's training and validation loss\n    fig, ax = plt.subplots()\n    ax.plot(history.history['loss'], label='Train')\n    ax.plot(history.history['val_loss'], label='Test')\n    ax.set_title('Model loss')\n    ax.set_xlabel('Epoch')\n    ax.set_ylabel('Loss')\n    ax.legend()\n\n    return model, ax"}
{"task_id": "BigCodeBench/418", "solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n    # Split the data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    # Create a Keras Sequential model with one hidden layer\n    model = keras.models.Sequential([\n        keras.layers.Dense(64, activation='sigmoid', input_shape=(X_train.shape[1],)),\n        keras.layers.Dense(1, activation='sigmoid')\n    ])\n\n    # Compile the model\n    optimizer = keras.optimizers.SGD(learning_rate=0.01)\n    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n\n    # Fit the model to the training data\n    model.fit(X_train, Y_train, epochs=50, batch_size=32, verbose=0)\n\n    # Predict probabilities for the test set\n    Y_pred = model.predict(X_test)\n\n    # Compute ROC curve and AUC\n    fpr, tpr, _ = roc_curve(Y_test, Y_pred)\n    roc_auc = auc(fpr, tpr)\n\n    # Plot the ROC curve\n    fig, ax = plt.subplots()\n    ax.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {roc_auc:.2f})')\n    ax.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    ax.set_xlim([0.0, 1.0])\n    ax.set_ylim([0.0, 1.05])\n    ax.set_xlabel('False positive rate')\n    ax.set_ylabel('True positive rate')\n    ax.set_title('ROC curve')\n    ax.legend(loc=\"lower right\")\n\n    return model, ax"}
{"task_id": "BigCodeBench/424", "solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    # Check if the image file exists\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"The image file does not exist at the specified path: {image_path}\")\n    \n    # Check if n_clusters is a positive integer\n    if not isinstance(n_clusters, int) or n_clusters <= 0:\n        raise ValueError(\"n_clusters must be a positive integer\")\n    \n    # Read the image\n    original_image = cv2.imread(image_path)\n    if original_image is None:\n        raise FileNotFoundError(f\"Failed to read the image at the specified path: {image_path}\")\n    \n    # Convert the image from BGR to RGB\n    original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)\n    \n    # Reshape the image to a 2D array of pixels\n    pixels = original_image.reshape((-1, 3))\n    \n    # Apply K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed)\n    kmeans.fit(pixels)\n    \n    # Get the cluster labels and centroids\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n    \n    # Create the segmented image\n    segmented_image = centroids[labels].reshape(original_image.shape).astype(np.uint8)\n    \n    # Save each region as a separate image\n    for i in range(n_clusters):\n        mask = labels == i\n        region = np.zeros_like(original_image)\n        region[mask.reshape(original_image.shape[:2])] = original_image[mask.reshape(original_image.shape[:2])]\n        cv2.imwrite(f'region_{i}.png', cv2.cvtColor(region, cv2.COLOR_RGB2BGR))\n    \n    return original_image, segmented_image"}
{"task_id": "BigCodeBench/443", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    # Calculate the product of P and T\n    product = np.einsum('ij,jkl->ikl', P, T)\n    \n    # Flatten the result\n    flattened_data = product.reshape(-1, product.shape[-1])\n    \n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    cluster_result = kmeans.fit_predict(flattened_data)\n    \n    # Visualize the clustering result\n    fig, ax = plt.subplots(figsize=(10, 6))\n    scatter = ax.scatter(flattened_data[:, 0], flattened_data[:, 1], \n                         c=cluster_result, cmap='viridis', alpha=0.7)\n    \n    # Add a colorbar\n    plt.colorbar(scatter, ax=ax, label='Cluster')\n    \n    # Set title and labels\n    ax.set_title('KMeans Clustering Visualization')\n    ax.set_xlabel('Feature 1')\n    ax.set_ylabel('Feature 2')\n    \n    return cluster_result, ax"}
{"task_id": "BigCodeBench/445", "solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\ndef task_func(points, seed=0):\n    # Input validation\n    if not isinstance(points, np.ndarray):\n        raise TypeError(\"Input 'points' must be a numpy array\")\n    if points.ndim != 2 or points.shape[1] != 2:\n        raise ValueError(\"Input 'points' must have shape (n, 2)\")\n\n    # Apply jittering\n    np.random.seed(seed)\n    jitter = np.random.normal(0, 1e-10, points.shape)\n    jittered_points = points + jitter\n\n    # Calculate Voronoi diagram\n    vor = Voronoi(jittered_points)\n\n    # Plot Voronoi diagram\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax, show_points=True, show_vertices=False, line_colors='black', point_size=5)\n\n    # Customize plot\n    ax.set_aspect('equal')\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.set_title('Voronoi Diagram')\n\n    # Set plot limits with some padding\n    padding = 0.1\n    x_min, x_max = points[:, 0].min(), points[:, 0].max()\n    y_min, y_max = points[:, 1].min(), points[:, 1].max()\n    x_range = x_max - x_min\n    y_range = y_max - y_min\n    ax.set_xlim(x_min - padding * x_range, x_max + padding * x_range)\n    ax.set_ylim(y_min - padding * y_range, y_max + padding * y_range)\n\n    return vor, ax"}
{"task_id": "BigCodeBench/454", "solution": "import os\nimport shutil\nimport glob\ndef task_func(src_dir, dest_dir, ext):\n    \"\"\"\n    Moves files with a specified extension from a source directory to a destination directory.\n\n    Args:\n        src_dir (str): Path to the source directory.\n        dest_dir (str): Path to the destination directory.\n        ext (str): File extension to match (including the dot, e.g., '.txt').\n\n    Returns:\n        list: A list of full paths of files that were successfully moved.\n\n    Raises:\n        FileNotFoundError: If either the source or destination directory does not exist.\n    \"\"\"\n    # Check if source and destination directories exist\n    if not os.path.isdir(src_dir):\n        raise FileNotFoundError(f\"Source directory does not exist: {src_dir}\")\n    if not os.path.isdir(dest_dir):\n        raise FileNotFoundError(f\"Destination directory does not exist: {dest_dir}\")\n\n    moved_files = []\n    \n    # Find all files with the specified extension in the source directory\n    for file_path in glob.glob(os.path.join(src_dir, f\"*{ext}\")):\n        file_name = os.path.basename(file_path)\n        dest_file_path = os.path.join(dest_dir, file_name)\n        \n        # Check if the file already exists in the destination directory\n        if not os.path.exists(dest_file_path):\n            # Move the file\n            shutil.move(file_path, dest_file_path)\n            moved_files.append(dest_file_path)\n\n    return moved_files"}
{"task_id": "BigCodeBench/458", "solution": "import json\nimport re\nimport pandas as pd\ndef task_func(json_str):\n    if not json_str:\n        return pd.DataFrame()\n\n    try:\n        data = json.loads(json_str)\n    except json.JSONDecodeError:\n        return pd.DataFrame()\n\n    def normalize_value(value):\n        if isinstance(value, (int, float)):\n            return float(value) * 2\n        elif isinstance(value, list):\n            return [normalize_value(v) for v in value]\n        elif isinstance(value, str):\n            try:\n                return float(re.findall(r'-?\\d+\\.?\\d*', value)[0]) * 2\n            except (IndexError, ValueError):\n                return value\n        else:\n            return value\n\n    normalized_data = {k: normalize_value(v) for k, v in data.items()}\n\n    try:\n        df = pd.DataFrame([normalized_data])\n    except ValueError:\n        return pd.DataFrame()\n\n    return df"}
{"task_id": "BigCodeBench/461", "solution": "import subprocess\nimport psutil\nimport time\nimport os\ndef task_func(script_path: str, timeout=10) -> dict:\n    if not os.path.exists(script_path):\n        raise FileNotFoundError(f\"Script path '{script_path}' does not exist\")\n\n    process = subprocess.Popen(['bash', script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    \n    cpu_usage = 0.0\n    memory_usage = 0\n    start_time = time.time()\n    \n    try:\n        p = psutil.Process(process.pid)\n        while process.poll() is None:\n            if time.time() - start_time > timeout:\n                process.terminate()\n                raise TimeoutError(f\"Script execution timed out after {timeout} seconds\")\n            \n            try:\n                cpu_usage += p.cpu_percent(interval=0.1)\n                memory_usage += p.memory_info().rss\n            except (psutil.NoSuchProcess, psutil.ZombieProcess):\n                break\n            \n            time.sleep(0.1)\n    \n    except Exception as e:\n        process.terminate()\n        raise e\n    \n    finally:\n        if process.poll() is None:\n            process.terminate()\n        process.wait()\n    \n    return {\n        'CPU Usage': cpu_usage,\n        'Memory Usage': memory_usage\n    }"}
{"task_id": "BigCodeBench/477", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    np.random.seed(seed)\n    \n    # Generate random values for x and y\n    x = np.random.rand(N)\n    y = np.random.rand(N)\n    \n    # Generate categories\n    if N >= len(CATEGORIES):\n        # Ensure each category appears at least once\n        categories = np.array(CATEGORIES + list(np.random.choice(CATEGORIES, N - len(CATEGORIES))))\n        np.random.shuffle(categories)\n    else:\n        categories = np.random.choice(CATEGORIES, N, replace=False)\n    \n    # Create DataFrame\n    df = pd.DataFrame({'x': x, 'y': y, 'category': categories})\n    \n    # Create scatter plot\n    fig, ax = plt.subplots()\n    for category in CATEGORIES:\n        subset = df[df['category'] == category]\n        ax.scatter(subset['x'], subset['y'], label=category, alpha=0.7)\n    \n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Scatter plot of x vs y, colored by category')\n    ax.legend()\n    \n    return df, ax"}
{"task_id": "BigCodeBench/486", "solution": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_time, end_time, step, trend, seed=42):\n    # Set random seed for reproducibility\n    np.random.seed(seed)\n    \n    # Convert start_time and end_time to datetime objects if they're strings\n    if isinstance(start_time, str):\n        start_time = datetime.fromisoformat(start_time)\n    if isinstance(end_time, str):\n        end_time = datetime.fromisoformat(end_time)\n    \n    # Generate time range\n    time_range = pd.date_range(start=start_time, end=end_time, freq=step)\n    \n    # Generate values from normal distribution\n    values = np.random.normal(loc=0, scale=1, size=len(time_range))\n    \n    # Add linear trend\n    trend_component = np.arange(len(time_range)) * trend\n    values += trend_component\n    \n    # Create DataFrame\n    df = pd.DataFrame({'Time': time_range, 'Value': values})\n    \n    # Create plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(df['Time'], df['Value'])\n    \n    # Set labels\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Value')\n    \n    # Format x-axis\n    ax.tick_params(axis='x', rotation=45)\n    fig.tight_layout()\n    \n    return ax"}
{"task_id": "BigCodeBench/492", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nimport random\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    # Input validation\n    if not isinstance(epoch_milliseconds, int) or epoch_milliseconds < 0:\n        raise ValueError(\"epoch_milliseconds must be a non-negative integer\")\n    if not isinstance(random_seed, int):\n        raise ValueError(\"random_seed must be an integer\")\n    if not isinstance(products, list) or len(products) != 5:\n        raise ValueError(\"products must be a list of 5 strings\")\n    \n    # Set random seed for reproducibility\n    random.seed(random_seed)\n    \n    # Convert epoch milliseconds to datetime\n    start_date = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n    end_date = datetime.now()\n    \n    # Generate sales data\n    data = []\n    current_date = start_date\n    while current_date <= end_date:\n        for product in products:\n            sales = random.randint(10, 50)\n            data.append({\n                'Product': product,\n                'Date': current_date,\n                'Sales': sales\n            })\n        current_date += timedelta(days=1)\n    \n    # Create DataFrame\n    df = pd.DataFrame(data)\n    \n    return df"}
{"task_id": "BigCodeBench/501", "solution": "import xlwt\nimport os\nimport pandas as pd\nimport json\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    # Validate input type\n    if not isinstance(json_str, (str, bytes, bytearray)):\n        raise TypeError(\"json_str must be a string, bytes, or bytearray\")\n    \n    # Parse JSON\n    try:\n        data = json.loads(json_str)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string\")\n    \n    # Create DataFrame\n    df = pd.DataFrame(data)\n    \n    # Create Excel file\n    wb = xlwt.Workbook()\n    ws = wb.add_sheet(sheet_name)\n    \n    # Write headers if DataFrame is not empty\n    if not df.empty:\n        for col, header in enumerate(df.columns):\n            ws.write(0, col, header)\n    \n    # Write data if DataFrame is not empty\n    for row, series in enumerate(df.itertuples(index=False), start=1):\n        for col, value in enumerate(series):\n            ws.write(row, col, value)\n    \n    # Save Excel file\n    try:\n        wb.save(filename)\n    except Exception as e:\n        raise Exception(f\"Error writing to file: {str(e)}\")\n    \n    # Return absolute path\n    return os.path.abspath(filename)"}
{"task_id": "BigCodeBench/502", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(days_in_past=7, random_seed=0):\n    # Set random seed for reproducibility\n    random.seed(random_seed)\n    \n    # Define activities\n    activities = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n    \n    # Generate date range\n    end_date = datetime.now().date()\n    start_date = end_date - timedelta(days=days_in_past-1)\n    date_range = pd.date_range(start=start_date, end=end_date)\n    \n    # Generate data\n    data = []\n    for date in date_range:\n        for activity in activities:\n            duration = random.randint(0, 120)\n            data.append({'Date': date, 'Activity': activity, 'Duration': duration})\n    \n    # Create DataFrame\n    df = pd.DataFrame(data)\n    \n    # Create plot\n    plt.figure(figsize=(12, 6))\n    ax = sns.lineplot(data=df, x='Date', y='Duration', hue='Activity', marker='o')\n    \n    # Customize plot\n    ax.set_title('Daily Activity Durations')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Duration (minutes)')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    return ax, df"}
{"task_id": "BigCodeBench/503", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    # Set random seed for reproducibility\n    np.random.seed(random_seed)\n    \n    # Generate date range\n    end_date = datetime.now().date()\n    start_date = end_date - timedelta(days=days_in_past - 1)\n    date_range = pd.date_range(start=start_date, end=end_date)\n    \n    # Generate random stock prices\n    prices = np.random.rand(days_in_past, len(stock_names))\n    \n    # Create DataFrame\n    df = pd.DataFrame(prices, columns=stock_names, index=date_range)\n    \n    return df"}
{"task_id": "BigCodeBench/509", "solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    try:\n        # Read the contents of both files\n        with open(file_path1, 'r', newline='') as file1, open(file_path2, 'r', newline='') as file2:\n            reader1 = csv.reader(file1, delimiter=delimiter, quotechar=quotechar)\n            reader2 = csv.reader(file2, delimiter=delimiter, quotechar=quotechar)\n            \n            lines1 = [delimiter.join(row) for row in reader1]\n            lines2 = [delimiter.join(row) for row in reader2]\n        \n        # Check if either file is empty\n        if not lines1:\n            raise ValueError(f\"File '{file_path1}' is empty.\")\n        if not lines2:\n            raise ValueError(f\"File '{file_path2}' is empty.\")\n        \n        # Generate the differences using ndiff\n        diff = list(ndiff(lines1, lines2))\n        \n        # Prepare the DataFrame\n        data = []\n        line_number = 0\n        for line in diff:\n            status = line[0]\n            content = line[2:]\n            if status in [' ', '-']:\n                line_number += 1\n            if status != '?':  # Ignore lines starting with '?'\n                data.append([line_number, status, content])\n        \n        # Create and return the DataFrame\n        df = pd.DataFrame(data, columns=['Line Number', 'Status', 'Content'])\n        return df\n    \n    except FileNotFoundError as e:\n        raise FileNotFoundError(f\"File not found: {e.filename}\")\n    except ValueError as e:\n        raise ValueError(str(e))\n    except Exception as e:\n        raise Exception(f\"An error occurred: {str(e)}\")"}
{"task_id": "BigCodeBench/511", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    # Create DataFrame from the input data\n    df = pd.DataFrame(data)\n    \n    # Initialize the stats dictionary\n    stats = {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}\n    \n    # Check if the DataFrame is empty or if the column doesn't exist\n    if not df.empty and column in df.columns:\n        stats['sum'] = df[column].sum()\n        stats['mean'] = df[column].mean()\n        stats['min'] = df[column].min()\n        stats['max'] = df[column].max()\n    \n    # Create the pie chart\n    fig, ax = plt.subplots()\n    \n    if 'Age' in df.columns and not df['Age'].empty:\n        age_counts = df['Age'].value_counts()\n        ax.pie(age_counts.values, labels=age_counts.index, autopct='%1.1f%%')\n        ax.set_title('Age Distribution')\n    else:\n        ax.pie([1], labels=['No Data'], autopct='%1.1f%%')\n        ax.set_title('No Age Data Available')\n    \n    ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle\n    \n    return stats, ax"}
{"task_id": "BigCodeBench/513", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    # Convert data to DataFrame\n    df = pd.DataFrame(data)\n    \n    # Check if data is empty\n    if df.empty:\n        raise ValueError(\"The data list is empty.\")\n    \n    # Check if column exists\n    if column not in df.columns:\n        raise KeyError(f\"The specified column '{column}' is not valid.\")\n    \n    # Validate non-negative values for specific columns\n    for col in ['steps', 'calories burned', 'distance walked']:\n        if col in df.columns and (df[col] < 0).any():\n            raise ValueError(f\"Negative values found in '{col}' column.\")\n    \n    # Calculate statistics\n    stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max()\n    }\n    \n    # Create line chart\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(df['Date'], df[column], marker='o')\n    ax.set_xlabel('Date')\n    ax.set_ylabel(column)\n    ax.set_title(f'Line Chart of {column}')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    return stats, ax"}
{"task_id": "BigCodeBench/526", "solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file=\"data.json\"):\n    # Read the JSON file\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # Initialize a defaultdict to store numeric values for each key\n    key_values = defaultdict(list)\n\n    # Collect numeric values for each key\n    for item in data:\n        for key, value in item.items():\n            if isinstance(value, (int, float)):\n                key_values[key].append(value)\n\n    # Calculate mean and median for each key\n    results = {}\n    for key, values in key_values.items():\n        results[key] = {\n            'mean': np.mean(values),\n            'median': np.median(values)\n        }\n\n    # Convert results to a DataFrame\n    df = pd.DataFrame.from_dict(results, orient='index')\n\n    # Sort the DataFrame by index (variable names)\n    df.sort_index(inplace=True)\n\n    return df"}
{"task_id": "BigCodeBench/528", "solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n    # Ensure the file has a .csv extension\n    if not file_path.lower().endswith('.csv'):\n        raise ValueError(\"File must have a .csv extension\")\n\n    # Read the CSV file and identify duplicate rows\n    with open(file_path, 'r', newline='') as csvfile:\n        reader = csv.reader(csvfile)\n        header = next(reader)  # Read the header\n        rows = [tuple(row) for row in reader]  # Convert rows to tuples for hashability\n\n    # Count duplicates\n    row_counts = Counter(rows)\n    duplicates = {row: count for row, count in row_counts.items() if count > 1}\n\n    # Convert duplicates to DataFrame\n    df = pd.DataFrame.from_records(duplicates.keys(), columns=header)\n    df['count'] = duplicates.values()\n\n    # Plot using matplotlib\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(range(len(duplicates)), df['count'])\n    ax.set_xlabel('Duplicate Rows')\n    ax.set_ylabel('Count')\n    ax.set_title('Duplicate Rows in CSV File')\n    ax.set_xticks(range(len(duplicates)))\n    ax.set_xticklabels(range(1, len(duplicates) + 1))\n    plt.tight_layout()\n\n    return duplicates, ax"}
{"task_id": "BigCodeBench/530", "solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    # Check if DataFrame is empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    # Check for negative ages\n    if (df['age'] < 0).any():\n        raise ValueError(\"Age must not be negative\")\n\n    # Round down ages to nearest integer\n    df['age'] = df['age'].apply(np.floor).astype(int)\n\n    # Identify duplicate names\n    duplicates = df[df.duplicated(subset='name', keep=False)].sort_values('name')\n\n    # If no duplicates, return empty Counter and None for plot\n    if duplicates.empty:\n        return Counter(), None\n\n    # Calculate age distribution among duplicates\n    age_distribution = Counter(duplicates['age'])\n\n    # Create histogram plot\n    min_age = duplicates['age'].min()\n    max_age = duplicates['age'].max()\n    bins = np.arange(min_age - 0.5, max_age + 1.5, 1)\n\n    fig, ax = plt.subplots(figsize=(10, 6))\n    sns.histplot(data=duplicates, x='age', bins=bins, ax=ax, kde=False)\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Count')\n    ax.set_title('Age Distribution Among Duplicate Names')\n    ax.set_xticks(range(int(min_age), int(max_age) + 1))\n\n    return age_distribution, ax"}
{"task_id": "BigCodeBench/532", "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=4):\n    # Count duplicate values in the 'value' column\n    value_counts = Counter(df['value'])\n    \n    # Extract values for plotting\n    values = df['value']\n    \n    # Create histogram and get plot axes\n    fig, ax = plt.subplots()\n    ax.hist(values, bins=bins, density=True, color='green', alpha=0.6)\n    \n    # Fit normal distribution to the data\n    mu, std = norm.fit(values)\n    \n    # Generate points for the normal distribution curve\n    x = np.linspace(min(values), max(values), 100)\n    y = norm.pdf(x, mu, std)\n    \n    # Plot the normal distribution curve\n    ax.plot(x, y, 'k-', linewidth=2)\n    \n    # Set plot title and labels\n    ax.set_title(\"Distribution\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    \n    # Adjust layout to prevent clipping of labels\n    plt.tight_layout()\n    \n    return (value_counts, ax)"}
{"task_id": "BigCodeBench/553", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(a, b):\n    # Determine the number of columns based on the length of list b\n    num_columns = min(len(b), len(COLUMNS))\n    \n    # Generate random data\n    data = np.random.rand(len(a), num_columns)\n    \n    # Create DataFrame\n    df = pd.DataFrame(data, index=a, columns=COLUMNS[:num_columns])\n    \n    # Plot bar chart\n    fig, ax = plt.subplots(figsize=(10, 6))\n    df.plot(kind='bar', ax=ax)\n    \n    # Customize the plot\n    ax.set_title('Random Data Bar Chart')\n    ax.set_xlabel('Indices')\n    ax.set_ylabel('Values')\n    ax.legend(title='Columns')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    return ax"}
{"task_id": "BigCodeBench/560", "solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(data):\n    \"\"\"\n    Plot a bar chart of monthly data values for a single year.\n\n    Args:\n    data (pd.DataFrame): DataFrame with 'month' and 'value' columns.\n                         'month' should be in 'YYYY-MM' format.\n\n    Returns:\n    matplotlib.axes.Axes: Axes object representing the plot.\n    \"\"\"\n    # Ensure data is a DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise TypeError(\"Input must be a pandas DataFrame\")\n\n    # Check for required columns\n    if not {'month', 'value'}.issubset(data.columns):\n        raise ValueError(\"DataFrame must contain 'month' and 'value' columns\")\n\n    # Convert 'month' to datetime and extract year\n    data['month'] = pd.to_datetime(data['month'])\n    year = data['month'].dt.year.iloc[0]\n\n    # Sort data by month\n    data = data.sort_values('month')\n\n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(data['month'].dt.strftime('%b'), data['value'])\n\n    # Set title and labels\n    ax.set_title(f'Monthly Data for {year}')\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n\n    # Rotate x-axis labels for better readability\n    plt.xticks(rotation=45)\n\n    # Adjust layout\n    plt.tight_layout()\n\n    return ax"}
{"task_id": "BigCodeBench/567", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Convert the input string to a pandas Series of numeric values\n    numeric_data = pd.to_numeric(pd.Series(data.split(',')))\n    \n    # Calculate the bins for the histogram\n    bins = np.arange(numeric_data.min(), numeric_data.max() + 2) - 0.5\n    \n    # Create the figure and axes objects\n    fig, ax = plt.subplots()\n    \n    # Plot the histogram\n    ax.hist(numeric_data, bins=bins, edgecolor='black')\n    \n    # Set the labels and title\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Values')\n    \n    # Adjust the layout to prevent cutting off labels\n    plt.tight_layout()\n    \n    return ax"}
{"task_id": "BigCodeBench/574", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n    # Generate x values\n    x = np.linspace(0, 2 * np.pi, array_length)\n    \n    # Create noisy sine wave\n    y_true = np.sin(x)\n    noise = noise_level * np.random.randn(array_length)\n    y_noisy = y_true + noise\n    \n    # Define the model function (sine wave)\n    def sine_model(x, amplitude, frequency, phase, offset):\n        return amplitude * np.sin(frequency * x + phase) + offset\n    \n    # Fit the curve\n    initial_guess = [1.0, 1.0, 0.0, 0.0]\n    popt, _ = curve_fit(sine_model, x, y_noisy, p0=initial_guess)\n    \n    # Generate the fitted curve\n    y_fit = sine_model(x, *popt)\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(x, y_noisy, 'b.', alpha=0.5, label='Noisy Data')\n    ax.plot(x, y_fit, 'r-', label='Fitted Curve')\n    \n    # Customize the plot\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.set_title('Noisy Sine Wave and Fitted Curve')\n    ax.legend()\n    ax.grid(True, linestyle='--', alpha=0.7)\n    \n    # Adjust layout and display\n    plt.tight_layout()\n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/579", "solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(csv_file):\n    try:\n        # Read the CSV file\n        with open(csv_file, 'r', encoding='utf-8') as file:\n            reader = csv.reader(file)\n            text = ' '.join(cell for row in reader for cell in row)\n\n        # Normalize text to ASCII\n        normalized_text = unicodedata.normalize('NFKD', text).encode('ASCII', 'ignore').decode('ASCII')\n\n        # Count words\n        words = normalized_text.lower().split()\n        word_counts = Counter(words)\n\n        # Get 10 most common words\n        top_10_words = word_counts.most_common(10)\n\n        # Create bar plot\n        words, frequencies = zip(*top_10_words)\n        fig, ax = plt.subplots(figsize=(10, 6))\n        ax.bar(words, frequencies)\n        ax.set_xlabel('Words')\n        ax.set_ylabel('Frequencies')\n        ax.set_title('10 Most Common Words')\n        plt.xticks(rotation=45, ha='right')\n        plt.tight_layout()\n\n        return ax, top_10_words\n\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The CSV file '{csv_file}' could not be found.\")\n    except IOError:\n        raise IOError(f\"An error occurred while reading the file '{csv_file}'.\")"}
{"task_id": "BigCodeBench/582", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n    # Generate normally distributed random numbers\n    data = np.random.normal(loc=0, scale=1, size=size)\n    \n    # Create a figure and axis\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Plot the histogram\n    n, bins, _ = ax.hist(data, bins=30, density=True, alpha=0.7, color='skyblue', edgecolor='black', label='Histogram')\n    \n    # Calculate the PDF\n    x = np.linspace(np.min(data), np.max(data), 100)\n    pdf = stats.norm.pdf(x, loc=0, scale=1)\n    \n    # Plot the PDF\n    ax.plot(x, pdf, 'r-', lw=2, label='PDF')\n    \n    # Set labels and title\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Density')\n    ax.set_title('Histogram and PDF of Normally Distributed Random Numbers')\n    \n    # Add legend\n    ax.legend()\n    \n    # Add grid\n    ax.grid(alpha=0.3)\n    \n    # Tight layout\n    plt.tight_layout()\n    \n    return fig"}
{"task_id": "BigCodeBench/583", "solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n    # Generate RSA key pair\n    public_key, private_key = rsa.newkeys(2048)\n\n    # Generate random bytes for filename\n    random_bytes = get_random_bytes(8)\n    filename = f\"private_key_{random_bytes.hex()}.txt\"\n\n    # Generate random password and nonce for AES encryption\n    password = get_random_bytes(32)\n    nonce = get_random_bytes(16)\n\n    # Encrypt private key with AES\n    cipher = AES.new(password, AES.MODE_GCM, nonce=nonce)\n    encrypted_key = cipher.encrypt(private_key.save_pkcs1())\n    tag = cipher.digest()\n\n    # Save encrypted private key to file\n    with open(filename, \"wb\") as f:\n        f.write(encrypted_key + tag)\n\n    return public_key, filename, password, nonce"}
{"task_id": "BigCodeBench/587", "solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\ndef task_func(file_path):\n    # Generate RSA key pair\n    (public_key, private_key) = rsa.newkeys(2048)\n\n    # Read the file content\n    with open(file_path, 'rb') as file:\n        file_content = file.read()\n\n    # Generate a random AES key\n    aes_key = os.urandom(32)  # 256-bit key\n\n    # Pad the file content\n    padder = padding.PKCS7(algorithms.AES.block_size).padder()\n    padded_data = padder.update(file_content) + padder.finalize()\n\n    # Generate a random IV\n    iv = os.urandom(16)\n\n    # Create AES cipher\n    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n\n    # Encrypt the file content with AES\n    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n\n    # Encrypt the AES key with RSA public key\n    encrypted_aes_key = rsa.encrypt(aes_key, public_key)\n\n    # Generate filenames for encrypted data and key\n    encrypted_file_name = file_path + '.encrypted'\n    encrypted_key_name = file_path + '.key'\n\n    # Save the encrypted file\n    with open(encrypted_file_name, 'wb') as encrypted_file:\n        encrypted_file.write(iv + encrypted_data)\n\n    # Save the encrypted AES key\n    with open(encrypted_key_name, 'wb') as key_file:\n        key_file.write(encrypted_aes_key)\n\n    return public_key, encrypted_file_name, encrypted_key_name"}
{"task_id": "BigCodeBench/590", "solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\nfrom urllib.error import URLError\ndef task_func(url):\n    # Validate URL\n    if not url or not isinstance(url, str):\n        raise ValueError(\"The provided URL is invalid or empty.\")\n\n    try:\n        # Fetch HTML content\n        with urllib.request.urlopen(url) as response:\n            html_content = response.read()\n    except URLError as e:\n        raise URLError(f\"Network connectivity or server issue: {str(e)}\")\n\n    # Parse HTML content\n    doc = pq(html_content)\n\n    # Extract anchor tags\n    anchors = doc('a')\n\n    # Prepare data for DataFrame\n    data = []\n    for anchor in anchors.items():\n        text = anchor.text()\n        href = anchor.attr('href')\n        data.append({'text': text, 'href': href})\n\n    # Create DataFrame\n    df = pd.DataFrame(data)\n\n    # Add fetch time\n    fetch_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    df['fetch_time'] = fetch_time\n\n    return df"}
{"task_id": "BigCodeBench/592", "solution": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint, uniform\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generate sensor data for the specified number of hours and save it in a CSV file.\n\n    Args:\n        hours (int): Number of hours to generate data for.\n        output_dir (str): Directory to save the output CSV file.\n\n    Returns:\n        str: Path to the generated CSV file.\n    \"\"\"\n    # Ensure output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Generate file name with timestamp\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    file_name = f\"sensor_data_{timestamp}.csv\"\n    file_path = os.path.join(output_dir, file_name)\n\n    # Generate data\n    start_time = datetime.now()\n    data = []\n\n    for i in range(hours * 60):  # Generate data for each minute\n        current_time = start_time + timedelta(minutes=i)\n        temperature = round(uniform(15, 35), 1)  # Temperature between 15\u00b0C and 35\u00b0C\n        humidity = randint(30, 80)  # Humidity between 30% and 80%\n        pressure = round(uniform(980, 1020), 1)  # Pressure between 980 hPa and 1020 hPa\n\n        data.append([\n            current_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n            temperature,\n            humidity,\n            pressure\n        ])\n\n    # Write data to CSV file\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time', 'Temperature', 'Humidity', 'Pressure'])\n        writer.writerows(data)\n\n    return file_path"}
{"task_id": "BigCodeBench/593", "solution": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Ensure output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Generate traffic data\n    start_time = datetime.now()\n    data = []\n    for i in range(hours):\n        current_time = start_time + timedelta(hours=i)\n        row = [current_time.strftime('%Y-%m-%d %H:%M:%S')]\n        row.extend([randint(0, 100) for _ in VEHICLE_TYPES])\n        data.append(row)\n\n    # Save data to CSV file\n    csv_file_path = os.path.join(output_dir, 'traffic_data.csv')\n    with open(csv_file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time'] + VEHICLE_TYPES)\n        writer.writerows(data)\n\n    # Read CSV file and create plot\n    df = pd.read_csv(csv_file_path, parse_dates=['Time'])\n    df.set_index('Time', inplace=True)\n\n    fig, ax = plt.subplots(figsize=(12, 6))\n    for vehicle in VEHICLE_TYPES:\n        ax.plot(df.index, df[vehicle], label=vehicle, marker='o')\n\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Vehicle Count')\n    ax.set_title('Traffic Data Over Time')\n    ax.legend()\n    ax.grid(True)\n\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    # Save plot\n    plot_file_path = os.path.join(output_dir, 'traffic_plot.png')\n    plt.savefig(plot_file_path)\n\n    return csv_file_path, ax"}
{"task_id": "BigCodeBench/594", "solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime, timedelta\nfrom random import randint\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Ensure output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n    \n    # Generate CSV file path\n    csv_filename = 'weather_data.csv'\n    csv_path = os.path.join(output_dir, csv_filename)\n    \n    # Generate weather data\n    weather_data = []\n    start_time = datetime.now()\n    for hour in range(hours):\n        time = start_time + timedelta(hours=hour)\n        condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS) - 1)]\n        weather_data.append([time.strftime('%Y-%m-%d %H:%M:%S'), condition])\n    \n    # Write data to CSV file\n    with open(csv_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time', 'Condition'])  # Write header\n        writer.writerows(weather_data)\n    \n    # Create backup directory\n    backup_dir = os.path.join(output_dir, 'backup')\n    os.makedirs(backup_dir, exist_ok=True)\n    \n    # Backup the CSV file\n    backup_path = os.path.join(backup_dir, csv_filename)\n    shutil.copy2(csv_path, backup_path)\n    \n    return csv_path"}
{"task_id": "BigCodeBench/618", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000\ndef task_func(goals, penalties):\n    # Generate random data\n    data = []\n    for team in TEAMS:\n        for _ in range(goals):\n            data.append({\n                'Team': team,\n                'Goals': randint(0, 5),\n                'Penalties': randint(0, 3),\n            })\n    \n    # Create DataFrame\n    df = pd.DataFrame(data)\n    \n    # Calculate Penalty Cost\n    df['Penalty Cost'] = df['Penalties'] * PENALTY_COST\n    \n    # Create plots\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n    \n    # Goals plot\n    sns.barplot(x='Team', y='Goals', data=df, ax=ax1, ci='sd', capsize=0.1)\n    ax1.set_title('Goals per Team')\n    ax1.set_ylabel('Goals')\n    \n    # Penalty Cost plot\n    sns.barplot(x='Team', y='Penalty Cost', data=df, ax=ax2, ci='sd', capsize=0.1)\n    ax2.set_title('Penalty Costs per Team')\n    ax2.set_ylabel('Penalty Cost ($)')\n    \n    plt.tight_layout()\n    \n    return df, [ax1, ax2]"}
{"task_id": "BigCodeBench/636", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(rows):\n    # Generate DataFrame with random integer values between 0 and 9\n    df = pd.DataFrame(np.random.randint(0, 10, size=(rows, len(COLUMNS))), columns=COLUMNS)\n    \n    # Count non-zero values in each column\n    non_zero_counts = (df != 0).sum()\n    \n    # Create bar plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    non_zero_counts.plot(kind='bar', ax=ax)\n    \n    # Customize the plot\n    ax.set_title('Non-Zero Values Count in Each Column')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Count of Non-Zero Values')\n    ax.tick_params(axis='x', rotation=0)\n    \n    # Add value labels on top of each bar\n    for i, v in enumerate(non_zero_counts):\n        ax.text(i, v, str(v), ha='center', va='bottom')\n    \n    # Adjust layout to prevent cutting off labels\n    plt.tight_layout()\n    \n    return df, ax"}
{"task_id": "BigCodeBench/637", "solution": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\ndef task_func(num_students: int) -> Tuple[pd.DataFrame, plt.Axes]:\n    # Define courses\n    courses = ['Math', 'Science', 'History', 'English', 'Art']\n    \n    # Generate random student IDs\n    student_ids = [f'Student_{i}' for i in range(1, num_students + 1)]\n    \n    # Generate random grades for each student in each course\n    grades = np.random.randint(0, 101, size=(num_students, len(courses)))\n    \n    # Create DataFrame\n    df = pd.DataFrame(grades, columns=courses, index=student_ids)\n    \n    # Calculate average grade in each course\n    avg_grades = df.mean()\n    \n    # Calculate number of students with passing grade (>= 60)\n    passing_counts = (df >= 60).sum()\n    \n    # Create a figure and axis for the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Set the width of each bar and the positions of the bars\n    bar_width = 0.35\n    r1 = np.arange(len(courses))\n    r2 = [x + bar_width for x in r1]\n    \n    # Create the bar plot\n    ax.bar(r1, avg_grades, color='skyblue', width=bar_width, label='Average Grade')\n    ax.bar(r2, passing_counts, color='lightgreen', width=bar_width, label='Passing Students')\n    \n    # Customize the plot\n    ax.set_xlabel('Courses')\n    ax.set_ylabel('Scores / Count')\n    ax.set_title('Course-wise Average and Passing Grade Counts')\n    ax.set_xticks([r + bar_width/2 for r in range(len(courses))])\n    ax.set_xticklabels(courses)\n    ax.legend()\n    \n    # Add value labels on top of each bar\n    for i, v in enumerate(avg_grades):\n        ax.text(i, v, f'{v:.1f}', ha='center', va='bottom')\n    for i, v in enumerate(passing_counts):\n        ax.text(i + bar_width, v, str(v), ha='center', va='bottom')\n    \n    plt.tight_layout()\n    \n    return df, ax"}
{"task_id": "BigCodeBench/654", "solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n    # Convert input to numpy array if it's not already\n    array = np.array(array)\n    \n    # Filter the array to get rows where the first column matches the target value\n    mask = array[:, 0] == target_value\n    filtered_indices = np.where(mask)[0]\n    filtered_values = array[mask, 1]\n    \n    # Define the exponential decay function\n    def exp_decay(x, a, b, c):\n        return a * np.exp(-b * x) + c\n    \n    # Perform the curve fitting\n    popt, _ = optimize.curve_fit(exp_decay, filtered_indices, filtered_values, p0=[filtered_values.max(), 0.1, filtered_values.min()])\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Plot the original data points\n    ax.scatter(filtered_indices, filtered_values, color='blue', label='Data')\n    \n    # Plot the fitted curve\n    x_fit = np.linspace(filtered_indices.min(), filtered_indices.max(), 100)\n    y_fit = exp_decay(x_fit, *popt)\n    ax.plot(x_fit, y_fit, color='red', label='Fitted Curve')\n    \n    # Set labels and title\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.set_title(f'Exponential Decay Fit for Target Value: {target_value}')\n    ax.legend()\n    \n    # Add text box with fitted parameters\n    param_text = f'a = {popt[0]:.4f}\\nb = {popt[1]:.4f}\\nc = {popt[2]:.4f}'\n    ax.text(0.95, 0.95, param_text, transform=ax.transAxes, verticalalignment='top', \n            horizontalalignment='right', bbox=dict(boxstyle='round', facecolor='white', alpha=0.5))\n    \n    return popt, ax"}
{"task_id": "BigCodeBench/655", "solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = set(nltk.corpus.stopwords.words('english'))\ndef task_func(texts, num_topics):\n    # Preprocess the texts\n    def preprocess(text):\n        # Remove non-alphanumeric characters (excluding spaces) and convert to lowercase\n        text = ALPHANUMERIC.sub(' ', text).lower()\n        # Remove stopwords\n        return ' '.join(word for word in text.split() if word not in STOPWORDS)\n    \n    processed_texts = [preprocess(text) for text in texts]\n    \n    # Vectorize the processed texts using TF-IDF\n    vectorizer = TfidfVectorizer()\n    tfidf_matrix = vectorizer.fit_transform(processed_texts)\n    \n    # Apply NMF to extract topics\n    nmf_model = NMF(n_components=num_topics, random_state=42)\n    nmf_output = nmf_model.fit_transform(tfidf_matrix)\n    \n    # Get the feature names (words)\n    feature_names = vectorizer.get_feature_names_out()\n    \n    # Extract the top words for each topic\n    topics = []\n    for topic_idx, topic in enumerate(nmf_model.components_):\n        top_words_idx = topic.argsort()[:-11:-1]  # Get top 10 words\n        top_words = [feature_names[i] for i in top_words_idx]\n        topics.append(top_words)\n    \n    return topics"}
{"task_id": "BigCodeBench/657", "solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(texts, stopwords=None):\n    # Download stopwords if not already available\n    nltk.download('stopwords', quiet=True)\n    \n    # Use default English stopwords if not provided\n    if stopwords is None:\n        stopwords = set(nltk.corpus.stopwords.words('english'))\n    \n    def preprocess_text(text):\n        # Convert to lowercase and remove non-alphanumeric characters\n        text = ALPHANUMERIC.sub(' ', text.lower())\n        # Tokenize and remove stopwords\n        return [word for word in text.split() if word not in stopwords]\n    \n    # Preprocess all texts\n    processed_texts = [preprocess_text(text) for text in texts]\n    \n    # Train Word2Vec model\n    model = Word2Vec(sentences=processed_texts, vector_size=100, window=5, min_count=1, workers=4)\n    \n    return model"}
{"task_id": "BigCodeBench/678", "solution": "import pandas as pd\nimport json\nimport os\nimport shutil\ndef task_func(path):\n    # Create the directory if it doesn't exist\n    os.makedirs(path, exist_ok=True)\n    \n    # Create the \"processed\" subdirectory\n    processed_dir = os.path.join(path, \"processed\")\n    os.makedirs(processed_dir, exist_ok=True)\n    \n    # Initialize an empty DataFrame to store all data\n    df = pd.DataFrame()\n    \n    # Get all JSON files in the directory and sort them alphabetically\n    json_files = sorted([f for f in os.listdir(path) if f.endswith('.json')])\n    \n    for filename in json_files:\n        file_path = os.path.join(path, filename)\n        \n        # Read the JSON file\n        with open(file_path, 'r') as file:\n            data = json.load(file)\n        \n        # Convert JSON data to DataFrame\n        temp_df = pd.DataFrame(data)\n        \n        # Add \"Source\" column with the filename\n        temp_df['Source'] = filename\n        \n        # Append to the main DataFrame\n        df = pd.concat([df, temp_df], ignore_index=True)\n        \n        # Move the processed file to the \"processed\" subdirectory\n        shutil.move(file_path, os.path.join(processed_dir, filename))\n    \n    return df"}
{"task_id": "BigCodeBench/720", "solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\ndef task_func():\n    # Define the directory and file path\n    dir_path = \"task_func_data\"\n    file_path = os.path.join(dir_path, \"Output.txt\")\n    \n    # Create the directory if it doesn't exist\n    os.makedirs(dir_path, exist_ok=True)\n    \n    # Generate random sensor data\n    data = [\n        {\n            \"timestamp\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n            \"temperature\": round(random.uniform(20.0, 30.0), 2),\n            \"humidity\": round(random.uniform(30.0, 70.0), 2)\n        }\n        for _ in range(5)  # Generate 5 data points\n    ]\n    \n    # Write data to CSV file in append mode\n    with open(file_path, mode='a', newline='') as file:\n        writer = csv.DictWriter(file, fieldnames=[\"timestamp\", \"temperature\", \"humidity\"])\n        \n        # Write header if the file is empty\n        if os.stat(file_path).st_size == 0:\n            writer.writeheader()\n        \n        writer.writerows(data)\n    \n    # Store the file path before deletion\n    return_path = os.path.abspath(file_path)\n    \n    # Delete the file after use\n    os.remove(file_path)\n    \n    return return_path"}
{"task_id": "BigCodeBench/723", "solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\nCSV_FILE_PATH = 'scraped_data.csv'\ndef task_func(url):\n    # Fetch the webpage content\n    try:\n        with urllib.request.urlopen(url) as response:\n            html = response.read()\n    except urllib.error.URLError as e:\n        print(f\"Error fetching URL: {e}\")\n        return None\n\n    # Parse the HTML content\n    soup = BeautifulSoup(html, 'html.parser')\n\n    # Extract data from the webpage\n    # This example extracts all text from paragraphs and headers\n    data = []\n    for element in soup.find_all(['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6']):\n        data.append([element.name, element.get_text(strip=True)])\n\n    # Save the scraped data to a CSV file\n    try:\n        with open(CSV_FILE_PATH, 'w', newline='', encoding='utf-8') as csvfile:\n            writer = csv.writer(csvfile)\n            writer.writerow(['Element', 'Content'])  # Write header\n            writer.writerows(data)\n    except IOError as e:\n        print(f\"Error writing to CSV file: {e}\")\n        return None\n\n    # Return the path of the CSV file\n    return os.path.abspath(CSV_FILE_PATH)"}
{"task_id": "BigCodeBench/752", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data, target_column, test_size=0.2, random_state=0) -> float:\n    # Check if data is a DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data must be a DataFrame.\")\n    \n    # Check if data is empty\n    if data.empty:\n        raise ValueError(\"Data cannot be empty.\")\n    \n    # Check if target_column is a column of data\n    if target_column not in data.columns:\n        raise ValueError(\"Target column must be a column of the DataFrame.\")\n    \n    # Check if data contains only numeric values\n    if not data.applymap(np.isreal).all().all():\n        raise ValueError(\"Data must contain only numeric values.\")\n    \n    # Check if random_state is an integer\n    if not isinstance(random_state, int):\n        raise ValueError(\"Random state must be an integer.\")\n    \n    # Check if test_size is between 0 and 1\n    if not 0 < test_size < 1:\n        raise ValueError(\"Test size must be between 0 and 1.\")\n    \n    # Split the data into features (X) and target (y)\n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n    \n    # Split the data into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n    \n    # Initialize and train the linear regression model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    \n    # Return the model's score on the test set\n    return model.score(X_test, y_test)"}
{"task_id": "BigCodeBench/760", "solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    \n    # Set random seed for reproducibility\n    if rng_seed is not None:\n        np.random.seed(rng_seed)\n    \n    # Combine all names\n    all_names = latin_names + other_names\n    \n    # Generate random data\n    ids = range(1, 101)\n    names = np.random.choice(all_names, size=100)\n    \n    # Generate random dates of birth\n    start_date = datetime.datetime(start_year, 1, 1)\n    end_date = datetime.datetime(end_year, 12, 31)\n    date_range = (end_date - start_date).days\n    dates_of_birth = [start_date + datetime.timedelta(days=np.random.randint(date_range)) for _ in range(100)]\n    \n    # Generate emails\n    emails = [f\"{name.lower().replace('\u00f3', 'o').replace('\u00e9', 'e')}{date.year}@{email_domain}\" \n              for name, date in zip(names, dates_of_birth)]\n    \n    # Create DataFrame\n    df = pd.DataFrame({\n        'ID': ids,\n        'Name': names,\n        'Date of Birth': dates_of_birth,\n        'Email': emails\n    })\n    \n    # Correct encoding for Latin characters in names\n    df['Name'] = df['Name'].apply(lambda x: codecs.encode(x, 'latin-1').decode('utf-8'))\n    \n    return df"}
{"task_id": "BigCodeBench/763", "solution": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\ndef task_func(input_file, output_file):\n    # Read JSON file\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    \n    # Initialize defaultdict to store values for each field\n    field_values = defaultdict(list)\n    \n    # Collect values for each field\n    for item in data:\n        for key, value in item.items():\n            field_values[key].append(value)\n    \n    # Calculate mean and median for each field\n    results = {}\n    for field, values in field_values.items():\n        results[field] = {\n            'mean': np.mean(values),\n            'median': np.median(values)\n        }\n    \n    # Write results to CSV file\n    with open(output_file, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Field', 'Mean', 'Median'])\n        for field, stats in results.items():\n            writer.writerow([field, stats['mean'], stats['median']])\n    \n    return results"}
{"task_id": "BigCodeBench/765", "solution": "import os\nfrom pathlib import Path\nimport shutil\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    copied_files = []\n    target_path = Path(target_dir)\n    \n    # Ensure the target directory exists\n    target_path.mkdir(parents=True, exist_ok=True)\n    \n    for file_path in kwargs.values():\n        path = Path(file_path)\n        \n        # Check if the file exists and has content\n        if path.is_file() and path.stat().st_size > 0:\n            # Copy the file to the target directory\n            dest_path = target_path / path.name\n            shutil.copy2(path, dest_path)\n            copied_files.append(str(dest_path))\n    \n    return copied_files"}
{"task_id": "BigCodeBench/771", "solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n    new_files = []\n    dir_path = Path(directory)\n    \n    if not dir_path.is_dir():\n        raise ValueError(f\"The specified directory '{directory}' does not exist.\")\n\n    for file_path in dir_path.glob('*.csv'):\n        match = re.match(pattern, file_path.name)\n        if match:\n            base_name = match.group(1)\n            new_file_name = f\"{base_name}.csv\"\n            new_file_path = dir_path / new_file_name\n\n            with file_path.open('r', newline='') as source, new_file_path.open('w', newline='') as target:\n                csv.writer(target).writerows(csv.reader(source))\n\n            new_files.append(new_file_name)\n\n    return new_files"}
{"task_id": "BigCodeBench/777", "solution": "import re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    extracted_dirs = []\n    \n    for filename in os.listdir(directory):\n        match = re.match(pattern, filename)\n        if match:\n            # Split the filename at the last occurrence of \"-\"\n            prefix = filename.rsplit('-', 1)[0]\n            \n            # Create the full path for extraction\n            extract_dir = os.path.join(directory, prefix)\n            \n            # Create the directory if it doesn't exist\n            os.makedirs(extract_dir, exist_ok=True)\n            \n            # Full path of the zip file\n            zip_path = os.path.join(directory, filename)\n            \n            # Extract the zip file\n            with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                zip_ref.extractall(extract_dir)\n            \n            # Add the extraction directory to the list\n            extracted_dirs.append(extract_dir)\n    \n    return extracted_dirs"}
{"task_id": "BigCodeBench/785", "solution": "import subprocess\nimport os\nimport glob\nimport tarfile\nfrom datetime import datetime\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    # Ensure the archive directory exists\n    os.makedirs(ARCHIVE_DIR, exist_ok=True)\n\n    # Find all files matching the pattern\n    files_to_archive = glob.glob(pattern)\n\n    if not files_to_archive:\n        raise ValueError(f\"No files found matching the pattern: {pattern}\")\n\n    # Create a unique archive filename using timestamp\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    archive_name = f\"archive_{timestamp}.tar.gz\"\n    archive_file = os.path.join(ARCHIVE_DIR, archive_name)\n\n    # Create the archive\n    with tarfile.open(archive_file, \"w:gz\") as tar:\n        for file in files_to_archive:\n            tar.add(file, arcname=os.path.basename(file))\n\n    # Delete the original files\n    for file in files_to_archive:\n        os.remove(file)\n\n    return archive_file"}
{"task_id": "BigCodeBench/800", "solution": "import csv\nimport os\nfrom collections import Counter\nCSV_FILE_PATH = 'match_data.csv'\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    count = Counter()\n\n    if not os.path.exists(csv_file_path):\n        print(f\"Warning: File {csv_file_path} not found. Starting with empty counts.\")\n    else:\n        with open(csv_file_path, 'r', newline='') as file:\n            reader = csv.DictReader(file)\n            for row in reader:\n                count['goals'] += int(row['goals'])\n                count['penalties'] += int(row['penalties'])\n\n    count['goals'] += goals\n    count['penalties'] += penalties\n\n    return count"}
{"task_id": "BigCodeBench/826", "solution": "import re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    moved_files_count = 0\n    pattern = re.compile(file_pattern)\n\n    # Create target directory if it doesn't exist\n    os.makedirs(target_dir, exist_ok=True)\n\n    # Iterate through files in the source directory\n    for filename in os.listdir(source_dir):\n        if pattern.match(filename):\n            source_path = os.path.join(source_dir, filename)\n            target_path = os.path.join(target_dir, filename)\n            \n            try:\n                shutil.move(source_path, target_path)\n                moved_files_count += 1\n            except (IOError, OSError) as e:\n                print(f\"Error moving file {filename}: {str(e)}\")\n\n    return moved_files_count"}
{"task_id": "BigCodeBench/845", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(text1, text2):\n    # Clean texts by removing non-alphanumeric characters and converting to lowercase\n    clean_text1 = ALPHANUMERIC.sub(' ', text1).lower().strip()\n    clean_text2 = ALPHANUMERIC.sub(' ', text2).lower().strip()\n    \n    # Compute term frequencies\n    tf1 = Counter(clean_text1.split())\n    tf2 = Counter(clean_text2.split())\n    \n    # Get unique words from both texts\n    unique_words = set(tf1.keys()) | set(tf2.keys())\n    \n    # Create term frequency vectors\n    vec1 = np.array([tf1.get(word, 0) for word in unique_words])\n    vec2 = np.array([tf2.get(word, 0) for word in unique_words])\n    \n    # Compute cosine similarity\n    dot_product = np.dot(vec1, vec2)\n    norm1 = np.linalg.norm(vec1)\n    norm2 = np.linalg.norm(vec2)\n    \n    cosine_similarity = dot_product / (norm1 * norm2) if norm1 * norm2 != 0 else 0.0\n    \n    # Compute Levenshtein ratio\n    levenshtein_ratio = ratio(clean_text1, clean_text2)\n    \n    return (cosine_similarity, levenshtein_ratio)"}
{"task_id": "BigCodeBench/854", "solution": "from functools import reduce\nfrom itertools import permutations\nimport math\ndef task_func(numbers):\n    # Input validation\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"Input must be a list of integers.\")\n    if any(num < 0 for num in numbers):\n        raise ValueError(\"Input numbers cannot be negative.\")\n\n    # Handle empty list case\n    if not numbers:\n        return [], []\n\n    # Generate all permutations\n    perms = list(permutations(numbers))\n\n    # Calculate factorial sums for each permutation\n    factorial_sums = [sum(math.factorial(num) for num in perm) for perm in perms]\n\n    return factorial_sums, list(map(list, perms))"}
{"task_id": "BigCodeBench/857", "solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    transferred_files = []\n\n    # Ensure destination directory exists\n    os.makedirs(DEST_DIR, exist_ok=True)\n\n    # Convert EXTENSIONS to a list if it's a string\n    if isinstance(EXTENSIONS, str):\n        EXTENSIONS = [EXTENSIONS]\n\n    for ext in EXTENSIONS:\n        # Normalize extension format\n        ext = ext if ext.startswith('.') else f'.{ext}'\n        \n        # Find files with the current extension\n        files = glob.glob(os.path.join(SOURCE_DIR, f'*{ext}'))\n\n        for file_path in files:\n            file_name = os.path.basename(file_path)\n            dest_path = os.path.join(DEST_DIR, file_name)\n\n            try:\n                # Copy file with metadata\n                shutil.copy2(file_path, dest_path)\n                transferred_files.append(file_name)\n            except (IOError, OSError) as e:\n                warnings.warn(f\"Could not transfer '{file_name}': {str(e)}\")\n            except Exception as e:\n                warnings.warn(f\"Unexpected error when transferring '{file_name}': {str(e)}\")\n\n    return transferred_files"}
{"task_id": "BigCodeBench/865", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n    # Convert input data to a pandas DataFrame\n    df = pd.DataFrame(data, columns=['Item', 'Count', 'Weight'])\n    \n    # Normalize counts using z-score normalization\n    df['Normalized Count'] = zscore(df['Count'])\n    \n    # Normalize weights using min-max scaling\n    scaler = MinMaxScaler()\n    df['Normalized Weight'] = scaler.fit_transform(df['Weight'].values.reshape(-1, 1))\n    \n    # Select and return the required columns\n    return df[['Item', 'Normalized Count', 'Normalized Weight']]"}
{"task_id": "BigCodeBench/870", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n    if not data_list:\n        return pd.DataFrame(columns=['Mean Value'])\n\n    max_length = max(len(tup) for tup in data_list)\n    sums = [0] * max_length\n    counts = [0] * max_length\n\n    for tup in data_list:\n        for i, value in enumerate(tup):\n            if isinstance(value, (int, float)):\n                sums[i] += value\n                counts[i] += 1\n\n    means = [sum / count if count > 0 else np.nan for sum, count in zip(sums, counts)]\n    \n    df = pd.DataFrame({\n        'Mean Value': means\n    }, index=[f'Position {i}' for i in range(max_length)])\n\n    return df"}
{"task_id": "BigCodeBench/879", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\ndef task_func(data, col1, col2):\n    # Check if data is empty\n    if data.empty:\n        raise ValueError(\"The DataFrame 'data' is empty.\")\n\n    # Check if columns exist in the DataFrame\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(f\"One or both columns '{col1}' and '{col2}' are not in the DataFrame.\")\n\n    # Check if columns are categorical\n    if not pd.api.types.is_categorical_dtype(data[col1]) and not pd.api.types.is_object_dtype(data[col1]):\n        raise TypeError(f\"Column '{col1}' contains non-categorical data.\")\n    if not pd.api.types.is_categorical_dtype(data[col2]) and not pd.api.types.is_object_dtype(data[col2]):\n        raise TypeError(f\"Column '{col2}' contains non-categorical data.\")\n\n    # Check if columns have multiple categories\n    if data[col1].nunique() < 2 or data[col2].nunique() < 2:\n        raise ValueError(\"One or both of the columns do not have multiple categories.\")\n\n    # Construct the contingency table\n    contingency_table = pd.crosstab(data[col1], data[col2])\n\n    # Check if any category has less than 5 observations\n    if (contingency_table < 5).any().any():\n        raise ValueError(\"Some categories have less than 5 observations, violating the chi-square test assumptions.\")\n\n    # Perform the chi-square test of independence\n    _, p_value, _, _ = chi2_contingency(contingency_table)\n\n    return p_value"}
{"task_id": "BigCodeBench/897", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\nNUMBERS = list(range(1, 7))\ndef task_func(rolls, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    \n    # Simulate dice rolls\n    results = [random.choice(NUMBERS) for _ in range(rolls)]\n    \n    # Calculate frequency of each outcome\n    frequency = np.bincount(results, minlength=7)[1:]\n    \n    # Create histogram\n    fig, ax = plt.subplots()\n    ax.hist(results, bins=range(1, 8), align='left', rwidth=0.8)\n    ax.set_title(\"Histogram of Dice Rolls\")\n    ax.set_xlabel(\"Dice Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_xticks(NUMBERS)\n    \n    return frequency, ax"}
{"task_id": "BigCodeBench/906", "solution": "import zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    # Ensure target directory exists\n    os.makedirs(target_dir, exist_ok=True)\n    \n    archive_path = os.path.join(target_dir, archive_name)\n    \n    with zipfile.ZipFile(archive_path, 'w') as zip_file:\n        for root, _, files in os.walk(source_dir):\n            for file in files:\n                if file.endswith('_processed'):\n                    file_path = os.path.join(root, file)\n                    arcname = os.path.relpath(file_path, source_dir)\n                    zip_file.write(file_path, arcname)\n    \n    return archive_path"}
{"task_id": "BigCodeBench/914", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    # Ensure 'Date' is datetime and set as index\n    df['Date'] = pd.to_datetime(df['Date'])\n    df.set_index('Date', inplace=True)\n    df.sort_index(inplace=True)\n\n    # Prepare data for regression\n    X = np.array(range(len(df))).reshape(-1, 1)\n    y = df['Close'].values\n\n    # Fit linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # Generate future dates\n    last_date = df.index[-1]\n    future_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=7, freq='D')\n\n    # Predict future prices\n    future_X = np.array(range(len(df), len(df) + 7)).reshape(-1, 1)\n    future_prices = model.predict(future_X)\n\n    # Plot historical and predicted data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(df.index, df['Close'], label='Historical Prices', color='blue')\n    ax.plot(future_dates, future_prices, label='Predicted Prices', color='red', linestyle='--')\n\n    # Customize plot\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Stock Closing Prices: Historical and Predicted')\n    ax.legend()\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    return future_prices.tolist(), ax"}
{"task_id": "BigCodeBench/915", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\ndef task_func(df, z_threshold=2):\n    # Calculate Z-Scores for the 'closing_price' column\n    z_scores = zscore(df['closing_price'])\n    \n    # Identify outliers\n    outliers = df[np.abs(z_scores) > z_threshold]\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Plot all closing prices\n    ax.plot(df.index, df['closing_price'], label='Closing Price', color='blue')\n    \n    # Highlight outliers\n    ax.scatter(outliers.index, outliers['closing_price'], color='red', label='Outlier', zorder=5)\n    \n    # Set labels and title\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers in Closing Prices')\n    \n    # Add legend\n    ax.legend()\n    \n    # Adjust layout\n    plt.tight_layout()\n    \n    return outliers, ax"}
{"task_id": "BigCodeBench/916", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df: pd.DataFrame) -> tuple:\n    \"\"\"\n    Visualize the distribution of stock closing prices using both a box plot and a histogram.\n\n    Parameters:\n    df (pd.DataFrame): A DataFrame containing a 'Close' column with stock closing prices.\n\n    Returns:\n    tuple: A tuple containing two matplotlib.axes._axes.Axes objects: \n           the first for the boxplot and the second for the histogram.\n    \"\"\"\n    # Ensure the DataFrame contains a 'Close' column\n    if 'Close' not in df.columns:\n        raise ValueError(\"DataFrame must contain a 'Close' column with closing prices\")\n\n    # Create a figure with two subplots side by side\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n\n    # Create the box plot\n    sns.boxplot(y=df['Close'], ax=ax1)\n    ax1.set_title('Box Plot of Closing Prices')\n    ax1.set_ylabel('Closing Price')\n\n    # Create the histogram\n    sns.histplot(df['Close'], kde=True, ax=ax2)\n    ax2.set_title('Histogram of Closing Prices')\n    ax2.set_xlabel('Closing Price')\n    ax2.set_ylabel('Frequency')\n\n    # Adjust layout to prevent overlap\n    plt.tight_layout()\n\n    return ax1, ax2"}
{"task_id": "BigCodeBench/917", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    # Ensure the DataFrame has a datetime index\n    if not isinstance(df.index, pd.DatetimeIndex):\n        df.index = pd.to_datetime(df.index)\n    \n    # Fit the ARIMA model\n    model = ARIMA(df['close'], order=(1,1,1))\n    model_fit = model.fit()\n    \n    # Forecast the next 7 days\n    forecast = model_fit.forecast(steps=7)\n    forecast_values = forecast.tolist()\n    \n    # Create date range for forecast\n    last_date = df.index[-1]\n    forecast_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=7)\n    \n    # Plot historical data and forecast\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(df.index, df['close'], label='Historical Prices')\n    ax.plot(forecast_dates, forecast_values, color='red', label='Forecasted Prices')\n    \n    # Customize the plot\n    ax.set_title('Share Closing Prices Forecast')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.legend()\n    ax.grid(True)\n    \n    # Format x-axis to show dates nicely\n    plt.gcf().autofmt_xdate()\n    \n    return forecast_values, ax"}
{"task_id": "BigCodeBench/928", "solution": "from collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n    # Generate all possible two-letter combinations\n    all_combinations = [''.join(combo) for combo in itertools.product(string.ascii_lowercase, repeat=2)]\n    \n    # Initialize the result dictionary with all combinations set to 0\n    result = {combo: 0 for combo in all_combinations}\n    \n    # Count the occurrences of two-letter combinations in the word\n    word_combinations = [word[i:i+2] for i in range(len(word) - 1)]\n    combination_counts = Counter(word_combinations)\n    \n    # Update the result dictionary with the counts from the word\n    for combo, count in combination_counts.items():\n        if combo in result:\n            result[combo] = count\n    \n    return result"}
{"task_id": "BigCodeBench/942", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    # Generate date range\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Create DataFrame with sales data\n    df = pd.DataFrame({\n        'Date': np.repeat(dates, len(categories)),\n        'Category': categories * periods,\n        'Sales': np.random.randint(100, 1000, size=periods * len(categories))\n    })\n    \n    # Create plot\n    fig, ax = plt.subplots(figsize=(12, 6))\n    \n    # Plot sales data for each category\n    for category in categories:\n        category_data = df[df['Category'] == category]\n        ax.plot(category_data['Date'], category_data['Sales'], marker='o', label=category)\n    \n    # Customize plot\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.set_title('Sales Report by Category')\n    ax.legend()\n    ax.grid(True)\n    \n    # Rotate x-axis labels for better readability\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    return df, ax"}
{"task_id": "BigCodeBench/945", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    # Generate date range\n    date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Generate or use provided sales data\n    if sales_data is None:\n        np.random.seed(42)  # for reproducibility\n        sales_data = np.random.randint(100, 1000, size=periods)\n    \n    # Create DataFrame\n    df = pd.DataFrame({'date': date_range, 'sales': sales_data})\n    \n    # Prepare data for linear regression\n    X = np.arange(periods).reshape(-1, 1)\n    y = df['sales'].values\n    \n    # Fit linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Forecast future sales\n    future_X = np.arange(periods, 2*periods).reshape(-1, 1)\n    forecasted_sales = model.predict(future_X)\n    \n    return forecasted_sales"}
{"task_id": "BigCodeBench/952", "solution": "import pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    sanitized_tasks = [task.replace(\" \", \"_\") for task in task_list]\n    \n    if n_tasks > len(sanitized_tasks):\n        n_tasks = len(sanitized_tasks)\n    \n    selected_tasks = random.sample(sanitized_tasks, n_tasks)\n    assigned_employees = random.choices(employees, k=n_tasks)\n    current_date = datetime.now().strftime('%Y-%m-%d')\n    \n    assignments = pd.DataFrame({\n        'Task Name': selected_tasks,\n        'Assigned To': assigned_employees,\n        'Due Date': [current_date] * n_tasks\n    })\n    \n    return assignments"}
{"task_id": "BigCodeBench/955", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\ndef task_func(mystrings, text):\n    if not text:\n        raise ValueError(\"Input text is empty\")\n    \n    # Convert text to lowercase and replace spaces with underscores\n    text = text.lower().replace(' ', '_')\n    \n    # Split text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Count word frequencies while preserving order\n    word_counts = Counter()\n    unique_words = []\n    for word in words:\n        if word not in word_counts:\n            unique_words.append(word)\n        word_counts[word] += 1\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.bar(unique_words, [word_counts[word] for word in unique_words])\n    \n    # Customize the plot\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Word Frequency Plot')\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n    \n    return ax"}
{"task_id": "BigCodeBench/963", "solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(f\"The source directory '{source_directory}' does not exist.\")\n\n    # Create the target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Define valid file extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Create the full path for the zip file\n    zip_path = os.path.join(target_directory, f\"{zip_name}.zip\")\n\n    # Create a new zip file\n    with zipfile.ZipFile(zip_path, 'w') as zip_file:\n        # Iterate through all files in the source directory\n        for ext in valid_extensions:\n            for file_path in glob.glob(os.path.join(source_directory, f\"*{ext}\")):\n                # Add the file to the zip archive\n                zip_file.write(file_path, os.path.basename(file_path))\n\n    # Return the full path to the created zip file\n    return zip_path"}
{"task_id": "BigCodeBench/964", "solution": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\nimport csv\ndef task_func(source_directory: str, target_directory: str) -> int:\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"The source directory '{source_directory}' does not exist.\")\n    \n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n    \n    converted_count = 0\n    supported_extensions = {'.txt', '.docx', '.xlsx', '.csv'}\n    \n    for file_path in Path(source_directory).rglob('*'):\n        if file_path.suffix.lower() in supported_extensions:\n            try:\n                if file_path.suffix.lower() == '.txt':\n                    with open(file_path, 'r', encoding='utf-8') as f:\n                        content = f.read()\n                elif file_path.suffix.lower() == '.docx':\n                    doc = docx.Document(file_path)\n                    content = '\\n'.join(paragraph.text for paragraph in doc.paragraphs)\n                elif file_path.suffix.lower() == '.xlsx':\n                    df = pd.read_excel(file_path)\n                    content = df.to_csv(index=False)\n                else:  # .csv\n                    with open(file_path, 'r', encoding='utf-8') as f:\n                        content = f.read()\n                \n                output_path = Path(target_directory) / f\"{file_path.stem}.csv\"\n                with open(output_path, 'w', encoding='utf-8', newline='') as f:\n                    writer = csv.writer(f)\n                    writer.writerow(['Text'])\n                    writer.writerow([content])\n                \n                converted_count += 1\n            except Exception as e:\n                print(f\"Error converting {file_path}: {str(e)}\")\n    \n    return converted_count"}
{"task_id": "BigCodeBench/969", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    # Check if DataFrame is empty\n    if df.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n\n    # Check for non-numeric columns\n    if not all(np.issubdtype(dtype, np.number) for dtype in df.dtypes):\n        raise TypeError(\"The DataFrame contains non-numeric data types.\")\n\n    # Check for NaN values\n    if df.isnull().values.any():\n        raise ValueError(\"The DataFrame contains NaN values.\")\n\n    # Compute cumulative sum\n    cumsum_df = df.cumsum()\n\n    # Initialize MinMaxScaler\n    scaler = MinMaxScaler()\n\n    # Apply MinMaxScaler to each column\n    normalized_cumsum = pd.DataFrame(\n        scaler.fit_transform(cumsum_df),\n        columns=df.columns,\n        index=df.index\n    )\n\n    return normalized_cumsum"}
{"task_id": "BigCodeBench/971", "solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\ndef task_func(directory_path: str):\n    # Check if the directory exists\n    if not os.path.isdir(directory_path):\n        raise ValueError(f\"The provided directory '{directory_path}' does not exist.\")\n\n    result = []\n    \n    # Iterate over the files in the directory\n    for entry in os.scandir(directory_path):\n        if entry.is_file():\n            # Get file stats\n            stat_info = entry.stat()\n            \n            # Get file size in bytes\n            file_size = stat_info.st_size\n            \n            # Get creation time (or metadata change time if creation time is not available)\n            ctime = stat_info.st_ctime\n            creation_time = datetime.fromtimestamp(ctime, tz=timezone.utc).isoformat()\n            \n            # Get modification time\n            mtime = stat_info.st_mtime\n            modification_time = datetime.fromtimestamp(mtime, tz=timezone.utc).isoformat()\n            \n            # Append the file information to the result list\n            result.append((entry.name, file_size, creation_time, modification_time))\n\n    return result"}
{"task_id": "BigCodeBench/985", "solution": "import pandas as pd\nimport json\nimport os\nimport math\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    # Parse JSON data\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"The JSON data is malformed.\")\n\n    # Check if data is empty\n    if not data:\n        raise ValueError(\"The JSON data is empty.\")\n\n    # Validate and process data\n    processed_data = []\n    for item in data:\n        if not isinstance(item, dict):\n            raise ValueError(\"Invalid JSON structure. Expected a list of objects.\")\n        \n        country = item.get(\"Country\")\n        population = item.get(\"Population\")\n\n        if not isinstance(country, str):\n            raise ValueError(\"Country names must be strings.\")\n        \n        if not isinstance(population, (int, float)):\n            raise ValueError(\"Population must be numeric.\")\n        \n        if population < 0:\n            raise ValueError(\"Population cannot be negative.\")\n\n        # Round down float populations to nearest integer\n        population = math.floor(population)\n        \n        processed_data.append({\"Country\": country, \"Population\": population})\n\n    # Create DataFrame\n    df = pd.DataFrame(processed_data)\n\n    # Ensure output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Generate file path\n    file_path = os.path.join(output_dir, file_name)\n\n    # Write DataFrame to CSV\n    try:\n        df.to_csv(file_path, index=False)\n    except IOError:\n        raise IOError(f\"Unable to write to file: {file_path}\")\n\n    return file_path, df"}
{"task_id": "BigCodeBench/988", "solution": "import os\nimport re\nfrom pathlib import Path\ndef task_func(dir_path: str, predicates: list) -> dict:\n    \"\"\"\n    Evaluates each item (files and directories) in a given directory against specified conditions.\n\n    Args:\n        dir_path (str): Path to the directory to evaluate.\n        predicates (list): List of predicates (callable or regex patterns) to evaluate against.\n\n    Returns:\n        dict: A dictionary with directory items as keys and the results of condition checks as values.\n\n    Raises:\n        ValueError: If no valid predicates are provided.\n        FileNotFoundError: If the specified directory does not exist or is not a directory.\n    \"\"\"\n    # Check if the directory exists and is a directory\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError(f\"The specified path '{dir_path}' does not exist or is not a directory.\")\n\n    # Check if predicates are provided and valid\n    if not predicates:\n        raise ValueError(\"No valid predicates are provided.\")\n\n    # Deduplicate predicates\n    unique_predicates = list(set(predicates))\n\n    results = {}\n    \n    # Iterate through items in the directory\n    for item in os.listdir(dir_path):\n        item_results = []\n        for predicate in unique_predicates:\n            if callable(predicate):\n                # If predicate is a function, call it with the item name\n                item_results.append(predicate(item))\n            elif isinstance(predicate, str):\n                # If predicate is a string, treat it as a regex pattern\n                item_results.append(bool(re.search(predicate, item)))\n            else:\n                # Skip invalid predicates\n                continue\n        \n        # Only add to results if there were valid predicates\n        if item_results:\n            results[item] = item_results\n\n    return results"}
{"task_id": "BigCodeBench/990", "solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\ndef task_func(hex_string):\n    try:\n        # Decode the hexadecimal string to bytes\n        byte_data = binascii.unhexlify(hex_string)\n        \n        # Convert bytes to a UTF-8 string\n        utf8_string = byte_data.decode('utf-8')\n        \n        # Prepare the result dictionary\n        result = {\n            'hex': hex_string,\n            'base64': base64.b64encode(byte_data).decode('utf-8'),\n            'utf-8': utf8_string,\n            'utf-16': utf8_string.encode('utf-16').decode('utf-16'),\n            'utf-32': utf8_string.encode('utf-32').decode('utf-32'),\n            'URL': urllib.parse.quote(utf8_string),\n            'ROT13': codecs.encode(utf8_string, 'rot_13')\n        }\n        \n        # Check if the string can be represented in ASCII\n        try:\n            result['ASCII'] = utf8_string.encode('ascii').decode('ascii')\n        except UnicodeEncodeError:\n            result['ASCII'] = 'Not representable in ASCII'\n        \n        return result\n    except Exception as e:\n        return {'error': str(e)}"}
{"task_id": "BigCodeBench/998", "solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\ndef task_func(url):\n    try:\n        # Download the tar.gz file\n        urllib.request.urlretrieve(url, TARGET_TAR_FILE)\n        \n        # Calculate the MD5 checksum of the downloaded file\n        md5_hash = hashlib.md5()\n        with open(TARGET_TAR_FILE, \"rb\") as f:\n            for chunk in iter(lambda: f.read(4096), b\"\"):\n                md5_hash.update(chunk)\n        calculated_checksum = md5_hash.hexdigest()\n        \n        # Validate the checksum\n        if calculated_checksum == EXPECTED_MD5_CHECKSUM:\n            # Extract the tar.gz file\n            with tarfile.open(TARGET_TAR_FILE, \"r:gz\") as tar:\n                tar.extractall()\n            return True\n        else:\n            # Delete the file if the checksum does not match\n            os.remove(TARGET_TAR_FILE)\n            return False\n    except Exception as e:\n        # Handle any exceptions and delete the file if it exists\n        if os.path.exists(TARGET_TAR_FILE):\n            os.remove(TARGET_TAR_FILE)\n        print(f\"An error occurred: {e}\")\n        return False"}
{"task_id": "BigCodeBench/999", "solution": "import urllib.request\nimport os\nimport csv\nimport collections\ndef task_func(url, column_name, csv_file_path):\n    try:\n        # Download the CSV file from the given URL\n        urllib.request.urlretrieve(url, csv_file_path)\n        \n        # Initialize a defaultdict to count occurrences\n        value_counts = collections.defaultdict(int)\n        \n        # Read the CSV file and count occurrences\n        with open(csv_file_path, 'r', newline='', encoding='utf-8') as csvfile:\n            reader = csv.DictReader(csvfile)\n            \n            # Check if the specified column exists\n            if column_name not in reader.fieldnames:\n                raise ValueError(f\"The provided column_name '{column_name}' does not exist in the CSV file.\")\n            \n            # Count occurrences of each value in the specified column\n            for row in reader:\n                value_counts[row[column_name]] += 1\n        \n        return dict(value_counts)\n    \n    except urllib.error.URLError as e:\n        raise Exception(f\"Failed to download the CSV file: {e}\")\n    except csv.Error as e:\n        raise Exception(f\"Error reading the CSV file: {e}\")\n    finally:\n        # Delete the downloaded CSV file if it exists\n        if os.path.exists(csv_file_path):\n            os.remove(csv_file_path)"}
{"task_id": "BigCodeBench/1003", "solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\ndef task_func(url):\n    try:\n        # Fetch the XML file from the URL\n        with urllib.request.urlopen(url) as response:\n            xml_content = response.read()\n    except urllib.error.URLError as e:\n        raise ValueError(f\"Invalid URL or unable to fetch XML file: {e}\")\n\n    try:\n        # Parse the XML content\n        root = etree.fromstring(xml_content)\n    except etree.XMLSyntaxError as e:\n        raise ValueError(f\"Invalid XML syntax: {e}\")\n\n    # Check if the XML structure conforms to the expected format\n    if root.tag != 'root' or not root.findall('item'):\n        raise ValueError(\"XML structure does not match expected format\")\n\n    # Extract data from XML and convert to DataFrame\n    data = []\n    for item in root.findall('item'):\n        item_data = {child.tag: child.text for child in item}\n        data.append(item_data)\n\n    if not data:\n        raise ValueError(\"No data found in XML\")\n\n    # Create DataFrame\n    df = pd.DataFrame(data)\n    return df"}
{"task_id": "BigCodeBench/1004", "solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(url):\n    # Download the text file from the specified URL\n    try:\n        with urllib.request.urlopen(url) as response:\n            text = response.read().decode('utf-8')\n    except Exception as e:\n        raise Exception(f\"Failed to download or decode the file: {e}\")\n\n    # Process the text to count the frequency of each word\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_counts = Counter(words)\n\n    # Get the ten most frequently occurring words\n    top_ten = word_counts.most_common(10)\n\n    # Prepare data for plotting\n    words, counts = zip(*top_ten)\n\n    # Create the bar chart\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(words, counts)\n    \n    # Customize the plot\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Ten Most Frequently Occurring Words')\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n\n    return word_counts, ax"}
{"task_id": "BigCodeBench/1006", "solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    try:\n        # Ensure the download directory exists\n        os.makedirs(download_path, exist_ok=True)\n        \n        # Download the file\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n        \n        # Check if the content type is 'application/zip'\n        content_type = response.headers.get('content-type', '').lower()\n        if 'application/zip' not in content_type:\n            return \"Error: The URL does not point to a ZIP file.\"\n        \n        # Save the file locally\n        file_name = url.split('/')[-1]\n        file_path = os.path.join(download_path, file_name)\n        with open(file_path, 'wb') as f:\n            for chunk in response.iter_content(chunk_size=8192):\n                f.write(chunk)\n        \n        # Extract the ZIP file\n        try:\n            with ZipFile(file_path, 'r') as zip_ref:\n                zip_ref.extractall(download_path)\n            \n            # Remove the downloaded ZIP file after extraction\n            os.remove(file_path)\n            \n            return download_path\n        except BadZipFile:\n            os.remove(file_path)  # Clean up the invalid file\n            return \"Error: The downloaded file is not a valid ZIP file.\"\n        \n    except requests.RequestException:\n        return \"Error: Unable to download the file from the provided URL.\"\n    except Exception as e:\n        return f\"Error: {str(e)}\""}
{"task_id": "BigCodeBench/1008", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\ndef task_func(url, table_id):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        raise requests.exceptions.HTTPError(f\"HTTP request failed: {e}\")\n\n    soup = BeautifulSoup(response.content, 'html.parser')\n    table = soup.find('table', id=table_id)\n\n    if table is None:\n        raise ValueError(\"Table with the specified ID not found.\")\n\n    rows = table.find_all('tr')\n    if not rows:\n        return pd.DataFrame()\n\n    headers = [header.text.strip() for header in rows[0].find_all(['th', 'td'])]\n    data = []\n    for row in rows[1:]:\n        data.append([cell.text.strip() for cell in row.find_all(['td', 'th'])])\n\n    df = pd.DataFrame(data, columns=headers)\n    return df"}
{"task_id": "BigCodeBench/1012", "solution": "import requests\nfrom pathlib import Path\nimport zipfile\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\ndef task_func(url, filename):\n    # Ensure directories exist\n    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)\n    ZIP_DIR.mkdir(parents=True, exist_ok=True)\n\n    zip_path = DOWNLOAD_DIR / filename\n\n    try:\n        # Download the zip file\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n        with open(zip_path, 'wb') as file:\n            for chunk in response.iter_content(chunk_size=8192):\n                file.write(chunk)\n    except requests.exceptions.RequestException as e:\n        return f\"Error: Network-related exception - {str(e)}\", []\n\n    try:\n        # Extract the zip file\n        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n        \n        # Get list of extracted files\n        extracted_files = [f.name for f in ZIP_DIR.iterdir() if f.is_file()]\n        return \"Success\", extracted_files\n    except (zipfile.BadZipFile, OSError) as e:\n        return f\"Error: File-related exception - {str(e)}\", []"}
{"task_id": "BigCodeBench/1013", "solution": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    # Fetch the webpage content\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        print(f\"Error fetching the webpage: {e}\")\n        return 0\n\n    # Parse the HTML content\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Find all hyperlinks and convert to absolute URLs\n    links = set()\n    for a_tag in soup.find_all('a', href=True):\n        absolute_url = urljoin(base_url, a_tag['href'])\n        links.add(absolute_url)\n\n    # Save the unique absolute URLs to a CSV file\n    with open(csv_file, 'w', newline='', encoding='utf-8') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Absolute URL'])  # Write header\n        for link in links:\n            writer.writerow([link])\n\n    # Return the number of unique absolute links\n    return len(links)"}
{"task_id": "BigCodeBench/1015", "solution": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    try:\n        # Fetch the HTML content\n        if webpage_url.startswith(('http://', 'https://')):\n            response = requests.get(webpage_url)\n            response.raise_for_status()\n            content = response.content\n        else:\n            with open(webpage_url, 'rb') as file:\n                content = file.read()\n\n        # Parse the HTML content\n        tree = html.fromstring(content)\n        tables = tree.xpath('//table')\n\n        if not tables:\n            return 0  # No tables found in the HTML content\n\n        # Convert the first table to a DataFrame\n        df = pd.read_html(content)[0]\n\n        if df.empty:\n            return 0  # Table is empty\n\n        # Connect to the SQLite database\n        conn = sqlite3.connect(database_name)\n        \n        try:\n            # Drop the existing table if it exists and create a new one\n            with conn:\n                df.to_sql('my_table', conn, if_exists='replace', index=False)\n            \n            # Return the number of rows in the parsed HTML table\n            return len(df)\n\n        except sqlite3.Error as e:\n            raise sqlite3.DatabaseError(f\"Database error: {e}\")\n\n        finally:\n            conn.close()\n\n    except requests.RequestException as e:\n        raise requests.RequestException(f\"Network error: {e}\")\n\n    except Exception as e:\n        raise Exception(f\"An unexpected error occurred: {e}\")"}
{"task_id": "BigCodeBench/1019", "solution": "from PIL import Image\nimport codecs\nimport pytesseract\nIMAGE_PATH = \"image.png\"\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    def convert_encoding(text, from_enc, to_enc):\n        try:\n            return text.encode(from_enc).decode(to_enc)\n        except (UnicodeDecodeError, LookupError) as e:\n            raise ValueError(f\"UnicodeDecodeError or LookupError occurs during conversion: {e}\")\n\n    try:\n        with Image.open(filename) as img:\n            # Extract text using OCR\n            ocr_text = pytesseract.image_to_string(img)\n            \n            if ocr_text.strip():\n                return convert_encoding(ocr_text, from_encoding, to_encoding)\n            \n            # If OCR fails, try to extract comment\n            comment = img.info.get('comment', '')\n            if comment:\n                return convert_encoding(comment, from_encoding, to_encoding)\n    \n    except Exception as e:\n        print(f\"An error occurred while processing the image: {e}\")\n    \n    # If both OCR and comment extraction fail, return an empty string\n    return \"\""}
{"task_id": "BigCodeBench/1020", "solution": "import json\nimport requests\nimport chardet\nAPI_URL = \"http://api.example.com/data\"\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    try:\n        # Initiate HTTP GET request with a 5-second timeout\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n\n        # Retrieve the response content in raw bytes\n        content = response.content\n\n        # Handle empty content\n        if not content:\n            return {}\n\n        # Detect encoding if not provided\n        if from_encoding is None:\n            detected = chardet.detect(content)\n            from_encoding = detected['encoding']\n\n        # Raise exception if encoding is not detected for non-empty content\n        if from_encoding is None:\n            raise ValueError(\"Unable to detect encoding for non-empty content\")\n\n        # Decode the content using the detected or provided encoding\n        decoded_content = content.decode(from_encoding)\n\n        # Re-encode the content to the desired encoding\n        re_encoded_content = decoded_content.encode(to_encoding)\n\n        # Parse the JSON data\n        json_data = json.loads(re_encoded_content)\n\n        return json_data\n\n    except requests.RequestException as e:\n        print(f\"HTTP Request failed: {e}\")\n        return {}\n    except json.JSONDecodeError as e:\n        print(f\"JSON Decode Error: {e}\")\n        return {}"}
{"task_id": "BigCodeBench/1022", "solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    # Check if the file exists\n    if not os.path.isfile(csv_file_path):\n        raise FileNotFoundError(f\"The CSV file '{csv_file_path}' does not exist.\")\n\n    try:\n        # Read the CSV file\n        df = pd.read_csv(csv_file_path)\n\n        # Check if the specified column exists\n        if column_name not in df.columns:\n            raise ValueError(f\"The column '{column_name}' is not present in the CSV file.\")\n\n        # Convert date values to datetime objects\n        df[column_name] = pd.to_datetime(df[column_name], format=date_format, errors='coerce')\n\n        # Filter rows based on the current date\n        current_date = datetime.now().date()\n        df = df[df[column_name].dt.date <= current_date]\n\n        # Sort the resulting data by the date column\n        df = df.sort_values(by=column_name)\n\n        return df\n\n    except EmptyDataError:\n        # Return an empty DataFrame if the CSV file is empty\n        return pd.DataFrame()"}
{"task_id": "BigCodeBench/1039", "solution": "import ssl\nimport os\nimport hashlib\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    try:\n        # Set up SSL context\n        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        context.load_cert_chain(certfile=cert_file, keyfile=key_file)\n        \n        # Wrap the socket with SSL\n        secure_socket = context.wrap_socket(client_socket, server_side=True)\n        \n        # Receive file path from client\n        file_path = secure_socket.recv(buffer_size).decode('utf-8').strip()\n        \n        # Check if file exists\n        if not os.path.isfile(file_path):\n            secure_socket.sendall(b'File not found')\n            return 'File not found'\n        \n        # Calculate SHA256 hash\n        sha256_hash = hashlib.sha256()\n        with open(file_path, 'rb') as file:\n            while True:\n                data = file.read(buffer_size)\n                if not data:\n                    break\n                sha256_hash.update(data)\n        \n        hash_result = sha256_hash.hexdigest()\n        \n        # Send hash back to client\n        secure_socket.sendall(hash_result.encode('utf-8'))\n        \n        return hash_result\n    \n    except Exception as e:\n        error_message = f\"Error: {str(e)}\"\n        try:\n            secure_socket.sendall(error_message.encode('utf-8'))\n        except:\n            pass\n        return error_message"}
{"task_id": "BigCodeBench/1040", "solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.setblocking(False)\n    server.bind((server_address, server_port))\n    server.listen(5)\n\n    inputs = [server]\n    outputs = []\n    message_queues = {}\n\n    start_time = datetime.now()\n    end_time = start_time + timedelta(seconds=run_duration)\n\n    print(f\"Server started at {start_time}\")\n\n    while datetime.now() < end_time:\n        readable, writable, exceptional = select.select(inputs, outputs, inputs, 0.1)\n\n        for s in readable:\n            if s is server:\n                connection, client_address = s.accept()\n                connection.setblocking(False)\n                inputs.append(connection)\n                message_queues[connection] = queue.Queue()\n            else:\n                try:\n                    data = s.recv(buffer_size)\n                    if data:\n                        current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n                        response = f\"{data.decode().strip()} (Server time: {current_time})\"\n                        message_queues[s].put(response.encode())\n                        if s not in outputs:\n                            outputs.append(s)\n                    else:\n                        if s in outputs:\n                            outputs.remove(s)\n                        inputs.remove(s)\n                        s.close()\n                        del message_queues[s]\n                except ConnectionResetError:\n                    if s in outputs:\n                        outputs.remove(s)\n                    inputs.remove(s)\n                    s.close()\n                    del message_queues[s]\n\n        for s in writable:\n            try:\n                next_msg = message_queues[s].get_nowait()\n            except queue.Empty:\n                outputs.remove(s)\n            else:\n                try:\n                    s.send(next_msg)\n                except ConnectionResetError:\n                    outputs.remove(s)\n                    if s in inputs:\n                        inputs.remove(s)\n                    s.close()\n                    del message_queues[s]\n\n        for s in exceptional:\n            inputs.remove(s)\n            if s in outputs:\n                outputs.remove(s)\n            s.close()\n            del message_queues[s]\n\n    server.close()\n    end_time = datetime.now()\n    duration = end_time - start_time\n    return f\"Server ran for {duration.total_seconds():.2f} seconds from {start_time} to {end_time}\""}
{"task_id": "BigCodeBench/1042", "solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\ndef task_func(client_socket):\n    # Receive message from client socket\n    message = client_socket.recv(BUFFER_SIZE).decode('utf-8')\n\n    # Get sender's email, recipient's email, and sender's email password\n    sender_email = input(\"Enter sender's email: \")\n    recipient_email = input(\"Enter recipient's email: \")\n    sender_password = getpass.getpass(\"Enter sender's email password: \")\n\n    # Create email message\n    email = EmailMessage()\n    email.set_content(message)\n    email['Subject'] = 'Message from client socket'\n    email['From'] = sender_email\n    email['To'] = recipient_email\n\n    try:\n        # Connect to SMTP server and send email\n        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n            server.starttls()\n            server.login(sender_email, sender_password)\n            server.send_message(email)\n        print(\"Email sent successfully\")\n    except Exception as e:\n        print(f\"Failed to send email: {str(e)}\")\n\n    # Close the client socket\n    client_socket.close()"}
{"task_id": "BigCodeBench/1053", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n    try:\n        # Read the CSV file\n        df = pd.read_csv(file_path, header=None)\n        \n        # Check if the file has a header\n        if df.iloc[0, 0].lower() == 'text':\n            df = pd.read_csv(file_path)\n        else:\n            df.columns = ['Text']\n        \n        # Ensure there's only one column\n        if len(df.columns) > 1:\n            df = df.iloc[:, 0:1]\n            df.columns = ['Text']\n        \n        # Initialize and fit CountVectorizer\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        word_count_matrix = vectorizer.fit_transform(df['Text'].astype(str))\n        \n        # Get word frequencies\n        word_freq = dict(zip(vectorizer.get_feature_names_out(), word_count_matrix.sum(axis=0).A1))\n        \n        # Sort words by frequency and get top 10\n        top_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:10]\n        \n        # Create the plot\n        fig, ax = plt.subplots(figsize=(10, 6))\n        words, freqs = zip(*top_words)\n        ax.barh(words, freqs)\n        ax.invert_yaxis()  # Invert y-axis to show most frequent at the top\n        ax.set_title(\"Top 10 Most Common Words\")\n        ax.set_xlabel(\"Frequency\")\n        ax.set_ylabel(\"Words\")\n        \n        if save_path:\n            plt.savefig(save_path)\n            plt.close(fig)\n            return None\n        else:\n            return ax\n\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file at path '{file_path}' was not found.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None"}
{"task_id": "BigCodeBench/1057", "solution": "import pandas as pd\nimport itertools\nimport numpy as np\ndef task_func(animals=None, foods=None):\n    # Predefined lists\n    default_animals = ['lion', 'tiger', 'bear']\n    default_foods = ['meat', 'fish', 'berries']\n\n    # Handle special cases\n    if (animals is None or len(animals) == 0) and (foods is None or len(foods) == 0):\n        return pd.DataFrame()\n    \n    if animals is None or len(animals) == 0:\n        animals = default_animals\n    if foods is None or len(foods) == 0:\n        foods = default_foods\n\n    # Generate all possible combinations\n    combinations = list(itertools.product(animals, foods))\n\n    # Shuffle the combinations randomly\n    np.random.shuffle(combinations)\n\n    # Create a DataFrame\n    df = pd.DataFrame(combinations, columns=['Animal', 'Food'])\n\n    # Create the 'animal:food' format\n    df['Pair'] = df['Animal'] + ':' + df['Food']\n\n    # Pivot the DataFrame to have animals as rows and foods as columns\n    pivot_df = df.pivot(index='Animal', columns='Food', values='Pair')\n\n    return pivot_df"}
{"task_id": "BigCodeBench/1077", "solution": "from datetime import datetime\nimport pytz\nimport numpy as np\ndef task_func(time_strings, timezone):\n    if len(time_strings) < 2:\n        return 0.0\n    \n    tz = pytz.timezone(timezone)\n    \n    # Convert timestamps to the specified timezone\n    timestamps = [\n        datetime.strptime(ts, '%Y-%m-%d %H:%M:%S')\n        .replace(tzinfo=pytz.UTC)\n        .astimezone(tz)\n        for ts in time_strings\n    ]\n    \n    # Calculate time differences in seconds between consecutive pairs\n    time_diffs = [\n        abs((timestamps[i+1] - timestamps[i]).total_seconds())\n        for i in range(len(timestamps) - 1)\n    ]\n    \n    # Return 0.0 if there are no time differences\n    if not time_diffs:\n        return 0.0\n    \n    # Calculate and return the mean time difference\n    return np.mean(time_diffs)"}
{"task_id": "BigCodeBench/1085", "solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Lowercase the text and remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text.lower())\n    \n    # Split into words\n    words = text.split()\n    \n    # Count word frequencies\n    word_counts = Counter(words)\n    \n    # Get top 10 most common words\n    top_10 = word_counts.most_common(10)\n    \n    # Prepare data for plotting\n    words, counts = zip(*top_10)\n    \n    # Create bar chart\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(words, counts)\n    \n    # Customize the plot\n    ax.set_xlabel('Words', fontsize=12)\n    ax.set_ylabel('Frequency', fontsize=12)\n    ax.set_title('Top 10 Most Common Words', fontsize=14)\n    ax.tick_params(axis='x', rotation=45)\n    \n    # Adjust layout and add count labels\n    plt.tight_layout()\n    for i, count in enumerate(counts):\n        ax.text(i, count, str(count), ha='center', va='bottom')\n    \n    return top_10, ax"}
{"task_id": "BigCodeBench/1124", "solution": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\ndef task_func(myString):\n    # Extract URL from the string\n    url_match = re.search(r'https?://\\S+', myString)\n    if not url_match:\n        return \"No valid URL found in the provided string.\"\n    \n    url = url_match.group()\n    \n    # Validate URL\n    try:\n        result = urlparse(url)\n        if not all([result.scheme, result.netloc]):\n            return \"No valid URL found in the provided string.\"\n    except ValueError:\n        return \"No valid URL found in the provided string.\"\n    \n    # Fetch webpage content\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n    except requests.RequestException:\n        return f\"Unable to fetch the content of the URL: {url}\"\n    \n    # Parse HTML and extract title\n    soup = BeautifulSoup(response.text, 'html.parser')\n    title_tag = soup.find('title')\n    \n    if not title_tag:\n        return \"No title tag found in the webpage.\"\n    \n    return title_tag.string.strip()"}
{"task_id": "BigCodeBench/1129", "solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\ndef task_func(json_data, unknown_key, save_dir=None):\n    # Parse the JSON data\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON data provided\")\n\n    # Find the URL associated with the specified key\n    url = data.get(unknown_key)\n    if not url:\n        raise KeyError(f\"Key '{unknown_key}' not found in JSON data\")\n\n    # Download the file from the URL\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        raise IOError(f\"Failed to download file from URL: {url}. Error: {str(e)}\")\n\n    # Generate the timestamped filename\n    timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n    filename = f\"{unknown_key}_{timestamp}.txt\"\n\n    # Determine the save directory\n    if save_dir is None:\n        save_dir = os.getcwd()\n    \n    # Ensure the save directory exists\n    os.makedirs(save_dir, exist_ok=True)\n\n    # Construct the full file path\n    file_path = os.path.join(save_dir, filename)\n\n    # Save the file\n    try:\n        with open(file_path, 'wb') as file:\n            file.write(response.content)\n    except IOError as e:\n        raise IOError(f\"Failed to save file: {str(e)}\")\n\n    # Return the absolute path of the saved file\n    return os.path.abspath(file_path)"}
{"task_id": "BigCodeBench/1137", "solution": "import bs4\nimport requests\nimport re\nimport json\ndef task_func(url: str, output_path: str) -> list:\n    # Define a comprehensive regex pattern for phone numbers\n    phone_pattern = re.compile(r'''\n        (?:\n            (?:\\+\\d{1,3}[-.\\s]?)?  # Optional country code\n            \\(?\\d{3}\\)?[-.\\s]?     # Area code\n            \\d{3}[-.\\s]?           # First 3 digits\n            \\d{4}                  # Last 4 digits\n            (?:\\s?(?:ext|x|ext.)\\s?\\d{2,5})?  # Optional extension\n        )\n    ''', re.VERBOSE)\n\n    try:\n        # Determine if the input is a URL or a local file\n        if url.startswith(('http://', 'https://')):\n            response = requests.get(url)\n            response.raise_for_status()\n            content = response.text\n        else:\n            with open(url, 'r', encoding='utf-8') as file:\n                content = file.read()\n\n        # Parse the content\n        soup = bs4.BeautifulSoup(content, 'html.parser')\n        text = soup.get_text()\n\n        # Find all phone numbers\n        phone_numbers = phone_pattern.findall(text)\n\n        # Clean and format the phone numbers\n        cleaned_numbers = [re.sub(r'\\s+', ' ', num.strip()) for num in phone_numbers]\n        unique_numbers = list(set(cleaned_numbers))\n\n        # Save to JSON file\n        with open(output_path, 'w', encoding='utf-8') as file:\n            json.dump(unique_numbers, file, ensure_ascii=False, indent=2)\n\n        return unique_numbers\n\n    except requests.RequestException as e:\n        print(f\"Error fetching URL: {e}\")\n    except IOError as e:\n        print(f\"Error reading file: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n    return []"}
